This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.env.example
.gitattributes
.gitignore
.npmrc
.nvmrc
apps/apiservice/eslint.config.js
apps/apiservice/package.json
apps/apiservice/src/index.ts
apps/apiservice/tsconfig.json
apps/apiservice/turbo.json
apps/apiservice/wrangler.toml
apps/astro/.gitignore
apps/astro/astro.config.mjs
apps/astro/components.json
apps/astro/eslint.config.js
apps/astro/package.json
apps/astro/postcss.config.js
apps/astro/public/favicon.svg
apps/astro/public/logos/astro.svg
apps/astro/public/logos/clerk.svg
apps/astro/public/logos/cloudflare.svg
apps/astro/public/logos/d1.svg
apps/astro/public/logos/expo.svg
apps/astro/public/logos/r2.svg
apps/astro/public/logos/trpc.svg
apps/astro/public/logos/turborepo.svg
apps/astro/public/logos/workers.svg
apps/astro/README.md
apps/astro/src/components/react/footer.tsx
apps/astro/src/components/react/header.tsx
apps/astro/src/components/react/hero.tsx
apps/astro/src/components/react/primary-features.tsx
apps/astro/src/components/react/secondary-features.tsx
apps/astro/src/components/ui/button.tsx
apps/astro/src/components/ui/dialog.tsx
apps/astro/src/components/ui/input.tsx
apps/astro/src/env.d.ts
apps/astro/src/layouts/Layout.astro
apps/astro/src/lib/utils.ts
apps/astro/src/pages/index.astro
apps/astro/src/styles/globals.css
apps/astro/tailwind.config.js
apps/astro/tsconfig.json
apps/astro/turbo.json
apps/astro/wrangler.toml
apps/expo/.env.example
apps/expo/.npmrc
apps/expo/app.json
apps/expo/app/_layout.tsx
apps/expo/app/(auth)/_layout.tsx
apps/expo/app/(auth)/sign-in.tsx
apps/expo/app/(auth)/sign-up.tsx
apps/expo/app/(gameui)/_layout.tsx
apps/expo/app/(gameui)/accessibility-guide.tsx
apps/expo/app/(gameui)/core-components.tsx
apps/expo/app/(gameui)/function-components.tsx
apps/expo/app/(gameui)/game-components-demo.tsx
apps/expo/app/(gameui)/index.tsx
apps/expo/app/(gameui)/login-demo.tsx
apps/expo/app/(gameui)/main-interface-demo.tsx
apps/expo/app/(gameui)/theme-explorer.tsx
apps/expo/app/(tabs)/_layout.tsx
apps/expo/app/(tabs)/account.tsx
apps/expo/app/(tabs)/add.tsx
apps/expo/app/(tabs)/lore.tsx
apps/expo/app/index.tsx
apps/expo/babel.config.ts
apps/expo/components/core/Button.tsx
apps/expo/components/core/Card.tsx
apps/expo/components/core/index.ts
apps/expo/components/core/Input.tsx
apps/expo/components/core/LoadingIndicator.tsx
apps/expo/components/core/Text.tsx
apps/expo/components/functions/AchievementList.tsx
apps/expo/components/functions/DialogSystem.tsx
apps/expo/components/functions/index.ts
apps/expo/components/functions/InventoryTypes.ts
apps/expo/components/functions/ItemDetailsModal.tsx
apps/expo/components/functions/Leaderboard.tsx
apps/expo/components/functions/LoginScreen.tsx
apps/expo/components/functions/MainGameInterface.tsx
apps/expo/components/functions/QuestLog.tsx
apps/expo/components/functions/StoreItemCard.tsx
apps/expo/components/functions/StoreItemDetails.tsx
apps/expo/components/functions/StoreSystem.tsx
apps/expo/components/themes/ThemeProvider.tsx
apps/expo/eslint.config.mjs
apps/expo/package.json
apps/expo/README.md
apps/expo/tsconfig.json
apps/expo/turbo.json
apps/expo/utils/api.tsx
apps/expo/utils/base-url.tsx
apps/expo/utils/index.ts
apps/expo/utils/platform.ts
apps/expo/utils/theme.ts
apps/expo/utils/TRPCProvider.tsx
apps/workflows/.editorconfig
apps/workflows/.gitignore
apps/workflows/.prettierrc
apps/workflows/eslint.config.js
apps/workflows/package.json
apps/workflows/README.md
apps/workflows/src/index.ts
apps/workflows/src/workflows/daily-recap.ts
apps/workflows/src/workflows/get-users-for-recap.ts
apps/workflows/tsconfig.json
apps/workflows/turbo.json
apps/workflows/worker-configuration.d.ts
apps/workflows/wrangler.toml
docs/analysis-repo.md
docs/CONTRIBUTING.md
docs/DEVELOPMENT_GUIDELINES.md
docs/repomix-output.xml
docs/repomix.md
game-ui-component-guide.md
guides.md
LICENSE
new-docs/architecture-overview.md
new-docs/collaboration-faq.md
new-docs/feature-development-guide.md
new-docs/project-structure.md
new-docs/release-process.md
new-docs/testing-and-release-guide.md
package.json
packages/db/drizzle.config.ts
packages/db/eslint.config.js
packages/db/migrations/0000_youthful_proudstar.sql
packages/db/migrations/0001_swift_puck.sql
packages/db/migrations/0002_sharp_leech.sql
packages/db/migrations/0003_swift_sunfire.sql
packages/db/migrations/0004_thin_thunderbolt.sql
packages/db/migrations/0005_chunky_rocket_raccoon.sql
packages/db/migrations/0006_pretty_morbius.sql
packages/db/migrations/0007_chief_quentin_quire.sql
packages/db/migrations/meta/_journal.json
packages/db/migrations/meta/0000_snapshot.json
packages/db/migrations/meta/0001_snapshot.json
packages/db/migrations/meta/0002_snapshot.json
packages/db/migrations/meta/0003_snapshot.json
packages/db/migrations/meta/0004_snapshot.json
packages/db/migrations/meta/0005_snapshot.json
packages/db/migrations/meta/0006_snapshot.json
packages/db/migrations/meta/0007_snapshot.json
packages/db/package.json
packages/db/src/client.ts
packages/db/src/index.ts
packages/db/src/schema.ts
packages/db/tsconfig.json
packages/trpc/eslint.config.js
packages/trpc/package.json
packages/trpc/src/index.ts
packages/trpc/src/root.ts
packages/trpc/src/router/moments.ts
packages/trpc/src/router/post.ts
packages/trpc/src/router/recaps.ts
packages/trpc/src/router/user.ts
packages/trpc/src/trpc.ts
packages/trpc/src/types.ts
packages/trpc/tsconfig.json
plan-doc.md
pnpm-workspace.yaml
README.md
status.md
tooling/eslint/base.js
tooling/eslint/nextjs.js
tooling/eslint/package.json
tooling/eslint/react.js
tooling/eslint/tsconfig.json
tooling/eslint/types.d.ts
tooling/github/package.json
tooling/github/setup/action.yml
tooling/prettier/index.js
tooling/prettier/package.json
tooling/prettier/tsconfig.json
tooling/tailwind/base.ts
tooling/tailwind/eslint.config.js
tooling/tailwind/native.ts
tooling/tailwind/package.json
tooling/tailwind/tsconfig.json
tooling/tailwind/web.ts
tooling/typescript/base.json
tooling/typescript/internal-package.json
tooling/typescript/package.json
turbo.json
turbo/generators/config.ts
turbo/generators/templates/eslint.config.js.hbs
turbo/generators/templates/package.json.hbs
turbo/generators/templates/tsconfig.json.hbs
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".env.example">
CLOUDFLARE_ACCOUNT_ID=
CLOUDFLARE_DATABASE_ID=
CLOUDFLARE_D1_TOKEN=
</file>

<file path=".gitattributes">
# Auto detect text files and perform LF normalization
* text=auto
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
node_modules
.pnp
.pnp.js

# testing
coverage

# next.js
.next/
out/
next-env.d.ts

# nitro
.nitro/
.output/

# expo
.expo/
expo-env.d.ts
apps/expo/.gitignore
apps/expo/ios
apps/expo/android

# production
build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env
.env*.local

# vercel
.vercel

# typescript
dist/
.cache

# turbo
.turbo
/apps/expo-app/android/app/src/debug/AndroidManifest.xml
/apps/expo-app/android/app/src/main/AndroidManifest.xml
/apps/expo-app/android/app/build.gradle
/apps/expo-app/android/build.gradle
/apps/expo-app/android/app/src/main/res/values/colors.xml
/apps/expo-app/android/app/src/main/res/values-night/colors.xml
/apps/expo-app/android/app/debug.keystore
/apps/expo-app/android/gradle.properties
/apps/expo-app/android/gradle/wrapper/gradle-wrapper.jar
/apps/expo-app/android/gradle/wrapper/gradle-wrapper.properties
/apps/expo-app/android/gradlew
/apps/expo-app/android/gradlew.bat
/apps/expo-app/android/app/src/main/res/mipmap-hdpi/ic_launcher.webp
/apps/expo-app/android/app/src/main/res/mipmap-mdpi/ic_launcher.webp
/apps/expo-app/android/app/src/main/res/mipmap-xhdpi/ic_launcher.webp
/apps/expo-app/android/app/src/main/res/mipmap-xxhdpi/ic_launcher.webp
/apps/expo-app/android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.webp
/apps/expo-app/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
/apps/expo-app/android/app/src/main/res/drawable/ic_launcher_background.xml
/apps/expo-app/android/app/src/main/res/mipmap-hdpi/ic_launcher_foreground.webp
/apps/expo-app/android/app/src/main/res/mipmap-mdpi/ic_launcher_foreground.webp
/apps/expo-app/android/app/src/main/res/mipmap-xhdpi/ic_launcher_foreground.webp
/apps/expo-app/android/app/src/main/res/mipmap-xxhdpi/ic_launcher_foreground.webp
/apps/expo-app/android/app/src/main/res/mipmap-xxxhdpi/ic_launcher_foreground.webp
/apps/expo-app/android/app/src/main/res/mipmap-hdpi/ic_launcher_round.webp
/apps/expo-app/android/app/src/main/res/mipmap-mdpi/ic_launcher_round.webp
/apps/expo-app/android/app/src/main/res/mipmap-xhdpi/ic_launcher_round.webp
/apps/expo-app/android/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.webp
/apps/expo-app/android/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.webp
/apps/expo-app/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
/apps/expo-app/android/app/src/main/java/com/anonymous/expoapp/MainActivity.kt
/apps/expo-app/android/app/src/main/java/com/anonymous/expoapp/MainApplication.kt
/apps/expo-app/android/app/proguard-rules.pro
/apps/expo-app/android/app/src/main/res/drawable/rn_edit_text_material.xml
/apps/expo-app/android/settings.gradle
/apps/expo-app/android/app/src/main/res/drawable-hdpi/splashscreen_logo.png
/apps/expo-app/android/app/src/main/res/drawable-mdpi/splashscreen_logo.png
/apps/expo-app/android/app/src/main/res/drawable-xhdpi/splashscreen_logo.png
/apps/expo-app/android/app/src/main/res/drawable-xxhdpi/splashscreen_logo.png
/apps/expo-app/android/app/src/main/res/drawable-xxxhdpi/splashscreen_logo.png
/apps/expo-app/android/app/src/main/res/values/strings.xml
/apps/expo-app/android/app/src/main/res/values/styles.xml
/apps/apiservice/.wrangler/
/packages/db/.wrangler/
/apps/eventsservice/.wrangler/
.dev.vars
</file>

<file path=".npmrc">
node-linker=hoisted
link-workspace-packages=true
</file>

<file path=".nvmrc">
20.16
</file>

<file path="apps/apiservice/eslint.config.js">
import baseConfig from "@acme/eslint-config/base";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: ["dist/**"],
  },
  ...baseConfig
];
</file>

<file path="apps/apiservice/package.json">
{
  "name": "@acme/apiservice",
  "version": "0.0.1",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "wrangler dev --ip 0.0.0.0 --remote",
    "build": "tsc",
    "deploy": "wrangler publish",
    "clean": "git clean -xdf .cache .turbo node_modules .wrangler"
  },
  "dependencies": {
    "@acme/db": "workspace:*",
    "@acme/trpc": "workspace:*",
    "typescript": "catalog:",
    "wrangler": "3.93.0"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "@types/node": "^20.16.11"
  }
}
</file>

<file path="apps/apiservice/src/index.ts">
// This file is the entrypoint for this Cloudflare worker, which contains our API service.
// It uses the TRPC framework to handle requests and responses in a Type safe manner.
// It also has access to our Cloudflare D1 database, R2 bucket, and Clerk for authentication
// for securely storing and retrieving data.

// We use the getDB function from the db package to create the DrizzleDB dynamically, and pass
//it to the tRPC context.

// We set up the Clerk client in our tRPC context, so we need to pass the publishable key and 
// secret key set in our wrangler.toml. Production apps should use wrangler secrets to keep 
//your secrets out of your codebase.

// Additionally, in our package.json dev script, we set the ip flag to 0.0.0.0 to allow the API
//service to be accessed from Expo Go for local development

import { appRouter, createContext } from '@acme/trpc';
import type { FetchCreateContextFnOptions } from '@trpc/server/adapters/fetch';
import { fetchRequestHandler } from '@trpc/server/adapters/fetch';
import type { D1Database } from '@cloudflare/workers-types';
import { getDB } from "@acme/db";
import type { R2Bucket } from '@cloudflare/workers-types';

interface Env {
  CLERK_PUBLISHABLE_KEY: string;
  CLERK_SECRET_KEY: string;
  DB: D1Database;
  IMAGES_BUCKET: R2Bucket;
}

export default {
  async fetch(request: Request, env: Env): Promise<Response> {
    const db = getDB(env);
    const corsHeaders = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    };

    // Handle OPTIONS preflight requests
    if (request.method === 'OPTIONS') {
      return new Response(null, {
        headers: corsHeaders
      });
    }

    // Your existing TRPC handler
    return fetchRequestHandler({
      endpoint: '/trpc',
      req: request,
      router: appRouter,
      createContext: (opts: FetchCreateContextFnOptions) => createContext({
        ...opts,
        clerkPublicKey: env.CLERK_PUBLISHABLE_KEY,
        clerkSecretKey: env.CLERK_SECRET_KEY,
        db,
        imagesBucket: env.IMAGES_BUCKET
      }),
    });
  },
};
</file>

<file path="apps/apiservice/tsconfig.json">
{
  "extends": "@acme/tsconfig/base.json",
  "exclude": ["node_modules"]
}
</file>

<file path="apps/apiservice/turbo.json">
{
  "$schema": "https://turborepo.org/schema.json",
  "extends": ["//"],
  "tasks": {
    "dev": {
      "persistent": true,
      "interactive": true
    }
  }
}
</file>

<file path="apps/apiservice/wrangler.toml">
name = "apiservice"
compatibility_date = "2024-09-23"
compatibility_flags = ["nodejs_compat"]

main = "src/index.ts"

[build]
command = "pnpm run build"

[[r2_buckets]]
bucket_name = ""
preview_bucket_name = ""
binding = ""

[[d1_databases]]
binding = "DB"
database_name = ""
database_id = ""


# You can use wrangler to set secrets and environments to keep your secrets out of your codebase.
[vars]
WRANGLER_BUILD_CONDITIONS=""
WRANGLER_BUILD_PLATFORM="node"
CLERK_PUBLISHABLE_KEY = ""
CLERK_SECRET_KEY = ""

[dev]
port = 8787
</file>

<file path="apps/astro/.gitignore">
# build output
dist/
# generated types
.astro/

# dependencies
node_modules/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

.wrangler/

# environment variables
.env
.env.production

# macOS-specific files
.DS_Store

# jetbrains setting folder
.idea/
</file>

<file path="apps/astro/astro.config.mjs">
import { defineConfig } from 'astro/config';

import react from '@astrojs/react';

import tailwind from '@astrojs/tailwind';

import cloudflare from '@astrojs/cloudflare';

// https://astro.build/config
export default defineConfig({
  output: 'server',
  adapter: cloudflare({
    mode: 'directory'
  }),
  integrations: [react(), tailwind({applyBaseStyles: false,})]
});
</file>

<file path="apps/astro/components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/styles/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="apps/astro/eslint.config.js">
import baseConfig, { restrictEnvAccess } from "@acme/eslint-config/base";
import nextjsConfig from "@acme/eslint-config/nextjs";
import reactConfig from "@acme/eslint-config/react";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: [".astro/**"],
  },
  ...baseConfig,
  ...reactConfig,
  ...nextjsConfig,
  ...restrictEnvAccess,
];
</file>

<file path="apps/astro/package.json">
{
  "name": "@acme/astro",
  "type": "module",
  "version": "0.0.1",
  "scripts": {
    "dev": "astro dev",
    "start": "astro dev",
    "build": "astro check && astro build",
    "preview": "astro preview",
    "astro": "astro",
    "clean": "git clean -xdf .cache .next .turbo node_modules",
    "deploy": "wrangler pages deploy dist",
    "deploy:prod": "wrangler pages deploy dist --env production"
  },
  "dependencies": {
    "@astrojs/check": "^0.9.4",
    "@astrojs/cloudflare": "^8.1.0",
    "@astrojs/react": "^3.6.2",
    "@astrojs/tailwind": "^5.1.1",
    "@headlessui/react": "^2.1.9",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-slot": "^1.1.0",
    "astro": "^4.15.12",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "framer-motion": "^11.11.1",
    "lucide-react": "^0.447.0",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-player": "^2.16.0",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5.3.3"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/prettier-config": "workspace:*",
    "@acme/tailwind-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "@types/react": "~18.3.12",
    "@types/react-dom": "18.3.0",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.13"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="apps/astro/postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="apps/astro/public/favicon.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 128 128">
    <path d="M50.4 78.5a75.1 75.1 0 0 0-28.5 6.9l24.2-65.7c.7-2 1.9-3.2 3.4-3.2h29c1.5 0 2.7 1.2 3.4 3.2l24.2 65.7s-11.6-7-28.5-7L67 45.5c-.4-1.7-1.6-2.8-2.9-2.8-1.3 0-2.5 1.1-2.9 2.7L50.4 78.5Zm-1.1 28.2Zm-4.2-20.2c-2 6.6-.6 15.8 4.2 20.2a17.5 17.5 0 0 1 .2-.7 5.5 5.5 0 0 1 5.7-4.5c2.8.1 4.3 1.5 4.7 4.7.2 1.1.2 2.3.2 3.5v.4c0 2.7.7 5.2 2.2 7.4a13 13 0 0 0 5.7 4.9v-.3l-.2-.3c-1.8-5.6-.5-9.5 4.4-12.8l1.5-1a73 73 0 0 0 3.2-2.2 16 16 0 0 0 6.8-11.4c.3-2 .1-4-.6-6l-.8.6-1.6 1a37 37 0 0 1-22.4 2.7c-5-.7-9.7-2-13.2-6.2Z" />
    <style>
        path { fill: #000; }
        @media (prefers-color-scheme: dark) {
            path { fill: #FFF; }
        }
    </style>
</svg>
</file>

<file path="apps/astro/public/logos/astro.svg">
<svg width="85" height="107" viewBox="0 0 85 107" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M27.5894 91.1365C22.7555 86.7178 21.3444 77.4335 23.3583 70.7072C26.8503 74.948 31.6888 76.2914 36.7005 77.0497C44.4375 78.2199 52.0359 77.7822 59.2232 74.2459C60.0454 73.841 60.8052 73.3027 61.7036 72.7574C62.378 74.714 62.5535 76.6892 62.318 78.6996C61.7452 83.5957 59.3086 87.3778 55.4332 90.2448C53.8835 91.3916 52.2437 92.4167 50.6432 93.4979C45.7262 96.8213 44.3959 100.718 46.2435 106.386C46.2874 106.525 46.3267 106.663 46.426 107C43.9155 105.876 42.0817 104.24 40.6845 102.089C39.2087 99.8193 38.5066 97.3081 38.4696 94.5909C38.4511 93.2686 38.4511 91.9345 38.2733 90.6309C37.8391 87.4527 36.3471 86.0297 33.5364 85.9478C30.6518 85.8636 28.37 87.6469 27.7649 90.4554C27.7187 90.6707 27.6517 90.8837 27.5847 91.1341L27.5894 91.1365Z" fill="white"/>
<path d="M27.5894 91.1365C22.7555 86.7178 21.3444 77.4335 23.3583 70.7072C26.8503 74.948 31.6888 76.2914 36.7005 77.0497C44.4375 78.2199 52.0359 77.7822 59.2232 74.2459C60.0454 73.841 60.8052 73.3027 61.7036 72.7574C62.378 74.714 62.5535 76.6892 62.318 78.6996C61.7452 83.5957 59.3086 87.3778 55.4332 90.2448C53.8835 91.3916 52.2437 92.4167 50.6432 93.4979C45.7262 96.8213 44.3959 100.718 46.2435 106.386C46.2874 106.525 46.3267 106.663 46.426 107C43.9155 105.876 42.0817 104.24 40.6845 102.089C39.2087 99.8193 38.5066 97.3081 38.4696 94.5909C38.4511 93.2686 38.4511 91.9345 38.2733 90.6309C37.8391 87.4527 36.3471 86.0297 33.5364 85.9478C30.6518 85.8636 28.37 87.6469 27.7649 90.4554C27.7187 90.6707 27.6517 90.8837 27.5847 91.1341L27.5894 91.1365Z" fill="url(#paint0_linear_1_59)"/>
<path d="M0 69.5866C0 69.5866 14.3139 62.6137 28.6678 62.6137L39.4901 29.1204C39.8953 27.5007 41.0783 26.3999 42.4139 26.3999C43.7495 26.3999 44.9325 27.5007 45.3377 29.1204L56.1601 62.6137C73.1601 62.6137 84.8278 69.5866 84.8278 69.5866C84.8278 69.5866 60.5145 3.35233 60.467 3.21944C59.7692 1.2612 58.5911 0 57.0029 0H27.8274C26.2392 0 25.1087 1.2612 24.3634 3.21944C24.3108 3.34983 0 69.5866 0 69.5866Z" fill="white"/>
<defs>
<linearGradient id="paint0_linear_1_59" x1="22.4702" y1="107" x2="69.1451" y2="84.9468" gradientUnits="userSpaceOnUse">
<stop stop-color="#D83333"/>
<stop offset="1" stop-color="#F041FF"/>
</linearGradient>
</defs>
</svg>
</file>

<file path="apps/astro/public/logos/clerk.svg">
<svg width="77" height="24" viewBox="0 0 77 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M35.1481 16.7381C34.7521 17.1486 34.2765 17.4741 33.7505 17.6947C33.2245 17.9154 32.659 18.0265 32.0886 18.0213C31.6069 18.0359 31.1273 17.9517 30.6794 17.7739C30.2315 17.5961 29.8247 17.3285 29.4841 16.9875C28.8654 16.3421 28.5093 15.4206 28.5093 14.3221C28.5093 12.1231 29.941 10.619 32.0886 10.619C32.6646 10.6109 33.2353 10.7301 33.7599 10.968C34.2845 11.206 34.7501 11.5568 35.1234 11.9955L36.9816 10.3525C35.7707 8.8827 33.8059 8.12305 31.9401 8.12305C28.2885 8.12305 25.6992 10.64 25.6992 14.343C25.6992 16.1745 26.3427 17.7167 27.4279 18.8057C28.5131 19.8947 30.0591 20.5344 31.843 20.5344C34.16 20.5344 36.0087 19.5939 37.0463 18.4116L35.1481 16.7381Z" fill="#1F0256"/>
<path d="M38.7266 3.42773H41.4929V20.3398H38.7266V3.42773Z" fill="#1F0256"/>
<path d="M54.8179 15.2828C54.8635 14.9145 54.8889 14.5439 54.894 14.1728C54.894 10.6659 52.5979 8.12611 49.0472 8.12611C48.2641 8.11071 47.4861 8.25581 46.7612 8.55246C46.0363 8.84911 45.3797 9.29104 44.832 9.85102C43.7944 10.94 43.1719 12.4822 43.1719 14.3213C43.1719 18.07 45.8144 20.5374 49.3176 20.5374C51.6688 20.5374 53.3614 19.5855 54.3762 18.2947L52.5637 16.6897L52.4742 16.6136C52.1146 17.0634 51.6561 17.4243 51.1344 17.6683C50.6127 17.9123 50.0419 18.0328 49.4661 18.0205C47.6879 18.0205 46.4046 16.9829 46.0391 15.2828H54.8179ZM46.0848 13.0628C46.2083 12.5269 46.4613 12.0295 46.8216 11.614C47.1214 11.2874 47.4883 11.0293 47.897 10.8574C48.3058 10.6856 48.7468 10.604 49.19 10.6183C50.7702 10.6183 51.7602 11.6064 52.101 13.0628H46.0848Z" fill="#1F0256"/>
<path d="M63.445 8.08984V11.1741C63.1251 11.1494 62.8034 11.1246 62.6073 11.1246C60.513 11.1246 59.325 12.6287 59.325 14.603V20.3394H56.5625V8.2612H59.325V10.0908H59.3498C60.2884 8.80761 61.6344 8.09366 63.1004 8.09366L63.445 8.08984Z" fill="#1F0256"/>
<path d="M69.8866 15.2812L67.8894 17.5031V20.3398H65.125V3.42773H67.8894V13.8019L72.8224 8.29975H76.1046L71.7638 13.1603L76.1808 20.3398H73.0718L69.938 15.2812H69.8866Z" fill="#1F0256"/>
<path d="M19.116 3.1608L16.2354 6.04135C16.1449 6.13177 16.0266 6.18918 15.8996 6.20437C15.7725 6.21956 15.6441 6.19165 15.5348 6.12513C14.4017 5.44155 13.0949 5.10063 11.7722 5.14354C10.4495 5.18645 9.16759 5.61134 8.08114 6.36692C7.41295 6.83202 6.83276 7.41221 6.36765 8.0804C5.61297 9.16751 5.18848 10.4495 5.14524 11.7722C5.10201 13.0949 5.44187 14.4019 6.12395 15.536C6.19 15.6451 6.21764 15.7731 6.20246 15.8998C6.18728 16.0264 6.13015 16.1443 6.04018 16.2347L3.15962 19.1152C3.10162 19.1736 3.03168 19.2188 2.95459 19.2476C2.87751 19.2765 2.79511 19.2883 2.71302 19.2824C2.63093 19.2764 2.5511 19.2528 2.479 19.2131C2.40689 19.1734 2.34422 19.1186 2.29527 19.0524C0.736704 16.9101 -0.0687588 14.3121 0.0046021 11.6639C0.077963 9.01568 1.02602 6.46625 2.70079 4.41354C3.21208 3.78549 3.78622 3.21134 4.41428 2.70006C6.46683 1.02574 9.01589 0.0779624 11.6637 0.00460332C14.3115 -0.0687557 16.9091 0.736432 19.0512 2.29453C19.1179 2.34332 19.1731 2.40598 19.2131 2.47818C19.2532 2.55038 19.2771 2.6304 19.2833 2.71274C19.2895 2.79508 19.2777 2.87778 19.2488 2.95513C19.2199 3.03248 19.1746 3.10265 19.116 3.1608Z" fill="url(#paint0_linear_26568_214324)"/>
<path d="M19.1135 20.8289L16.2329 17.9483C16.1424 17.8579 16.0241 17.8005 15.8971 17.7853C15.7701 17.7701 15.6416 17.798 15.5323 17.8645C14.4639 18.509 13.2398 18.8497 11.9921 18.8497C10.7443 18.8497 9.52022 18.509 8.45181 17.8645C8.34252 17.798 8.21406 17.7701 8.08701 17.7853C7.95997 17.8005 7.84171 17.8579 7.75119 17.9483L4.87063 20.8289C4.81022 20.8869 4.76333 20.9576 4.73329 21.0358C4.70324 21.114 4.69078 21.1979 4.69678 21.2815C4.70277 21.3651 4.72708 21.4463 4.76799 21.5194C4.80889 21.5926 4.86538 21.6558 4.93346 21.7046C6.98391 23.1965 9.45442 24.0001 11.9902 24.0001C14.5259 24.0001 16.9964 23.1965 19.0469 21.7046C19.1152 21.6561 19.172 21.5931 19.2133 21.5201C19.2545 21.4471 19.2792 21.366 19.2856 21.2824C19.2919 21.1988 19.2798 21.1148 19.2501 21.0365C19.2203 20.9581 19.1737 20.8872 19.1135 20.8289V20.8289Z" fill="#1F0256"/>
<path d="M11.9973 15.4223C13.8899 15.4223 15.4243 13.888 15.4243 11.9953C15.4243 10.1027 13.8899 8.56836 11.9973 8.56836C10.1046 8.56836 8.57031 10.1027 8.57031 11.9953C8.57031 13.888 10.1046 15.4223 11.9973 15.4223Z" fill="#1F0256"/>
<defs>
<linearGradient id="paint0_linear_26568_214324" x1="16.4087" y1="-1.75881" x2="-7.88473" y2="22.5365" gradientUnits="userSpaceOnUse">
<stop stop-color="#17CCFC"/>
<stop offset="0.5" stop-color="#5D31FF"/>
<stop offset="1" stop-color="#F35AFF"/>
</linearGradient>
</defs>
</svg>
</file>

<file path="apps/astro/public/logos/cloudflare.svg">
<svg xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg" role="img" viewBox="0 0 460 271.2" width="3000" height="1768.695652173913" aria-hidden="true"><path fill="#FBAD41" d="M328.6,125.6c-0.8,0-1.5,0.6-1.8,1.4l-4.8,16.7c-2.1,7.2-1.3,13.8,2.2,18.7    c3.2,4.5,8.6,7.1,15.1,7.4l26.2,1.6c0.8,0,1.5,0.4,1.9,1c0.4,0.6,0.5,1.5,0.3,2.2c-0.4,1.2-1.6,2.1-2.9,2.2l-27.3,1.6    c-14.8,0.7-30.7,12.6-36.3,27.2l-2,5.1c-0.4,1,0.3,2,1.4,2h93.8c1.1,0,2.1-0.7,2.4-1.8c1.6-5.8,2.5-11.9,2.5-18.2    c0-37-30.2-67.2-67.3-67.2C330.9,125.5,329.7,125.5,328.6,125.6z"></path><path fill="#F6821F" d="M292.8,204.4c2.1-7.2,1.3-13.8-2.2-18.7c-3.2-4.5-8.6-7.1-15.1-7.4l-123.1-1.6    c-0.8,0-1.5-0.4-1.9-1s-0.5-1.4-0.3-2.2c0.4-1.2,1.6-2.1,2.9-2.2l124.2-1.6c14.7-0.7,30.7-12.6,36.3-27.2l7.1-18.5    c0.3-0.8,0.4-1.6,0.2-2.4c-8-36.2-40.3-63.2-78.9-63.2c-35.6,0-65.8,23-76.6,54.9c-7-5.2-15.9-8-25.5-7.1    c-17.1,1.7-30.8,15.4-32.5,32.5c-0.4,4.4-0.1,8.7,0.9,12.7c-27.9,0.8-50.2,23.6-50.2,51.7c0,2.5,0.2,5,0.5,7.5    c0.2,1.2,1.2,2.1,2.4,2.1h227.2c1.3,0,2.5-0.9,2.9-2.2L292.8,204.4z"></path></svg>
</file>

<file path="apps/astro/public/logos/d1.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="256px" height="256px" viewBox="0 0 65 64" version="1.1" xmlns="http://www.w3.org/2000/svg">
    <g fill="#F6821F">
        <path d="m23.6 22.2 3.03 1.75v3.5L23.6 29.2l-3.03-1.75v-3.5zM20.06 49l3.54-3.54L27.14 49l-3.54 3.54zm3.54-14.7c.593 0 1.17.176 1.67.506.493.33.878.798 1.1 1.35a3 3 0 0 1-.65 3.27c-.42.42-.954.705-1.54.821a3 3 0 0 1-1.73-.171 3.04 3.04 0 0 1-1.35-1.1 3 3 0 0 1-.506-1.67c0-.796.316-1.56.879-2.12a3 3 0 0 1 2.12-.879zM10.3 11.2l6.42-4.89 1.21-.37h29l1.19.39 6.61 4.89.82 1.61v38L55 52.21l-4.83 5.11-1.46.63h-31.7l-1.37-.54-5.48-5.11-.64-1.47v-38zm3.21 25.4 4.47 4.94h.056v4h-1.83l-2.7-3v7.39l4.26 4h30l3.7-3.91V42.3l-3.67 3.24h-18.6v-4h17.2l5.19-4.61v-7.44l-3.67 3.25h-18.7v-4h17.2l5.19-4.6v-6.92l-3.67 3.26h-31.6l-2.74-2.8v6.12l4.47 4.94h.056v4h-1.83l-2.7-3zm32.7-26.7h-27.6l-4.07 3.11 3.4 3.48h28.4l4-3.56z"/>
    </g>
</svg>
</file>

<file path="apps/astro/public/logos/expo.svg">
<svg width="24" height="22" viewBox="0 0 24 22" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M11.39 8.269c.19-.277.397-.312.565-.312.168 0 .447.035.637.312 1.49 2.03 3.95 6.075 5.765 9.06 1.184 1.945 2.093 3.44 2.28 3.63.7.714 1.66.269 2.218-.541.549-.797.701-1.357.701-1.954 0-.407-7.958-15.087-8.759-16.309C14.027.98 13.775.683 12.457.683h-.988c-1.315 0-1.505.297-2.276 1.472C8.392 3.377.433 18.057.433 18.463c0 .598.153 1.158.703 1.955.558.81 1.518 1.255 2.218.54.186-.19 1.095-1.684 2.279-3.63 1.815-2.984 4.267-7.029 5.758-9.06z" fill="#000"/></svg>
</file>

<file path="apps/astro/public/logos/r2.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="256px" height="256px" viewBox="0 0 40 40" version="1.1" xmlns="http://www.w3.org/2000/svg">
    <g fill="#F6821F">
        <path fill-rule="evenodd" d="M30.289 6.423c-2.43-.813-5.958-1.362-9.977-1.362-4.018 0-7.545.549-9.976 1.362-1.228.41-2.033.842-2.48 1.195q-.14.111-.204.18c.052.171.196.395.562.67.524.394 1.372.783 2.563 1.119 2.368.666 5.731 1.023 9.536 1.023s7.167-.357 9.535-1.023c1.191-.336 2.04-.725 2.563-1.119.366-.275.51-.499.562-.67a2 2 0 0 0-.204-.18c-.447-.353-1.252-.784-2.48-1.195m-20.24 5.624c-.885-.25-1.71-.552-2.424-.922v4.393c0 .196.097.514.625.941.535.433 1.391.869 2.576 1.252 2.36.764 5.71 1.222 9.486 1.222 3.778 0 7.128-.458 9.487-1.222 1.185-.383 2.041-.82 2.576-1.252.528-.427.625-.745.625-.94v-4.394c-.715.37-1.539.673-2.424.922-2.7.76-6.336 1.124-10.264 1.124s-7.564-.364-10.263-1.124m25.576 3.471V7.622c0-2.829-6.856-5.122-15.313-5.122C11.857 2.5 5 4.793 5 7.622v24.756c0 2.829 6.856 5.122 15.313 5.122 8.456 0 15.312-2.293 15.312-5.122zM33 19.134c-.7.393-1.505.726-2.375 1.008-2.708.877-6.358 1.352-10.313 1.352-3.954 0-7.604-.475-10.312-1.352-.87-.282-1.676-.615-2.375-1.008v4.28c0 .196.097.514.625.942.535.432 1.391.868 2.576 1.252 2.36.763 5.71 1.221 9.486 1.221 3.778 0 7.128-.458 9.487-1.221 1.185-.384 2.041-.82 2.576-1.252.528-.428.625-.746.625-.941v-4.28Zm-23 8.904c-.87-.281-1.676-.615-2.375-1.007v5.143c.044.048.116.117.231.208.447.353 1.252.785 2.48 1.195 2.43.813 5.958 1.362 9.976 1.362s7.546-.549 9.977-1.362c1.228-.41 2.033-.842 2.48-1.195a2 2 0 0 0 .231-.208v-5.143c-.7.392-1.505.726-2.375 1.007-2.708.877-6.358 1.352-10.313 1.352-3.954 0-7.604-.475-10.312-1.352m23.06 4.06-.01.016zm-25.495 0 .01.016zm3.997-15.726c.725 0 1.313-.573 1.313-1.28s-.588-1.281-1.313-1.281c-.724 0-1.312.573-1.312 1.28s.588 1.281 1.313 1.281Zm1.313 6.83c0 .706-.588 1.28-1.313 1.28-.724 0-1.312-.574-1.312-1.28 0-.708.588-1.281 1.313-1.281.724 0 1.312.573 1.312 1.28Zm-1.313 9.176c.725 0 1.313-.573 1.313-1.28s-.588-1.28-1.313-1.28c-.724 0-1.312.572-1.312 1.28 0 .707.588 1.28 1.313 1.28Z" clip-rule="evenodd"/>
    </g>
</svg>
</file>

<file path="apps/astro/public/logos/trpc.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="256px" height="305px" viewBox="0 0 256 305" version="1.1" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid">
    <title>tRPC</title>
    <g>
        <path d="M28.5708704,244.484126 L50.5523102,244.484126 L50.5523102,255.637394 L28.5708704,255.637394 L28.5708704,280.944808 C28.5265342,282.76088 28.7756436,284.572201 29.3085865,286.30888 C29.7121055,287.598035 30.4296418,288.766716 31.3966983,289.709876 C32.3287945,290.587845 33.462351,291.223324 34.6976653,291.560418 C35.9319973,291.889839 37.2008066,292.069526 38.4767452,292.09608 L39.0239328,292.098076 C40.1742698,292.098076 41.3621178,292.098076 42.5874768,291.935528 L43.3140897,291.845602 L43.3140897,291.845602 L44.7229024,291.686155 C45.1842376,291.631939 45.6383706,291.572922 46.0885025,291.4979 L46.7480957,291.393169 L46.7480957,291.393169 L47.9898595,291.208915 C48.3901768,291.148297 48.7792908,291.085279 49.1644036,291.010257 L50.0822651,290.826407 C50.2279097,290.796305 50.3699652,290.766435 50.5085474,290.736739 L51.2992883,290.560183 C51.4244408,290.53095 51.5463515,290.501775 51.6651363,290.472599 L53.1405685,300.863143 C51.9529863,301.533204 50.6949825,302.069952 49.3894696,302.463612 C47.9103362,302.931157 46.4026028,303.30287 44.8756472,303.576438 C43.2751783,303.876526 41.6121911,304.101592 39.8741819,304.26414 C38.1361727,304.426688 36.4606818,304.501709 34.785191,304.501709 C31.8202805,304.544468 28.8669683,304.122566 26.0326267,303.251343 C23.5070202,302.464809 21.2023779,301.094018 19.305656,299.250171 C17.3517683,297.337201 15.8779159,294.98932 15.0043958,292.398164 C13.9175935,289.178052 13.40136,285.792914 13.4789489,282.395233 L13.4789489,255.637394 L0,255.637394 L0,244.484126 L13.4414379,244.484126 L13.4414379,230.067403 L28.5708704,230.067403 L28.5708704,244.484126 Z M82.449155,273.755202 L82.449155,303.363876 L67.157175,303.363876 L67.157175,224.128163 L93.7774739,224.128163 C97.8028459,224.078186 101.814912,224.600218 105.693465,225.678617 C109.004878,226.592911 112.108472,228.138339 114.833643,230.22995 C117.339864,232.227503 119.326013,234.801346 120.622839,237.732148 C122.046484,240.990027 122.746119,244.518067 122.673439,248.072678 C122.706781,250.654818 122.365635,253.228156 121.660643,255.712416 C120.452308,260.03132 117.849851,263.829501 114.258474,266.515581 C112.430527,267.899417 110.450441,269.069849 108.356745,270.004103 L125.386734,302.701182 L125.386734,303.413891 L108.944417,303.413891 L94.0400508,273.755202 L82.449155,273.755202 Z M82.4616587,261.326561 L93.7774739,261.326561 C95.904348,261.36795 98.0215231,261.029202 100.029305,260.326267 C101.709053,259.729836 103.216273,258.729317 104.418091,257.412914 C105.354379,256.369363 106.072805,255.149315 106.53121,253.824363 C106.979269,252.465968 107.222724,251.0495 107.25446,249.621447 L107.256423,249.085474 C107.293697,247.183338 106.971284,245.291283 106.306144,243.50884 C105.708477,241.956053 104.72779,240.579651 103.455309,239.507668 C102.230793,238.519537 100.824829,237.78045 99.3165967,237.332031 C97.699552,236.860856 96.0282897,236.605407 94.3461733,236.571589 L82.4616587,236.569307 L82.4616587,261.326561 Z M150.306535,303.363876 L135.039562,303.363876 L135.039562,224.128163 L162.135,224.128163 C166.115261,224.071696 170.075137,224.706291 173.838429,226.003712 C177.125321,227.138139 180.158259,228.905229 182.766045,231.205236 C185.192373,233.459129 187.110522,236.204213 188.392693,239.257595 C189.665904,242.345312 190.339896,245.644964 190.381003,248.980587 L190.380776,249.648139 C190.415874,253.035465 189.738535,256.392341 188.392693,259.501026 C187.098244,262.46791 185.179049,265.120664 182.766045,267.278304 C180.149044,269.579203 177.101963,271.338606 173.800918,272.454821 C170.034613,273.737645 166.075844,274.363604 162.097489,274.305363 L150.294031,274.305363 L150.306535,303.363876 Z M150.306535,261.901729 L162.109993,261.901729 C164.044069,261.940675 165.967429,261.605255 167.774153,260.91394 C169.288775,260.319587 170.660779,259.412019 171.800332,258.250659 C172.84635,257.130186 173.650745,255.806552 174.163524,254.36202 C174.693771,252.885901 174.964512,251.329139 174.963759,249.760672 C174.975298,248.007586 174.70511,246.264031 174.163524,244.596659 C173.668933,243.050444 172.864892,241.621036 171.800332,240.395428 C170.675898,239.176286 169.302927,238.212647 167.774153,237.5696 C165.976266,236.842264 164.04896,236.489137 162.109993,236.531796 L150.306535,236.531796 L150.306535,261.901729 Z M253.349223,289.322262 C251.949056,292.411912 249.942052,295.18855 247.447494,297.487154 C244.882095,299.786976 241.885889,301.55495 238.632412,302.688678 C235.230903,303.853842 231.666218,304.465733 228.074184,304.502615 L227.304093,304.501709 C224.241116,304.538008 221.189898,304.116569 218.251441,303.251343 C215.564578,302.449416 213.029411,301.207184 210.749243,299.575266 C208.686234,298.058561 206.861397,296.242152 205.335157,294.186187 C203.728336,292.032629 202.385058,289.694486 201.333985,287.221647 C200.238208,284.521453 199.429359,281.713534 198.920778,278.844193 C198.342805,275.646719 198.058206,272.403121 198.069784,269.153854 L198.069784,258.488229 C198.063365,255.433607 198.318544,252.384012 198.833252,249.373059 C199.256734,246.929292 199.909832,244.531641 200.783483,242.211897 L201.121422,241.345707 C202.226759,238.44366 203.770103,235.728049 205.697763,233.293348 C207.523712,230.990372 209.686088,228.975526 212.112142,227.316597 C214.291728,225.909988 216.668425,224.835417 219.164208,224.128163 C221.599876,223.434222 224.11464,223.061414 226.644707,223.018354 L227.404122,223.015337 C231.354546,222.947713 235.286175,223.574065 239.020025,224.865879 C245.559969,227.112989 250.796219,232.098155 253.361727,238.519879 C254.800218,242.081434 255.681638,245.84328 255.974993,249.673146 L240.745531,249.673146 C240.655728,247.553743 240.302923,245.453711 239.695223,243.421315 C239.20464,241.781394 238.378605,240.26132 237.269513,238.957507 C236.144731,237.772515 234.756954,236.868746 233.218326,236.319234 C231.352613,235.679501 229.388474,235.374721 227.416626,235.41897 C226.288221,235.414964 225.163338,235.545081 224.065644,235.806584 C223.06672,236.050327 222.107041,236.433357 221.214809,236.944417 C219.685177,237.880271 218.399564,239.165885 217.46371,240.695516 C216.36906,242.448264 215.527185,244.346692 214.962977,246.334668 C214.469302,248.145428 214.126364,249.993946 213.937677,251.861287 C213.70926,254.020918 213.600728,256.191549 213.612582,258.363192 L213.612582,269.128846 C213.587744,271.95896 213.759037,274.787394 214.125232,277.593826 C214.405181,279.815785 214.94227,281.997707 215.725701,284.095731 C216.196483,285.290263 216.809407,286.423754 217.551236,287.47172 C218.218497,288.431612 219.037818,289.276273 219.976946,289.972453 C220.965431,290.703499 222.080214,291.246055 223.26541,291.572922 C224.5845,291.937069 225.948257,292.113852 227.316597,292.098076 C229.141315,292.119745 230.958637,291.862537 232.705675,291.335352 C234.236677,290.863864 235.636643,290.041865 236.794373,288.934649 C237.98284,287.754042 238.892732,286.322991 239.457654,284.745922 C240.180774,282.769681 240.602286,280.695845 240.70802,278.594119 L256,278.594119 C255.779336,282.302094 254.880899,285.938221 253.349223,289.322262 Z" fill="#398CCB"></path>
        <path d="M186.379603,92.4020709 L224.865879,114.62108 L224.865879,159.084107 L186.379603,181.303116 L169.294598,171.422722 L127.749927,195.407248 L86.4540783,171.560262 L69.6078929,181.303116 L31.1216177,159.046596 L31.1216177,114.62108 L69.6078929,92.4020709 L108.094168,114.62108 L108.094168,159.046596 L96.4507571,165.779818 L127.749927,183.853863 L159.297919,165.642278 L147.893328,159.046596 L147.893328,114.62108 L186.379603,92.4020709 Z M157.896259,126.199473 L157.896259,153.319918 L181.378138,166.873889 L181.378138,139.753443 L157.896259,126.199473 Z M214.862948,126.161962 L191.381069,139.715932 L191.381069,166.873889 L214.862948,153.282407 L214.862948,126.161962 Z M41.1245482,126.161962 L41.1245482,153.282407 L64.6064277,166.836378 L64.6064277,139.715932 L41.1245482,126.161962 Z M98.0912377,126.161962 L74.6093582,139.715932 L74.6093582,166.836378 L98.0912377,153.282407 L98.0912377,126.161962 Z M186.379603,103.980463 L162.897724,117.534434 L186.379603,131.100908 L209.861483,117.534434 L186.379603,103.980463 Z M69.6078929,103.942952 L46.1260135,117.534434 L69.6078929,131.063397 L93.0897724,117.534434 L69.6078929,103.942952 Z M88.7510013,35.0227606 L88.7510013,46.5636417 L53.1405685,67.1321676 L53.1405685,101.904855 L43.137638,107.681547 L43.137638,61.3554752 L88.7510013,35.0227606 Z M127.237277,0 L165.748559,22.2190095 L165.748559,34.4375891 L212.362215,61.3554752 L212.362215,107.393963 L202.359285,101.617271 L202.359285,67.1321676 L165.748559,45.9909739 L165.748559,66.6570284 L127.262284,88.8760379 L88.7760086,66.6570284 L88.7760086,22.2190095 L127.237277,0 Z M98.7789391,33.7598906 L98.7789391,60.880336 L122.235811,74.4343069 L122.235811,47.3263651 L98.7789391,33.7598906 Z M155.720621,33.7598906 L132.263749,47.3263651 L132.263749,74.4218033 L155.720621,60.880336 L155.720621,33.7598906 Z M127.237277,11.5533848 L103.780404,25.1073557 L127.237277,38.6613266 L150.719156,25.1073557 L127.237277,11.5533848 Z" fill="#398CCB"></path>
    </g>
</svg>
</file>

<file path="apps/astro/public/logos/turborepo.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="512px" height="115px" viewBox="0 0 512 115" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid">
    <title>turborepo</title>
    <defs>
        <linearGradient x1="123.779228%" y1="-3.85716965e-07%" x2="123.779228%" y2="698.962346%" id="turborepo-linearGradient-1">
            <stop stop-color="#1E90FF" offset="0%"></stop>
            <stop stop-color="#FF1E56" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="11.4859916%" y1="-2.19377472%" x2="11.4859916%" y2="512.39779%" id="turborepo-linearGradient-2">
            <stop stop-color="#1E90FF" offset="0%"></stop>
            <stop stop-color="#FF1E56" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-153.743225%" y1="-62.2632095%" x2="-153.743225%" y2="278.479413%" id="turborepo-linearGradient-3">
            <stop stop-color="#1E90FF" offset="0%"></stop>
            <stop stop-color="#FF1E56" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-153.743225%" y1="-178.48023%" x2="-153.743225%" y2="162.263952%" id="turborepo-linearGradient-4">
            <stop stop-color="#1E90FF" offset="0%"></stop>
            <stop stop-color="#FF1E56" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="11.4859916%" y1="-412.397334%" x2="11.4859916%" y2="102.193662%" id="turborepo-linearGradient-5">
            <stop stop-color="#1E90FF" offset="0%"></stop>
            <stop stop-color="#FF1E56" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="123.779228%" y1="-598.960854%" x2="123.779228%" y2="99.9997513%" id="turborepo-linearGradient-6">
            <stop stop-color="#1E90FF" offset="0%"></stop>
            <stop stop-color="#FF1E56" offset="100%"></stop>
        </linearGradient>
    </defs>
    <g>
        <g transform="translate(419.719229, 0.000000)">
            <path d="M37.2763559,0.0340938041 C24.0927286,-0.42049017 10.9106412,3.67076467 0,12.3078654 L7.27324749,16.399071 C15.9109026,10.0349409 26.8200039,7.30743462 37.2763559,7.76201644 L37.2763559,0.0340938041 Z" fill="url(#turborepo-linearGradient-1)"></path>
            <path d="M75.9155794,17.3082654 C66.8236351,7.76200104 55.0044154,1.8524066 42.2766173,0.488654987 L42.2766173,8.21658285 C53.1872585,10.0349255 62.7334921,15.0353409 70.4610288,22.763278 L75.9155794,17.3082654 Z" fill="url(#turborepo-linearGradient-2)"></path>
            <path d="M92.2807713,54.5841593 C91.826482,42.7649396 87.2805099,30.94572 79.5529731,20.9448892 L74.0968826,26.3999018 C80.4615516,35.0370949 84.0989453,44.5833285 84.5532345,54.5841593 L92.2807713,54.5841593 Z" fill="url(#turborepo-linearGradient-3)"></path>
            <path d="M79.5529731,93.6782881 C87.2805099,83.6774573 91.826482,71.8583916 92.2807713,60.0391719 L84.5532345,60.0391719 C84.0989453,70.0400027 80.4615516,79.5862363 74.0968826,88.2232754 L79.5529731,93.6782881 Z" fill="url(#turborepo-linearGradient-4)"></path>
            <path d="M42.2766173,114.134701 C54.5501262,112.770909 66.8236351,106.861299 75.9155794,97.3150658 L70.4610288,91.8600532 C62.7334921,100.042495 52.7314293,105.042911 42.2766173,106.406702 L42.2766173,114.134701 Z" fill="url(#turborepo-linearGradient-5)"></path>
            <path d="M0,102.315481 C10.9106412,110.95252 24.0927286,115.043741 37.2763559,114.589298 L37.2763559,106.861299 C26.8200039,107.315897 16.3651918,104.588313 7.27324749,98.2242602 L0,102.315481 Z" fill="url(#turborepo-linearGradient-6)"></path>
        </g>
        <path d="M28.5879097,40.6919948 L28.5879097,87.777918 L12.8925711,87.777918 L12.8925711,40.6919948 L0,40.6919948 L0,27.3990301 L41.4804839,27.3990301 L41.4804839,40.6919948 L28.5879097,40.6919948 Z M60.153003,27.3990301 L60.153003,60.2310514 C60.153003,61.9927696 60.2064397,63.8079245 60.3131592,65.6763622 C60.4733154,67.4915172 60.8737059,69.1463619 61.5143307,70.6412045 C62.2083922,72.136047 63.2760489,73.3638599 64.7174547,74.3247971 C66.1588606,75.2322976 68.1876084,75.6861248 70.8033904,75.6861248 C73.4193263,75.6861248 75.4212789,75.2322976 76.8092479,74.3247971 C78.2506538,73.3638599 79.3184644,72.136047 80.012372,70.6412045 C80.7064335,69.1463619 81.106824,67.4915172 81.2135435,65.6763622 C81.3736997,63.8079245 81.4537778,61.9927696 81.4537778,60.2310514 L81.4537778,27.3990301 L97.0690074,27.3990301 L97.0690074,62.3931601 C97.0690074,71.7889392 94.9068987,78.6490145 90.5826813,82.973232 C86.3119006,87.2974494 79.7188549,89.4595581 70.8033904,89.4595581 C61.8880798,89.4595581 55.2682389,87.2974494 50.9440214,82.973232 C46.619804,78.6490145 44.4576953,71.7889392 44.4576953,62.3931601 L44.4576953,27.3990301 L60.153003,27.3990301 Z M121.447245,54.38535 L124.410135,54.38535 C127.506385,54.38535 129.882087,53.7447252 131.537086,52.4634756 C133.191931,51.182226 134.019507,49.3404297 134.019507,46.9380866 C134.019507,44.5357436 133.191931,42.6939473 131.537086,41.4126977 C129.882087,40.1314481 127.506385,39.4908233 124.410135,39.4908233 L121.447245,39.4908233 L121.447245,54.38535 Z M155.960445,87.777918 L136.42185,87.777918 L121.447245,64.5552688 L121.447245,87.777918 L105.751937,87.777918 L105.751937,27.3990301 L130.175758,27.3990301 C133.539038,27.3990301 136.475133,27.9061401 138.984349,28.920514 C141.493412,29.8814512 143.548801,31.2161375 145.150363,32.924419 C146.805208,34.6327005 148.033175,36.6080117 148.833956,38.8501985 C149.688019,41.0923853 150.115205,43.4947283 150.115205,46.0572275 C150.115205,50.6483206 148.994112,54.38535 146.751925,57.2681616 C144.563021,60.0975365 141.306614,62.0194109 136.982397,63.0337849 L155.960445,87.777918 Z M174.216712,75.6060467 L177.66007,75.6060467 C181.611616,75.6060467 184.440529,75.0989367 186.148349,74.0845628 C187.857708,73.0701888 188.710848,71.4419855 188.710848,69.1997986 C188.710848,66.9576118 187.857708,65.3294084 186.148349,64.3150345 C184.440529,63.3006606 181.611616,62.7935506 177.66007,62.7935506 L174.216712,62.7935506 L174.216712,75.6060467 Z M174.216712,51.1021479 L177.099523,51.1021479 C182.012007,51.1021479 184.466709,49.1536321 184.466709,45.2564465 C184.466709,41.359261 182.012007,39.4107452 177.099523,39.4107452 L174.216712,39.4107452 L174.216712,51.1021479 Z M158.521404,27.3990301 L181.904209,27.3990301 C187.457318,27.3990301 191.673738,28.7337164 194.556549,31.4029351 C197.439361,34.0721538 198.880767,37.9159026 198.880767,42.9341816 C198.880767,45.9771494 198.32022,48.5130073 197.199127,50.5416012 C196.131932,52.5169123 194.476471,54.1985524 192.234284,55.5865215 C194.476471,56.0135534 196.372166,56.6809736 197.919829,57.588474 C199.521391,58.4426918 200.802641,59.5103485 201.763578,60.7915981 C202.778414,62.0728477 203.499117,63.5142535 203.925687,65.1158155 C204.353797,66.7173775 204.566312,68.425659 204.566312,70.240814 C204.566312,73.0701888 204.059664,75.5794053 203.044828,77.7681554 C202.083891,79.9569055 200.696384,81.7987018 198.880767,83.2935444 C197.119048,84.7883869 194.95694,85.9094803 192.39444,86.6568246 C189.831941,87.4041689 186.94913,87.777918 183.746006,87.777918 L158.521404,87.777918 L158.521404,27.3990301 Z M223.18755,57.588474 C223.18755,59.9908171 223.640299,62.2063625 224.548878,64.2349564 C225.455916,66.2635503 226.683267,68.0252685 228.23247,69.520111 C229.780134,71.0149536 231.568031,72.1893297 233.597703,73.0435475 C235.679734,73.8443285 237.868022,74.244719 240.164107,74.244719 C242.458653,74.244719 244.620762,73.8443285 246.650434,73.0435475 C248.732464,72.1893297 250.546541,71.0149536 252.095744,69.520111 C253.697306,68.0252685 254.950837,66.2635503 255.859415,64.2349564 C256.766454,62.2063625 257.220743,59.9908171 257.220743,57.588474 C257.220743,55.186131 256.766454,52.9705856 255.859415,50.9419917 C254.950837,48.9133978 253.697306,47.1516796 252.095744,45.656837 C250.546541,44.1619945 248.732464,43.0142597 246.650434,42.2134787 C244.620762,41.359261 242.458653,40.9322291 240.164107,40.9322291 C237.868022,40.9322291 235.679734,41.359261 233.597703,42.2134787 C231.568031,43.0142597 229.780134,44.1619945 228.23247,45.656837 C226.683267,47.1516796 225.455916,48.9133978 224.548878,50.9419917 C223.640299,52.9705856 223.18755,55.186131 223.18755,57.588474 Z M206.771539,57.588474 C206.771539,53.1041004 207.5985,48.9400392 209.253961,45.0962903 C210.907881,41.1991048 213.203967,37.8091832 216.140677,34.9263715 C219.075848,32.0435599 222.573105,29.8013731 226.630908,28.1998111 C230.741071,26.5448123 235.251624,25.71739 240.164107,25.71739 C245.021152,25.71739 249.505526,26.5448123 253.617228,28.1998111 C257.727391,29.8013731 261.250827,32.0435599 264.187538,34.9263715 C267.176607,37.8091832 269.498872,41.1991048 271.154332,45.0962903 C272.808253,48.9400392 273.636754,53.1041004 273.636754,57.588474 C273.636754,62.0728477 272.808253,66.2635503 271.154332,70.1607359 C269.498872,74.0044847 267.176607,77.3677649 264.187538,80.2505765 C261.250827,83.1333882 257.727391,85.4022163 253.617228,87.0572151 C249.505526,88.6587771 245.021152,89.4595581 240.164107,89.4595581 C235.251624,89.4595581 230.741071,88.6587771 226.630908,87.0572151 C222.573105,85.4022163 219.075848,83.1333882 216.140677,80.2505765 C213.203967,77.3677649 210.907881,74.0044847 209.253961,70.1607359 C207.5985,66.2635503 206.771539,62.0728477 206.771539,57.588474 Z M295.242441,54.38535 L298.205331,54.38535 C301.300657,54.38535 303.676821,53.7447252 305.332282,52.4634756 C306.986203,51.182226 307.814703,49.3404297 307.814703,46.9380866 C307.814703,44.5357436 306.986203,42.6939473 305.332282,41.4126977 C303.676821,40.1314481 301.300657,39.4908233 298.205331,39.4908233 L295.242441,39.4908233 L295.242441,54.38535 Z M329.756102,87.777918 L310.217046,87.777918 L295.242441,64.5552688 L295.242441,87.777918 L279.547133,87.777918 L279.547133,27.3990301 L303.970954,27.3990301 C307.334234,27.3990301 310.269405,27.9061401 312.779545,28.920514 C315.288146,29.8814512 317.343997,31.2161375 318.945559,32.924419 C320.59948,34.6327005 321.828371,36.6080117 322.629152,38.8501985 C323.482291,41.0923853 323.910401,43.4947283 323.910401,46.0572275 C323.910401,50.6483206 322.789308,54.38535 320.547121,57.2681616 C318.357293,60.0975365 315.10181,62.0194109 310.777593,63.0337849 L329.756102,87.777918 Z M366.670567,40.6919948 L348.012369,40.6919948 L348.012369,50.7818355 L365.629552,50.7818355 L365.629552,64.0748002 L348.012369,64.0748002 L348.012369,74.4849533 L366.670567,74.4849533 L366.670567,87.777918 L332.317062,87.777918 L332.317062,27.3990301 L366.670567,27.3990301 L366.670567,40.6919948 Z M389.677621,55.1060529 L394.882698,55.1060529 C400.648321,55.1060529 403.531133,52.5969904 403.531133,47.5787115 C403.531133,42.5604325 400.648321,40.05137 394.882698,40.05137 L389.677621,40.05137 L389.677621,55.1060529 Z M389.677621,87.777918 L373.982314,87.777918 L373.982314,27.3990301 L398.966681,27.3990301 C405.74714,27.3990301 410.924497,29.1607483 414.501832,32.6841847 C418.131526,36.2076212 419.947143,41.1724634 419.947143,47.5787115 C419.947143,53.9849595 418.131526,58.9498018 414.501832,62.4732382 C410.924497,65.9966746 405.74714,67.7583928 398.966681,67.7583928 L389.677621,67.7583928 L389.677621,87.777918 Z M437.943156,57.588474 C437.943156,59.9908171 438.397446,62.2063625 439.304484,64.2349564 C440.211523,66.2635503 441.440414,68.0252685 442.988077,69.520111 C444.53574,71.0149536 446.325178,72.1893297 448.35331,73.0435475 C450.43534,73.8443285 452.623628,74.244719 454.919714,74.244719 C457.215799,74.244719 459.377908,73.8443285 461.40604,73.0435475 C463.488071,72.1893297 465.303688,71.0149536 466.851351,69.520111 C468.452913,68.0252685 469.707983,66.2635503 470.615022,64.2349564 C471.52206,62.2063625 471.976349,59.9908171 471.976349,57.588474 C471.976349,55.186131 471.52206,52.9705856 470.615022,50.9419917 C469.707983,48.9133978 468.452913,47.1516796 466.851351,45.656837 C465.303688,44.1619945 463.488071,43.0142597 461.40604,42.2134787 C459.377908,41.359261 457.215799,40.9322291 454.919714,40.9322291 C452.623628,40.9322291 450.43534,41.359261 448.35331,42.2134787 C446.325178,43.0142597 444.53574,44.1619945 442.988077,45.656837 C441.440414,47.1516796 440.211523,48.9133978 439.304484,50.9419917 C438.397446,52.9705856 437.943156,55.186131 437.943156,57.588474 Z M421.527146,57.588474 C421.527146,53.1041004 422.354106,48.9400392 424.009567,45.0962903 C425.665028,41.1991048 427.959573,37.8091832 430.896284,34.9263715 C433.832994,32.0435599 437.328711,29.8013731 441.386515,28.1998111 C445.496677,26.5448123 450.00877,25.71739 454.919714,25.71739 C459.778299,25.71739 464.262672,26.5448123 468.372835,28.1998111 C472.482997,29.8013731 476.006434,32.0435599 478.943144,34.9263715 C481.932213,37.8091832 484.254478,41.1991048 485.909939,45.0962903 C487.5654,48.9400392 488.39236,53.1041004 488.39236,57.588474 C488.39236,62.0728477 487.5654,66.2635503 485.909939,70.1607359 C484.254478,74.0044847 481.932213,77.3677649 478.943144,80.2505765 C476.006434,83.1333882 472.482997,85.4022163 468.372835,87.0572151 C464.262672,88.6587771 459.778299,89.4595581 454.919714,89.4595581 C450.00877,89.4595581 445.496677,88.6587771 441.386515,87.0572151 C437.328711,85.4022163 433.832994,83.1333882 430.896284,80.2505765 C427.959573,77.3677649 425.665028,74.0044847 424.009567,70.1607359 C422.354106,66.2635503 421.527146,62.0728477 421.527146,57.588474 Z" fill="#000000"></path>
    </g>
</svg>
</file>

<file path="apps/astro/public/logos/workers.svg">
<?xml version="1.0" encoding="UTF-8"?>
<svg width="256px" height="231px" viewBox="0 0 256 231" version="1.1" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid">
    <title>CloudFrame Workers</title>
    <defs>
        <linearGradient x1="50%" y1="100%" x2="25.7%" y2="8.7%" id="cfWorkersLinearGradient-1">
            <stop stop-color="#EB6F07" offset="0%"></stop>
            <stop stop-color="#FAB743" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="81%" y1="83.7%" x2="40.5%" y2="29.5%" id="cfWorkersLinearGradient-2">
            <stop stop-color="#D96504" offset="0%"></stop>
            <stop stop-color="#D96504" stop-opacity="0" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="42%" y1="8.7%" x2="84%" y2="79.9%" id="cfWorkersLinearGradient-3">
            <stop stop-color="#EB6F07" offset="0%"></stop>
            <stop stop-color="#EB720A" stop-opacity="0" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="50%" y1="100%" x2="25.7%" y2="8.7%" id="cfWorkersLinearGradient-4">
            <stop stop-color="#EE6F05" offset="0%"></stop>
            <stop stop-color="#FAB743" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-33.2%" y1="100%" x2="91.7%" y2="0%" id="cfWorkersLinearGradient-5">
            <stop stop-color="#D96504" stop-opacity="0.8" offset="0%"></stop>
            <stop stop-color="#D96504" stop-opacity="0.2" offset="49.8%"></stop>
            <stop stop-color="#D96504" stop-opacity="0" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="50%" y1="100%" x2="25.7%" y2="8.7%" id="cfWorkersLinearGradient-6">
            <stop stop-color="#FFA95F" offset="0%"></stop>
            <stop stop-color="#FFEBC8" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="8.1%" y1="1.1%" x2="96.5%" y2="48.8%" id="cfWorkersLinearGradient-7">
            <stop stop-color="#FFFFFF" stop-opacity="0.5" offset="0%"></stop>
            <stop stop-color="#FFFFFF" stop-opacity="0.1" offset="100%"></stop>
        </linearGradient>
        <linearGradient x1="-13.7%" y1="104.2%" x2="100%" y2="46.2%" id="cfWorkersLinearGradient-8">
            <stop stop-color="#FFFFFF" stop-opacity="0.5" offset="0%"></stop>
            <stop stop-color="#FFFFFF" stop-opacity="0.1" offset="100%"></stop>
        </linearGradient>
    </defs>
    <g>
        <path d="M65.820799,3.32378893 L95.981106,57.7354448 L68.2828649,107.592279 C65.5870161,112.433115 65.5870161,118.324009 68.2828649,123.164845 L95.981106,173.144783 L65.820799,227.556439 C60.1456908,224.742882 55.433019,220.308687 52.2794367,214.815248 L4.26915217,131.412766 C-1.42305072,121.503054 -1.42305072,109.315622 4.26915217,99.4059097 L52.2794367,16.0034282 C55.4425502,10.5327862 60.1542813,6.1208924 65.820799,3.32378893 Z" fill="url(#cfWorkersLinearGradient-1)"></path>
        <path d="M68.2828649,107.65383 C65.609809,112.478677 65.609809,118.339998 68.2828649,123.164845 L95.981106,173.144783 L65.820799,227.556439 C60.1456908,224.742882 55.433019,220.308687 52.2794367,214.815248 L4.26915217,131.412766 C0.452950062,124.82674 21.8113715,116.948129 68.2828649,107.715382 L68.2828649,107.65383 Z" fill="url(#cfWorkersLinearGradient-2)" opacity="0.7"></path>
        <path d="M68.8983814,8.8018855 L95.981106,57.7354448 L91.4878358,65.5525039 L67.6057968,25.1130719 C60.7120124,13.8491205 50.1866807,19.696527 37.0146283,42.4706363 L38.984281,39.0852958 L52.2794367,16.0034282 C55.4097226,10.5506927 60.0766443,6.14066572 65.6976958,3.32378893 L68.8368297,8.8018855 L68.8983814,8.8018855 Z" fill="url(#cfWorkersLinearGradient-3)" opacity="0.5"></path>
        <path d="M203.696488,16.0034282 L251.706773,99.4059097 C257.431076,109.254173 257.431076,121.564503 251.706773,131.412766 L203.696488,214.815248 C197.982679,224.711861 187.425867,230.811352 175.998247,230.818676 L127.987962,230.818676 L187.69306,123.164845 C190.366116,118.339998 190.366116,112.478677 187.69306,107.65383 L127.987962,0 L175.998247,0 C187.425867,0.00732404312 197.982679,6.10681526 203.696488,16.0034282 L203.696488,16.0034282 Z" fill="url(#cfWorkersLinearGradient-4)"></path>
        <path d="M173.536181,230.449366 L126.141413,230.880227 L183.507548,122.672432 C186.111867,117.786429 186.111867,111.924318 183.507548,107.038314 L126.141413,0 L136.974503,0 L197.172013,106.545901 C200.074507,111.667339 200.051094,117.942106 197.110462,123.041742 C184.154772,145.558461 171.290373,168.127584 158.517579,190.748554 C146.822766,211.306804 151.870001,224.540408 173.536181,230.449366 L173.536181,230.449366 Z" fill="url(#cfWorkersLinearGradient-5)"></path>
        <path d="M79.9776778,230.818676 C75.0535461,230.818676 70.1294143,229.649195 65.820799,227.556439 L125.033483,120.764331 C126.880033,117.440542 126.880033,113.378134 125.033483,110.054345 L65.820799,3.32378893 C70.2222355,1.14434147 75.066203,0.00706214019 79.9776778,0 L127.987962,0 L187.69306,107.65383 C190.366116,112.478677 190.366116,118.339998 187.69306,123.164845 L127.987962,230.818676 L79.9776778,230.818676 Z" fill="url(#cfWorkersLinearGradient-6)"></path>
        <path d="M183.507548,110.054345 L122.448314,0 L127.987962,0 L187.69306,107.65383 C190.366116,112.478677 190.366116,118.339998 187.69306,123.164845 L127.987962,230.818676 L122.448314,230.818676 L183.507548,120.764331 C185.354097,117.440542 185.354097,113.378134 183.507548,110.054345 Z" fill="url(#cfWorkersLinearGradient-7)" opacity="0.6"></path>
        <path d="M125.033483,110.054345 L65.820799,3.32378893 C67.6673485,2.33896258 69.8832077,1.60034282 71.9759637,0.98482635 C85.0249129,24.4360038 104.290578,60.0128557 129.834512,107.65383 C132.507568,112.478677 132.507568,118.339998 129.834512,123.164845 L71.052689,229.587643 C68.959933,228.972126 67.8520034,228.541265 65.8823507,227.61799 L124.971932,120.825883 C126.818481,117.502094 126.818481,113.439685 124.971932,110.115896 L125.033483,110.054345 Z" fill="url(#cfWorkersLinearGradient-8)" opacity="0.6"></path>
    </g>
</svg>
</file>

<file path="apps/astro/README.md">
# Astro Starter Kit: Minimal

```sh
npm create astro@latest -- --template minimal
```

[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/withastro/astro/tree/latest/examples/minimal)
[![Open with CodeSandbox](https://assets.codesandbox.io/github/button-edit-lime.svg)](https://codesandbox.io/p/sandbox/github/withastro/astro/tree/latest/examples/minimal)
[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/withastro/astro?devcontainer_path=.devcontainer/minimal/devcontainer.json)

> 🧑‍🚀 **Seasoned astronaut?** Delete this file. Have fun!

## 🚀 Project Structure

Inside of your Astro project, you'll see the following folders and files:

```text
/
├── public/
├── src/
│   └── pages/
│       └── index.astro
└── package.json
```

Astro looks for `.astro` or `.md` files in the `src/pages/` directory. Each page is exposed as a route based on its file name.

There's nothing special about `src/components/`, but that's where we like to put any Astro/React/Vue/Svelte/Preact components.

Any static assets, like images, can be placed in the `public/` directory.

## 🧞 Commands

All commands are run from the root of the project, from a terminal:

| Command                   | Action                                           |
| :------------------------ | :----------------------------------------------- |
| `npm install`             | Installs dependencies                            |
| `npm run dev`             | Starts local dev server at `localhost:4321`      |
| `npm run build`           | Build your production site to `./dist/`          |
| `npm run preview`         | Preview your build locally, before deploying     |
| `npm run astro ...`       | Run CLI commands like `astro add`, `astro check` |
| `npm run astro -- --help` | Get help using the Astro CLI                     |

## 👀 Want to learn more?

Feel free to check [our documentation](https://docs.astro.build) or jump into our [Discord server](https://astro.build/chat).
</file>

<file path="apps/astro/src/components/react/footer.tsx">
import { Github } from 'lucide-react';

export function Footer() {
  return (
    <footer className="relative overflow-hidden bg-gradient-to-br from-slate-900 via-blue-950 to-slate-900">
      {/* Gradient overlay */}
      <div className="absolute inset-0 bg-gradient-to-b from-blue-500/5 via-cyan-500/5 to-orange-500/5" />
      
      {/* Grid pattern */}
      <div className="absolute inset-0 bg-[linear-gradient(to_right,#4f4f4f2e_1px,transparent_1px),linear-gradient(to_bottom,#4f4f4f2e_1px,transparent_1px)] bg-[size:14px_24px]" />

      <div className="relative mx-auto max-w-7xl px-4 py-12 sm:px-6 lg:px-8">
        <div className="flex flex-col items-center justify-between gap-6 sm:flex-row">
          <a href="/" className="text-xl font-bold text-white hover:text-orange-400 transition-colors">
            Cloudflare Native Kit
          </a>

          <nav className="text-sm" aria-label="quick links">
            <ul className="flex gap-x-8">
              <li><a href="#features" className="text-gray-300 hover:text-white transition-colors">Features</a></li>
              <li><a href="/docs" className="text-gray-300 hover:text-white transition-colors">Documentation</a></li>
            </ul>
          </nav>

          <div className="flex gap-x-6">
            <a 
              href="https://github.com/brenden-js/cloudflare-native-web-starter-kit" 
              aria-label="Cloudflare Native Kit on GitHub"
              className="text-gray-400 hover:text-white transition-colors"
            >
              <Github className="h-6 w-6" />
            </a>
          </div>
        </div>

        <div className="mt-12 border-t border-white/10 pt-8 md:flex md:items-center md:justify-between">
          <p className="text-xs text-gray-400">
            &copy; {new Date().getFullYear()} Cloudflare Native Kit. All rights reserved.
          </p>
          <div className="mt-4 flex space-x-6 md:mt-0">
            <a href="/privacy" className="text-xs text-gray-400 hover:text-white transition-colors">
              Privacy Policy
            </a>
          </div>
        </div>
      </div>
    </footer>
  );
}
</file>

<file path="apps/astro/src/components/react/header.tsx">
'use client'
import {Fragment, type ReactNode} from 'react'
import {Popover, Transition} from '@headlessui/react'
import clsx from 'clsx'
import {Github} from 'lucide-react'

function MobileNavLink({href, children}: { href: string, children: ReactNode }) {
  return (
    <Popover.Button as="a" href={href} className="block w-full p-2 text-gray-300 hover:text-white transition-colors">
      {children}
    </Popover.Button>
  )
}

function MobileNavIcon({open}: { open: boolean }) {
  return (
    <svg
      aria-hidden="true"
      className="h-3.5 w-3.5 overflow-visible stroke-gray-300"
      fill="none"
      strokeWidth={2}
      strokeLinecap="round"
    >
      <path
        d="M0 1H14M0 7H14M0 13H14"
        className={clsx(
          'origin-center transition',
          open && 'scale-90 opacity-0'
        )}
      />
      <path
        d="M2 2L12 12M12 2L2 12"
        className={clsx(
          'origin-center transition',
          !open && 'scale-90 opacity-0'
        )}
      />
    </svg>
  )
}

function MobileNavigation() {
  return (
    <Popover>
      <Popover.Button
        className="relative z-10 flex h-8 w-8 items-center justify-center [&:not(:focus-visible)]:focus:outline-none"
        aria-label="Toggle Navigation"
      >
        {({open}) => <MobileNavIcon open={open} />}
      </Popover.Button>
      <Transition.Root>
        <Transition.Child
          as={Fragment}
          enter="duration-150 ease-out"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="duration-150 ease-in"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <Popover.Overlay className="fixed inset-0 bg-slate-900/50 backdrop-blur-sm" />
        </Transition.Child>
        <Transition.Child
          as={Fragment}
          enter="duration-150 ease-out"
          enterFrom="opacity-0 scale-95"
          enterTo="opacity-100 scale-100"
          leave="duration-100 ease-in"
          leaveFrom="opacity-100 scale-100"
          leaveTo="opacity-0 scale-95"
        >
          <Popover.Panel
            as="div"
            className="absolute inset-x-0 top-full mt-4 flex origin-top flex-col rounded-2xl bg-slate-900/80 backdrop-blur-lg p-4 text-lg tracking-tight shadow-xl ring-1 ring-white/10"
          >
            <MobileNavLink href="#features">Features</MobileNavLink>
            <MobileNavLink href="/docs">Documentation</MobileNavLink>
            <hr className="m-2 border-white/10" />
            <MobileNavLink href="https://github.com/brenden-js/cloudflare-native-web-starter-kit">
              GitHub
            </MobileNavLink>
          </Popover.Panel>
        </Transition.Child>
      </Transition.Root>
    </Popover>
  )
}

export function Header() {
  return (
    <header className="fixed top-0 left-0 right-0 z-50 animate-fade-in">
      {/* Glassmorphism background */}
      <div className="absolute inset-0 bg-slate-900/50 backdrop-blur-lg border-b border-white/10" />

      <div className="relative mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
        <nav className="relative z-50 flex justify-between items-center">
          <div className="flex items-center md:gap-x-12">
            <a href="/" aria-label="Home" className="flex items-center gap-2">
              <span className="text-xl font-bold bg-gradient-to-r from-white to-gray-300 bg-clip-text text-transparent transition-transform hover:scale-105 duration-200">
                Cloudflare Native Kit
              </span>
            </a>
            <div className="hidden md:flex md:gap-x-8">
              <a href="#features" className="text-gray-300 hover:text-white transition-colors">Features</a>
            </div>
          </div>
          <div className="flex items-center gap-x-5 md:gap-x-8">
            <div className="hidden md:block">
              <a 
                href="https://github.com/brenden-js/cloudflare-native-web-starter-kit" 
                className="flex items-center gap-2 text-gray-300 hover:text-white transition-colors"
              >
                <Github className="h-5 w-5" />
                <span>GitHub</span>
              </a>
            </div>
            <div className="-mr-1 md:hidden">
              <MobileNavigation />
            </div>
          </div>
        </nav>
      </div>
    </header>
  )
}
</file>

<file path="apps/astro/src/components/react/primary-features.tsx">
import { Code2Icon, ShieldIcon, ZapIcon, DatabaseIcon, CloudIcon, RocketIcon, SparklesIcon, SmartphoneIcon } from 'lucide-react'

const primaryFeatures = [
  {
    title: 'Cross-Platform Mobile',
    description:
      'Build native mobile applications with Expo that work seamlessly across iOS and Android platforms.',
    icon: SmartphoneIcon,
    secondaryIcon: RocketIcon,
  },
  {
    title: 'Edge Computing',
    description:
      'Leverage Cloudflare Workers for serverless compute at the edge, bringing your code closer to your users.',
    icon: CloudIcon,
    secondaryIcon: ZapIcon,
  },
  {
    title: 'Secure Authentication',
    description:
      'Built-in authentication with Clerk ensures your users and data remain protected with enterprise-grade security.',
    icon: ShieldIcon,
    secondaryIcon: SparklesIcon,
  },
  {
    title: 'Edge Database & Storage',
    description:
      'Store and retrieve data efficiently with D1 Database and R2 Storage, optimized for edge computing.',
    icon: DatabaseIcon,
    secondaryIcon: Code2Icon,
  },
]

export function PrimaryFeatures() {
  return (
    <section
      id="features"
      aria-label="Primary features"
      className="relative overflow-hidden bg-gradient-to-br from-slate-900 via-blue-950 to-slate-900 py-24 sm:py-32"
    >
      {/* Gradient overlay */}
      <div className="absolute inset-0 bg-[radial-gradient(circle_at_top_right,_var(--tw-gradient-stops))] from-blue-500/10 via-cyan-500/5 to-transparent" />

      <div className="relative mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div className="mx-auto max-w-2xl lg:text-center">
          <h2 className="text-base font-semibold leading-7 text-orange-400">Production Ready</h2>
          <p className="mt-2 text-3xl font-bold tracking-tight text-white sm:text-4xl">
            Everything you need to build AI apps
          </p>
          <p className="mt-6 text-lg leading-8 text-gray-300">
            Start with a fully configured development environment and production-ready infrastructure.
            Focus on building your AI features, not setting up tooling.
          </p>
        </div>

        <div className="mx-auto mt-16 max-w-2xl sm:mt-20 lg:mt-24 lg:max-w-none">
          <dl className="grid max-w-xl grid-cols-1 gap-x-8 gap-y-16 lg:max-w-none lg:grid-cols-2">
            {primaryFeatures.map((feature) => (
              <div key={feature.title} className="group relative">
                {/* Glassmorphism card */}
                <div className="relative overflow-hidden rounded-2xl bg-white/[0.07] p-8 shadow-[0_8px_32px_0_rgba(31,38,135,0.37)] backdrop-blur-[6px] border border-white/[0.18] transition-all duration-300 hover:bg-white/[0.1] hover:shadow-orange-500/25">
                  <div className="absolute top-0 left-0 h-full w-full bg-gradient-to-br from-blue-500/10 via-transparent to-transparent opacity-0 transition-opacity duration-300 group-hover:opacity-100" />
                  
                  {/* Content */}
                  <div className="relative">
                    <div className="mb-4 flex items-center gap-4">
                      <div className="rounded-xl bg-orange-600/20 p-2.5">
                        <feature.icon className="h-6 w-6 text-orange-400" aria-hidden="true" />
                      </div>
                      <div className="rounded-xl bg-gray-800/50 p-2">
                        <feature.secondaryIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
                      </div>
                    </div>
                    <dt className="text-xl font-semibold leading-7 text-white">{feature.title}</dt>
                    <dd className="mt-4 flex flex-auto flex-col text-base leading-7 text-gray-300">
                      <p className="flex-auto">{feature.description}</p>
                    </dd>
                  </div>
                </div>
              </div>
            ))}
          </dl>
        </div>
      </div>
    </section>
  )
}
</file>

<file path="apps/astro/src/components/react/secondary-features.tsx">
import { BookOpenIcon, PuzzleIcon, WorkflowIcon, BotIcon } from 'lucide-react'

const secondaryFeatures = [
  {
    name: 'AI Story Generation',
    summary: 'Powered by Workers AI',
    description:
      'Generate AI-powered stories about users\' daily activities and create accompanying images using Cloudflare Workers AI capabilities.',
    icon: BotIcon,
  },
  {
    name: 'Example Implementation',
    summary: 'Learn by example',
    description:
      'Includes a complete example app showcasing authentication, AI processing, background jobs, and database patterns. Use it as a reference or starting point.',
    icon: BookOpenIcon,
  },
  {
    name: 'Integration Patterns',
    summary: 'Best practices built-in',
    description:
      'See how to integrate Clerk auth, Workers AI, D1 database, and R2 storage with proper error handling and type safety using tRPC.',
    icon: PuzzleIcon,
  },
  {
    name: 'Durable Workflows',
    summary: 'Reliable AI processing',
    description:
      'Process AI tasks reliably with durable Cloudflare Workers, ensuring your AI operations complete successfully even with longer processing times.',
    icon: WorkflowIcon,
  },
]

export function SecondaryFeatures() {
  return (
    <section
      id="secondary-features"
      aria-label="Features for building modern applications"
      className="relative overflow-hidden bg-gradient-to-br from-slate-900 to-blue-950 py-24 sm:py-32"
    >
      {/* Gradient overlay */}
      <div className="absolute inset-0 bg-[radial-gradient(circle_at_top_right,_var(--tw-gradient-stops))] from-blue-500/10 via-cyan-500/5 to-transparent" />

      <div className="relative mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div className="mx-auto max-w-2xl lg:text-center">
          <h2 className="text-base font-semibold leading-7 text-orange-400">AI-First Development</h2>
          <p className="mt-2 text-3xl font-bold tracking-tight text-white sm:text-4xl">
            Built for AI applications
          </p>
          <p className="mt-6 text-lg leading-8 text-gray-300">
            Includes everything you need to build AI-powered applications with proper error handling,
            scalability, and user experience best practices.
          </p>
        </div>

        <div className="mx-auto mt-16 max-w-7xl">
          <div className="grid grid-cols-1 gap-8 lg:grid-cols-2">
            {secondaryFeatures.map((feature) => (
              <div key={feature.name} className="group relative">
                <div className="relative overflow-hidden rounded-2xl bg-white/[0.07] p-8 shadow-[0_8px_32px_0_rgba(31,38,135,0.37)] backdrop-blur-[6px] border border-white/[0.18] transition-all duration-300 hover:bg-white/[0.1] hover:shadow-orange-500/25">
                  <div className="absolute -inset-px bg-gradient-to-r from-blue-500/10 to-cyan-500/10 opacity-0 transition duration-300 group-hover:opacity-100" />
                  
                  <div className="relative">
                    {/* Icon */}
                    <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-orange-500/10 backdrop-blur-sm">
                      <feature.icon className="h-6 w-6 text-orange-400" />
                    </div>

                    {/* Content */}
                    <div className="mt-6">
                      <h3 className="text-lg font-semibold leading-8 tracking-tight text-white">
                        {feature.name}
                      </h3>
                      <p className="mt-2 text-base text-gray-300">
                        {feature.description}
                      </p>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  )
}
</file>

<file path="apps/astro/src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="apps/astro/src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { Cross2Icon } from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="apps/astro/src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="apps/astro/src/env.d.ts">
/// <reference path="../.astro/types.d.ts" />
/// <reference types="astro/client" />
</file>

<file path="apps/astro/src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="apps/astro/src/styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem
  }
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%
  }
}
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="apps/astro/tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
    darkMode: ['class'],
    content: [
    './src/**/*.{astro,html,js,jsx,ts,tsx}', // Make sure Astro files are included
  ],
  theme: {
  	extend: {
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
}
</file>

<file path="apps/astro/tsconfig.json">
{
  "extends": "astro/tsconfigs/base",
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "react",
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    "strictNullChecks": true
  }
}
</file>

<file path="apps/astro/turbo.json">
{
  "$schema": "https://turborepo.org/schema.json",
  "extends": ["//"],
  "tasks": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": [".astro/**"]
    },
    "dev": {
      "persistent": true
    }
  }
}
</file>

<file path="apps/expo/.env.example">
EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY=
</file>

<file path="apps/expo/.npmrc">
node-linker=hoisted
</file>

<file path="apps/expo/app.json">
{
  "expo": {
    "name": "expo-app",
    "slug": "expo-app",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "newArchEnabled": true,
    "userInterfaceStyle": "automatic",
    "ios": {
      "supportsTablet": true
    },
    "splash": {
      "image": "./assets/images/splash.png",
      "backgroundColor": "#08080b"
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "package": "com.anonymous.expoapp"
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router"
    ]
  }
}
</file>

<file path="apps/expo/app/(auth)/_layout.tsx">
import { Redirect, Stack } from 'expo-router'
import { useAuth } from '@clerk/clerk-expo'

export default function AuthRoutesLayout() {
  const { isSignedIn } = useAuth()

  if (isSignedIn) {
    return <Redirect href={'/'} />
  }

  return <Stack screenOptions={{
          headerShown: false,
        }} />
}
</file>

<file path="apps/expo/app/(auth)/sign-in.tsx">
import * as React from 'react'
import {
  Text,
  TextInput,
  TouchableOpacity,
  View,
  KeyboardAvoidingView,
  Platform,
  StyleSheet,
  TouchableWithoutFeedback,
  Keyboard,
  Image,
  Dimensions
} from 'react-native'
import { useSignIn } from '@clerk/clerk-expo'
import { useRouter } from 'expo-router'
import { LinearGradient } from 'expo-linear-gradient'

export default function SignInScreen() {
  const { signIn, setActive, isLoaded } = useSignIn()
  const router = useRouter()

  const [emailAddress, setEmailAddress] = React.useState('')
  const [password, setPassword] = React.useState('')

  const onSignInPress = React.useCallback(async () => {
    if (!isLoaded) {
      return
    }

    try {
      const signInAttempt = await signIn.create({
        identifier: emailAddress,
        password,
      })

      if (signInAttempt.status === 'complete') {
        await setActive({ session: signInAttempt.createdSessionId })
        router.replace('/')
      } else {
        console.error(JSON.stringify(signInAttempt, null, 2))
      }
    } catch (err: any) {
      console.error(JSON.stringify(err, null, 2))
    }
  }, [isLoaded, emailAddress, password])

  const navigateToSignUp = () => {
    router.replace('/sign-up')
  }

  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}>
      <View style={styles.container}>
        <LinearGradient
          colors={['rgba(0,0,0,0.6)', 'rgba(0,0,0,0.3)']}
          style={styles.overlay}
        />
        <KeyboardAvoidingView
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.keyboardContainer}
        >
          <View style={styles.card}>
            <Text style={styles.headerText}>Welcome Back</Text>
            <Text style={styles.subHeaderText}>Sign In to Continue</Text>

            <TextInput
              style={styles.input}
              autoCapitalize="none"
              value={emailAddress}
              placeholder="Email"
              placeholderTextColor="#888"
              onChangeText={(emailAddress) => setEmailAddress(emailAddress)}
            />

            <TextInput
              style={styles.input}
              value={password}
              placeholder="Password"
              placeholderTextColor="#888"
              secureTextEntry={true}
              onChangeText={(password) => setPassword(password)}
            />

            <TouchableOpacity
              style={styles.primaryButton}
              onPress={onSignInPress}
            >
              <Text style={styles.buttonText}>Sign In</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.secondaryButton}
              onPress={navigateToSignUp}
            >
              <Text style={styles.secondaryButtonText}>
                Don't have an account? Sign Up
              </Text>
            </TouchableOpacity>
          </View>
        </KeyboardAvoidingView>
      </View>
    </TouchableWithoutFeedback>
  )
}

const { width, height } = Dimensions.get('window')

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000'
  },
  backgroundImage: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: width,
    height: height,
    opacity: 0.5
  },
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  keyboardContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16
  },
  card: {
    width: '90%',
    backgroundColor: 'rgba(255,255,255,0.9)',
    borderRadius: 20,
    padding: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 6,
    elevation: 5
  },
  headerText: {
    fontSize: 32,
    fontWeight: '800',
    textAlign: 'center',
    marginBottom: 16,
    color: '#333',
    letterSpacing: -1
  },
  subHeaderText: {
    fontSize: 20,
    fontWeight: '600',
    textAlign: 'center',
    marginBottom: 24,
    color: '#666'
  },
  input: {
    backgroundColor: 'rgba(240,240,240,0.9)',
    borderWidth: 1,
    borderColor: 'rgba(200,200,200,0.5)',
    padding: 15,
    borderRadius: 12,
    marginBottom: 16,
    fontSize: 16,
    color: '#333'
  },
  primaryButton: {
    backgroundColor: '#007bff',
    padding: 15,
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#007bff',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 3
  },
  buttonText: {
    color: 'white',
    textAlign: 'center',
    fontWeight: 'bold',
    fontSize: 16
  },
  secondaryButton: {
    padding: 15,
    borderRadius: 12,
    backgroundColor: 'rgba(0,123,255,0.1)'
  },
  secondaryButtonText: {
    color: '#007bff',
    textAlign: 'center',
    fontWeight: '600'
  }
})
</file>

<file path="apps/expo/app/(auth)/sign-up.tsx">
import * as React from 'react'
import {
  Text,
  TextInput,
  TouchableOpacity,
  View,
  KeyboardAvoidingView,
  Platform,
  StyleSheet,
  TouchableWithoutFeedback,
  Keyboard,
  Image,
  Dimensions
} from 'react-native'
import { useSignUp } from '@clerk/clerk-expo'
import { useRouter } from 'expo-router'
import { LinearGradient } from 'expo-linear-gradient'

export default function SignUpScreen() {
  const { isLoaded, signUp, setActive } = useSignUp()
  const router = useRouter()

  const [emailAddress, setEmailAddress] = React.useState('')
  const [password, setPassword] = React.useState('')
  const [pendingVerification, setPendingVerification] = React.useState(false)
  const [code, setCode] = React.useState('')

  const onSignUpPress = async () => {
    if (!isLoaded) {
      return
    }

    try {
      await signUp.create({
        emailAddress,
        password,
      })

      await signUp.prepareEmailAddressVerification({ strategy: 'email_code' })

      setPendingVerification(true)
    } catch (err: any) {
      console.error(JSON.stringify(err, null, 2))
    }
  }

  const onPressVerify = async () => {
    if (!isLoaded) {
      return
    }

    try {
      const completeSignUp = await signUp.attemptEmailAddressVerification({
        code,
      })

      if (completeSignUp.status === 'complete') {
        await setActive({ session: completeSignUp.createdSessionId })
        router.replace('/')
      } else {
        console.error(JSON.stringify(completeSignUp, null, 2))
      }
    } catch (err: any) {
      console.error(JSON.stringify(err, null, 2))
    }
  }

  const navigateToSignIn = () => {
    router.replace('/sign-in')
  }

  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}>
      <View style={styles.container}>
        <LinearGradient
          colors={['rgba(0,0,0,0.6)', 'rgba(0,0,0,0.3)']}
          style={styles.overlay}
        />
        <KeyboardAvoidingView
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.keyboardContainer}
        >
          <View style={styles.card}>
            <Text style={styles.headerText}>Chronicle the Journey</Text>
            <Text style={styles.subHeaderText}>
              {!pendingVerification
                ? 'Create Your Account'
                : 'Verify Your Email'}
            </Text>

            {!pendingVerification && (
              <>
                <TextInput
                  style={styles.input}
                  autoCapitalize="none"
                  value={emailAddress}
                  placeholder="Email"
                  placeholderTextColor="#888"
                  onChangeText={(email) => setEmailAddress(email)}
                />
                <TextInput
                  style={styles.input}
                  value={password}
                  placeholder="Password"
                  placeholderTextColor="#888"
                  secureTextEntry={true}
                  onChangeText={(password) => setPassword(password)}
                />
                <TouchableOpacity
                  style={styles.primaryButton}
                  onPress={onSignUpPress}
                >
                  <Text style={styles.buttonText}>Sign Up</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={styles.secondaryButton}
                  onPress={navigateToSignIn}
                >
                  <Text style={styles.secondaryButtonText}>
                    Already have an account? Sign In
                  </Text>
                </TouchableOpacity>
              </>
            )}

            {pendingVerification && (
              <>
                <Text style={styles.verificationText}>
                  Check your email for the verification code
                </Text>
                <TextInput
                  style={styles.input}
                  value={code}
                  placeholder="Enter 6-digit code"
                  placeholderTextColor="#888"
                  onChangeText={(code) => setCode(code)}
                  keyboardType="number-pad"
                />
                <TouchableOpacity
                  style={styles.primaryButton}
                  onPress={onPressVerify}
                >
                  <Text style={styles.buttonText}>Verify Email</Text>
                </TouchableOpacity>
              </>
            )}
          </View>
        </KeyboardAvoidingView>
      </View>
    </TouchableWithoutFeedback>
  )
}

const { width, height } = Dimensions.get('window')

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000'
  },
  backgroundImage: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: width,
    height: height,
    opacity: 0.5
  },
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  keyboardContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16
  },
  card: {
    width: '90%',
    backgroundColor: 'rgba(255,255,255,0.9)',
    borderRadius: 20,
    padding: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 6,
    elevation: 5
  },
  headerText: {
    fontSize: 32,
    fontWeight: '800',
    textAlign: 'center',
    marginBottom: 16,
    color: '#333',
    letterSpacing: -1
  },
  subHeaderText: {
    fontSize: 20,
    fontWeight: '600',
    textAlign: 'center',
    marginBottom: 24,
    color: '#666'
  },
  input: {
    backgroundColor: 'rgba(240,240,240,0.9)',
    borderWidth: 1,
    borderColor: 'rgba(200,200,200,0.5)',
    padding: 15,
    borderRadius: 12,
    marginBottom: 16,
    fontSize: 16,
    color: '#333'
  },
  primaryButton: {
    backgroundColor: '#007bff',
    padding: 15,
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#007bff',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 3
  },
  buttonText: {
    color: 'white',
    textAlign: 'center',
    fontWeight: 'bold',
    fontSize: 16
  },
  secondaryButton: {
    padding: 15,
    borderRadius: 12,
    backgroundColor: 'rgba(0,123,255,0.1)'
  },
  secondaryButtonText: {
    color: '#007bff',
    textAlign: 'center',
    fontWeight: '600'
  },
  verificationText: {
    textAlign: 'center',
    color: '#666',
    marginBottom: 16,
    fontSize: 16
  }
})
</file>

<file path="apps/expo/app/(gameui)/_layout.tsx">
import React from 'react';
import { Stack } from 'expo-router';

export default function GameUILayout() {
  return (
    <Stack>
      <Stack.Screen
        name="index"
        options={{
          title: '游戏UI组件库',
          headerShown: false,
        }}
      />
      <Stack.Screen
        name="core-components"
        options={{
          title: '核心组件',
          headerShown: false,
        }}
      />
      <Stack.Screen
        name="function-components"
        options={{
          title: '功能组件',
          headerShown: false,
        }}
      />
      <Stack.Screen
        name="login-demo"
        options={{
          title: '登录界面示例',
          headerShown: false,
        }}
      />
      <Stack.Screen
        name="main-interface-demo"
        options={{
          title: '游戏主界面示例',
          headerShown: false,
        }}
      />
      <Stack.Screen
        name="theme-explorer"
        options={{
          title: '主题浏览器',
          headerShown: false,
        }}
      />
      <Stack.Screen
        name="accessibility-guide"
        options={{
          title: '无障碍指南',
          headerShown: false,
        }}
      />
      <Stack.Screen
        name="game-components-demo"
        options={{
          title: '游戏组件演示',
          headerShown: false,
        }}
      />
    </Stack>
  );
}
</file>

<file path="apps/expo/app/(gameui)/accessibility-guide.tsx">
import React, { useState } from 'react';
import { StyleSheet, View, ScrollView, SafeAreaView, Switch, Platform } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';

import { ThemeProvider } from '../../components/themes/ThemeProvider';
import { Button, Text, Card, Input } from '../../components/core';
import { AccessibilityHelpers } from '../../utils/platform';

export default function AccessibilityGuide() {
  const [largeText, setLargeText] = useState(false);
  const [highContrast, setHighContrast] = useState(false);

  // Text scaling factor based on accessibility settings
  const textScale = largeText ? 1.3 : 1;

  // Return to previous screen
  const goBack = () => {
    router.back();
  };

  return (
    <ThemeProvider>
      <StatusBar style="dark" />
      <SafeAreaView style={styles.container}>
        <ScrollView contentContainerStyle={styles.contentContainer}>
          <Text
            variant="h1"
            align="center"
            style={[styles.title, { fontSize: 28 * textScale }]}
            {...AccessibilityHelpers.headerA11yProps('Accessibility Guide', 1)}
          >
            Accessibility Guide
          </Text>

          <Text
            variant="body1"
            style={[styles.description, { fontSize: 16 * textScale }]}
          >
            This guide demonstrates how our Game UI components support accessibility features
            to ensure all players can enjoy your game.
          </Text>

          {/* Settings panel */}
          <Card title="Accessibility Settings" style={styles.settingsCard}>
            <View style={styles.settingRow}>
              <Text
                style={{ fontSize: 16 * textScale }}
                {...AccessibilityHelpers.combineA11yProps('Large Text', 'Increases text size for better readability')}
              >
                Large Text
              </Text>
              <Switch
                value={largeText}
                onValueChange={setLargeText}
                accessibilityRole="switch"
                accessibilityLabel="Toggle large text"
                accessibilityState={{ checked: largeText }}
              />
            </View>

            <View style={styles.settingRow}>
              <Text
                style={{ fontSize: 16 * textScale }}
                {...AccessibilityHelpers.combineA11yProps('High Contrast', 'Increases color contrast for better visibility')}
              >
                High Contrast
              </Text>
              <Switch
                value={highContrast}
                onValueChange={setHighContrast}
                accessibilityRole="switch"
                accessibilityLabel="Toggle high contrast"
                accessibilityState={{ checked: highContrast }}
              />
            </View>
          </Card>

          {/* Text components */}
          <Card
            title="Accessible Text"
            style={styles.sectionCard}
            {...AccessibilityHelpers.combineA11yProps('Accessible Text Section', 'Examples of accessible text components')}
          >
            <Text
              variant="h2"
              style={{ fontSize: 24 * textScale }}
              {...AccessibilityHelpers.headerA11yProps('This is a heading level 2', 2)}
            >
              Heading Level 2
            </Text>

            <Text
              variant="body1"
              style={[styles.paragraphText, { fontSize: 16 * textScale }]}
            >
              All text components are properly labeled for screen readers. Headings have appropriate
              accessibility roles and levels, making navigation easier for screen reader users.
            </Text>

            <Text
              variant="body1"
              style={[
                styles.paragraphText,
                { fontSize: 16 * textScale },
                highContrast && styles.highContrastText
              ]}
            >
              Text can adapt to accessibility settings like larger font sizes and higher contrast,
              making it more readable for all users.
            </Text>
          </Card>

          {/* Button components */}
          <Card
            title="Accessible Buttons"
            style={styles.sectionCard}
            {...AccessibilityHelpers.combineA11yProps('Accessible Buttons Section', 'Examples of accessible button components')}
          >
            <View style={styles.buttonsContainer}>
              <Button
                title="Primary Button"
                onPress={() => {}}
                style={styles.demoButton}
                accessibilityLabel="Primary action button"
                accessibilityHint="Demonstrates a primary action in the game"
              />

              <Button
                title="Secondary Button"
                variant="secondary"
                onPress={() => {}}
                style={styles.demoButton}
                accessibilityLabel="Secondary action button"
                accessibilityHint="Demonstrates a secondary action in the game"
              />

              <Button
                title="Disabled Button"
                disabled={true}
                onPress={() => {}}
                style={styles.demoButton}
                accessibilityLabel="Disabled button"
                accessibilityHint="This button cannot be activated"
                accessibilityState={{ disabled: true }}
              />

              <Button
                title={highContrast ? "High Contrast Button" : "Normal Contrast Button"}
                onPress={() => {}}
                style={[
                  styles.demoButton,
                  highContrast && styles.highContrastButton
                ]}
                accessibilityLabel={highContrast ? "High contrast button" : "Normal contrast button"}
              />
            </View>

            <Text
              variant="body1"
              style={[styles.paragraphText, { fontSize: 16 * textScale }]}
            >
              All buttons have proper accessibility labels and hints. They work well with screen readers
              and support platform-specific interactions like Android's ripple effect.
            </Text>
          </Card>

          {/* Form components */}
          <Card
            title="Accessible Forms"
            style={styles.sectionCard}
            {...AccessibilityHelpers.combineA11yProps('Accessible Forms Section', 'Examples of accessible form components')}
          >
            <Input
              label="Username"
              placeholder="Enter your username"
              style={styles.inputField}
              accessibilityLabel="Username input field"
              accessibilityHint="Enter your username to log in"
            />

            <Input
              label="Password"
              placeholder="Enter your password"
              secureTextEntry
              style={styles.inputField}
              accessibilityLabel="Password input field"
              accessibilityHint="Enter your password securely"
            />

            <Input
              label="Error Example"
              placeholder="This field has an error"
              error="This field is required"
              style={styles.inputField}
              accessibilityLabel="Input field with error"
              accessibilityHint="Example of an input field with validation error"
            />

            <Text
              variant="body1"
              style={[styles.paragraphText, { fontSize: 16 * textScale }]}
            >
              Form inputs are labeled appropriately for screen readers. Error messages are
              associated with their respective fields for better accessibility.
            </Text>
          </Card>

          {/* Platform-specific features */}
          <Card
            title="Platform Adaptations"
            style={styles.sectionCard}
            {...AccessibilityHelpers.combineA11yProps('Platform Adaptations Section', 'Examples of platform-specific accessibility features')}
          >
            <Text
              variant="body1"
              style={[styles.paragraphText, { fontSize: 16 * textScale }]}
            >
              Current platform: <Text style={styles.bold}>{Platform.OS}</Text>
            </Text>

            <Text
              variant="body1"
              style={[styles.paragraphText, { fontSize: 16 * textScale }]}
            >
              Components automatically adapt to platform-specific accessibility guidelines:
            </Text>

            <View style={styles.platformFeaturesList}>
              <View style={styles.featureItem}>
                <Text style={[styles.bulletPoint, { fontSize: 16 * textScale }]}>•</Text>
                <Text style={[styles.featureText, { fontSize: 16 * textScale }]}>
                  iOS VoiceOver optimizations
                </Text>
              </View>

              <View style={styles.featureItem}>
                <Text style={[styles.bulletPoint, { fontSize: 16 * textScale }]}>•</Text>
                <Text style={[styles.featureText, { fontSize: 16 * textScale }]}>
                  Android TalkBack support
                </Text>
              </View>

              <View style={styles.featureItem}>
                <Text style={[styles.bulletPoint, { fontSize: 16 * textScale }]}>•</Text>
                <Text style={[styles.featureText, { fontSize: 16 * textScale }]}>
                  Platform-specific touch targets and feedback
                </Text>
              </View>

              <View style={styles.featureItem}>
                <Text style={[styles.bulletPoint, { fontSize: 16 * textScale }]}>•</Text>
                <Text style={[styles.featureText, { fontSize: 16 * textScale }]}>
                  Automatic adaptation to system font size settings
                </Text>
              </View>
            </View>
          </Card>

          {/* Best practices */}
          <Card
            title="Accessibility Best Practices"
            style={styles.sectionCard}
            {...AccessibilityHelpers.combineA11yProps('Accessibility Best Practices Section', 'Guide to implementing accessibility in your game')}
          >
            <Text
              variant="h3"
              style={[{ fontSize: 20 * textScale }]}
              {...AccessibilityHelpers.headerA11yProps('Tips for Game Developers', 3)}
            >
              Tips for Game Developers
            </Text>

            <View style={styles.platformFeaturesList}>
              <View style={styles.featureItem}>
                <Text style={[styles.bulletPoint, { fontSize: 16 * textScale }]}>1.</Text>
                <Text style={[styles.featureText, { fontSize: 16 * textScale }]}>
                  Always provide alternate text for images and icons
                </Text>
              </View>

              <View style={styles.featureItem}>
                <Text style={[styles.bulletPoint, { fontSize: 16 * textScale }]}>2.</Text>
                <Text style={[styles.featureText, { fontSize: 16 * textScale }]}>
                  Ensure sufficient color contrast (at least 4.5:1 ratio)
                </Text>
              </View>

              <View style={styles.featureItem}>
                <Text style={[styles.bulletPoint, { fontSize: 16 * textScale }]}>3.</Text>
                <Text style={[styles.featureText, { fontSize: 16 * textScale }]}>
                  Support keyboard navigation where applicable
                </Text>
              </View>

              <View style={styles.featureItem}>
                <Text style={[styles.bulletPoint, { fontSize: 16 * textScale }]}>4.</Text>
                <Text style={[styles.featureText, { fontSize: 16 * textScale }]}>
                  Make touch targets at least 44x44 points
                </Text>
              </View>

              <View style={styles.featureItem}>
                <Text style={[styles.bulletPoint, { fontSize: 16 * textScale }]}>5.</Text>
                <Text style={[styles.featureText, { fontSize: 16 * textScale }]}>
                  Provide options for text size and high contrast
                </Text>
              </View>

              <View style={styles.featureItem}>
                <Text style={[styles.bulletPoint, { fontSize: 16 * textScale }]}>6.</Text>
                <Text style={[styles.featureText, { fontSize: 16 * textScale }]}>
                  Test your game with screen readers
                </Text>
              </View>
            </View>
          </Card>

          <Button
            title="Back to Components"
            onPress={goBack}
            variant="primary"
            style={styles.backButton}
            accessibilityLabel="Go back to components list"
          />
        </ScrollView>
      </SafeAreaView>
    </ThemeProvider>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  contentContainer: {
    padding: 16,
    paddingBottom: 40,
  },
  title: {
    marginTop: 20,
    marginBottom: 8,
  },
  description: {
    marginBottom: 24,
    opacity: 0.7,
    textAlign: 'center',
  },
  settingsCard: {
    marginBottom: 24,
  },
  settingRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 12,
  },
  sectionCard: {
    marginBottom: 24,
  },
  paragraphText: {
    marginBottom: 12,
  },
  highContrastText: {
    color: '#000000',
    backgroundColor: '#FFFFFF',
    padding: 8,
    borderRadius: 4,
  },
  buttonsContainer: {
    marginBottom: 16,
  },
  demoButton: {
    marginBottom: 12,
  },
  highContrastButton: {
    backgroundColor: '#000000',
    borderColor: '#FFFFFF',
    borderWidth: 2,
  },
  inputField: {
    marginBottom: 16,
  },
  platformFeaturesList: {
    marginTop: 8,
    marginBottom: 16,
  },
  featureItem: {
    flexDirection: 'row',
    marginBottom: 8,
  },
  bulletPoint: {
    width: 20,
    fontWeight: 'bold',
  },
  featureText: {
    flex: 1,
  },
  bold: {
    fontWeight: 'bold',
  },
  backButton: {
    marginTop: 16,
  },
});
</file>

<file path="apps/expo/app/(gameui)/core-components.tsx">
import React, { useState } from 'react';
import { StyleSheet, View, ScrollView, TouchableOpacity, Platform } from 'react-native';
import { router } from 'expo-router';
import { StatusBar } from 'expo-status-bar';

import { ThemeProvider } from '../../components/themes/ThemeProvider';
import { Button, Card, Input, Text, LoadingIndicator } from '../../components/core';
import { STYLE_THEMES, ThemeStyleType } from '../../utils/theme';

const CoreComponentsDemo = () => {
  const [selectedTheme, setSelectedTheme] = useState<ThemeStyleType>('chineseStyle');
  const [inputValue, setInputValue] = useState('');
  const [secureInputValue, setSecureInputValue] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // Handle theme selection
  const handleThemeChange = (themeStyle: ThemeStyleType) => {
    setSelectedTheme(themeStyle);
  };

  // Toggle loading state
  const toggleLoading = () => {
    setIsLoading(!isLoading);
  };

  // Go back to main demo page
  const goBack = () => {
    router.back();
  };

  return (
    <ThemeProvider initialThemeStyle={selectedTheme}>
      <StatusBar style="dark" />

      <View style={styles.container}>
        <View style={styles.headerContainer}>
          <Button
            title="返回"
            onPress={goBack}
            variant="outlined"
            style={styles.backButton}
          />

          <Text variant="h2" align="center" style={styles.title}>
            核心组件展示
          </Text>
          <Text variant="body1" align="center" style={styles.subtitle}>
            Core Components Demo
          </Text>
        </View>

        {/* Theme Selector */}
        <View style={styles.themeSelectorContainer}>
          <Text variant="h4">选择主题风格:</Text>
          <ScrollView
            horizontal
            showsHorizontalScrollIndicator={false}
            style={styles.themeSelectorScroll}
          >
            {Object.entries(STYLE_THEMES).map(([key, theme]) => (
              <TouchableOpacity
                key={key}
                style={[
                  styles.themeButton,
                  { backgroundColor: theme.colors.primary },
                  selectedTheme === key && styles.selectedTheme,
                ]}
                onPress={() => handleThemeChange(key as ThemeStyleType)}
              >
                <Text
                  color="#FFFFFF"
                  align="center"
                  style={styles.themeText}
                >
                  {theme.name}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>
        </View>

        <ScrollView style={styles.demoScrollView}>
          {/* Button Demo */}
          <Card title="按钮 (Button)" style={styles.demoCard}>
            <View style={styles.row}>
              <Button
                title="Primary"
                onPress={() => {}}
                variant="primary"
                style={styles.buttonSpacing}
              />
              <Button
                title="Secondary"
                onPress={() => {}}
                variant="secondary"
                style={styles.buttonSpacing}
              />
            </View>

            <View style={styles.row}>
              <Button
                title="Outline"
                onPress={() => {}}
                variant="outline"
                style={styles.buttonSpacing}
              />
              <Button
                title="Text"
                onPress={() => {}}
                variant="text"
                style={styles.buttonSpacing}
              />
            </View>

            <View style={styles.row}>
              <Button
                title="Small"
                onPress={() => {}}
                size="small"
                style={styles.buttonSpacing}
              />
              <Button
                title="Medium"
                onPress={() => {}}
                size="medium"
                style={styles.buttonSpacing}
              />
              <Button
                title="Large"
                onPress={() => {}}
                size="large"
                style={styles.buttonSpacing}
              />
            </View>

            <View style={styles.row}>
              <Button
                title="Loading"
                onPress={() => {}}
                loading={true}
                style={styles.buttonSpacing}
              />
              <Button
                title="Disabled"
                onPress={() => {}}
                disabled={true}
                style={styles.buttonSpacing}
              />
            </View>
          </Card>

          {/* Text Demo */}
          <Card title="文本 (Text)" style={styles.demoCard}>
            <Text variant="h1">标题1 (h1)</Text>
            <Text variant="h2">标题2 (h2)</Text>
            <Text variant="h3">标题3 (h3)</Text>
            <Text variant="h4">标题4 (h4)</Text>
            <Text variant="body1">正文1 (body1) - 这是正文文本。</Text>
            <Text variant="body2">正文2 (body2) - 这是较小的正文文本。</Text>
            <Text variant="caption">说明文字 (caption) - 这是说明性文字。</Text>
            <Text variant="button">按钮文本 (button)</Text>
            <Text variant="overline">上划线文本 (overline)</Text>
          </Card>

          {/* Input Demo */}
          <Card title="输入框 (Input)" style={styles.demoCard}>
            <Input
              label="标准输入框"
              value={inputValue}
              onChangeText={setInputValue}
              placeholder="请输入文本"
              variant="default"
              style={styles.inputSpacing}
            />

            <Input
              label="密码输入框"
              value={secureInputValue}
              onChangeText={setSecureInputValue}
              placeholder="请输入密码"
              secureTextEntry
              variant="outlined"
              style={styles.inputSpacing}
            />

            <Input
              label="填充样式"
              value=""
              onChangeText={() => {}}
              placeholder="填充样式输入框"
              variant="filled"
              style={styles.inputSpacing}
            />

            <Input
              label="错误状态"
              value=""
              onChangeText={() => {}}
              placeholder="错误状态输入框"
              error="这是一个错误提示"
              style={styles.inputSpacing}
            />

            <Input
              label="禁用状态"
              value="不可编辑的内容"
              onChangeText={() => {}}
              disabled
              style={styles.inputSpacing}
            />
          </Card>

          {/* Card Demo */}
          <Card title="卡片 (Card)" style={styles.demoCard}>
            <View style={styles.cardDemoContainer}>
              <Card
                title="默认卡片"
                variant="default"
                style={styles.demoNestedCard}
              >
                <Text>这是一个默认样式的卡片。</Text>
              </Card>

              <Card
                title="轮廓卡片"
                variant="outlined"
                style={styles.demoNestedCard}
              >
                <Text>这是一个带轮廓的卡片。</Text>
              </Card>

              <Card
                title="浮起卡片"
                variant="elevated"
                style={styles.demoNestedCard}
              >
                <Text>这是一个浮起的卡片。</Text>
                <Button
                  title="按钮"
                  onPress={() => {}}
                  size="small"
                  style={styles.cardDemoButton}
                />
              </Card>
            </View>
          </Card>

          {/* Loading Indicator Demo */}
          <Card title="加载指示器 (Loading Indicator)" style={styles.demoCard}>
            <Button
              title={isLoading ? "停止加载" : "开始加载"}
              onPress={toggleLoading}
              style={styles.loadingDemoButton}
            />

            <View style={styles.loadingDemoContainer}>
              <View style={styles.loadingItem}>
                <Text variant="caption" align="center">默认</Text>
                <LoadingIndicator loading={isLoading} variant="default" size="small" />
              </View>

              <View style={styles.loadingItem}>
                <Text variant="caption" align="center">中等大小</Text>
                <LoadingIndicator loading={isLoading} variant="default" size="medium" />
              </View>

              <View style={styles.loadingItem}>
                <Text variant="caption" align="center">大尺寸</Text>
                <LoadingIndicator loading={isLoading} variant="default" size="large" />
              </View>
            </View>

            <View style={styles.loadingWithTextContainer}>
              <LoadingIndicator
                loading={isLoading}
                message="加载中，请稍候..."
                variant="centered"
                size="medium"
              />
            </View>
          </Card>
        </ScrollView>
      </View>
    </ThemeProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  headerContainer: {
    paddingTop: Platform.OS === 'ios' ? 50 : 30,
    paddingBottom: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
    paddingHorizontal: 16,
  },
  backButton: {
    alignSelf: 'flex-start',
    marginBottom: 16,
  },
  title: {
    marginBottom: 4,
  },
  subtitle: {
    opacity: 0.7,
  },
  themeSelectorContainer: {
    backgroundColor: '#fff',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  themeSelectorScroll: {
    flexDirection: 'row',
    marginTop: 12,
  },
  themeButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    marginRight: 8,
    borderRadius: 4,
  },
  selectedTheme: {
    borderWidth: 2,
    borderColor: '#000',
  },
  themeText: {
    fontWeight: 'bold',
  },
  demoScrollView: {
    flex: 1,
    padding: 16,
  },
  demoCard: {
    marginBottom: 16,
  },
  row: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 12,
  },
  buttonSpacing: {
    marginRight: 8,
    marginBottom: 8,
  },
  inputSpacing: {
    marginBottom: 12,
  },
  cardDemoContainer: {
    flexDirection: 'column',
  },
  demoNestedCard: {
    marginBottom: 12,
  },
  cardDemoButton: {
    marginTop: 12,
    alignSelf: 'flex-end',
  },
  loadingDemoButton: {
    marginBottom: 16,
  },
  loadingDemoContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    padding: 16,
    backgroundColor: '#f9f9f9',
    borderRadius: 8,
    marginBottom: 16,
  },
  loadingItem: {
    alignItems: 'center',
  },
  loadingWithTextContainer: {
    height: 150,
    backgroundColor: '#f9f9f9',
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default CoreComponentsDemo;
</file>

<file path="apps/expo/app/(gameui)/function-components.tsx">
import React from 'react';
import { StyleSheet, View, ScrollView, TouchableOpacity, Platform, Alert } from 'react-native';
import { router } from 'expo-router';
import { StatusBar } from 'expo-status-bar';

import { ThemeProvider } from '../../components/themes/ThemeProvider';
import { Button, Card, Text } from '../../components/core';
import { STYLE_THEMES } from '../../utils/theme';

const FunctionComponentsDemo = () => {
  // Go back to main demo page
  const goBack = () => {
    router.back();
  };

  // Navigate to a specific function component demo
  const navigateToDemo = (path: string) => {
    router.push(path);
  };

  return (
    <ThemeProvider>
      <StatusBar style="dark" />

      <View style={styles.container}>
        <View style={styles.headerContainer}>
          <Button
            title="返回"
            onPress={goBack}
            variant="outlined"
            style={styles.backButton}
          />

          <Text variant="h2" align="center" style={styles.title}>
            功能组件展示
          </Text>
          <Text variant="body1" align="center" style={styles.subtitle}>
            Function Components Demo
          </Text>
        </View>

        <ScrollView style={styles.demoScrollView}>
          <Text variant="h3" style={styles.sectionTitle}>
            可用功能组件
          </Text>

          {/* Login Screen */}
          <Card
            title="登录界面 (Login Screen)"
            variant="elevated"
            style={styles.componentCard}
            onPress={() => navigateToDemo('/login-demo')}
          >
            <Text style={styles.componentDescription}>
              支持多种游戏风格的登录界面，包括表单验证、加载状态和主题适配。
            </Text>

            <View style={styles.themePreviewContainer}>
              <Text variant="body2" style={styles.themePreviewTitle}>
                支持主题风格
              </Text>

              <ScrollView
                horizontal
                showsHorizontalScrollIndicator={false}
                style={styles.themePreviewScroll}
              >
                {Object.entries(STYLE_THEMES).map(([key, theme]) => (
                  <View
                    key={key}
                    style={[
                      styles.themePreview,
                      { backgroundColor: theme.colors.primary }
                    ]}
                  >
                    <Text
                      variant="caption"
                      color="#FFFFFF"
                      align="center"
                    >
                      {theme.name}
                    </Text>
                  </View>
                ))}
              </ScrollView>
            </View>

            <Button
              title="查看登录界面示例"
              onPress={() => navigateToDemo('/login-demo')}
              variant="primary"
              style={styles.viewDemoButton}
            />
          </Card>

          {/* Main Game Interface */}
          <Card
            title="游戏主界面 (Main Game Interface)"
            variant="elevated"
            style={styles.componentCard}
            onPress={() => navigateToDemo('/main-interface-demo')}
          >
            <Text style={styles.componentDescription}>
              完整的游戏主界面框架，包括玩家信息、资源显示、底部导航栏和通知系统。
            </Text>

            <View style={styles.themePreviewContainer}>
              <Text variant="body2" style={styles.themePreviewTitle}>
                支持主题风格
              </Text>

              <ScrollView
                horizontal
                showsHorizontalScrollIndicator={false}
                style={styles.themePreviewScroll}
              >
                {Object.entries(STYLE_THEMES).map(([key, theme]) => (
                  <View
                    key={key}
                    style={[
                      styles.themePreview,
                      { backgroundColor: theme.colors.primary }
                    ]}
                  >
                    <Text
                      variant="caption"
                      color="#FFFFFF"
                      align="center"
                    >
                      {theme.name}
                    </Text>
                  </View>
                ))}
              </ScrollView>
            </View>

            <Button
              title="查看游戏主界面示例"
              onPress={() => navigateToDemo('/main-interface-demo')}
              variant="primary"
              style={styles.viewDemoButton}
            />
          </Card>

          {/* Coming Soon Components */}
          <View style={styles.comingSoonContainer}>
            <Text variant="h4">即将推出的功能组件</Text>

            <Card
              title="背包系统 (Inventory System)"
              variant="outlined"
              style={styles.comingSoonCard}
            >
              <Text variant="body2">
                游戏背包组件，支持分类、搜索、物品详情等功能。
              </Text>
              <View style={styles.tagContainer}>
                <View style={styles.comingSoonTag}>
                  <Text variant="caption" color="#FFFFFF">即将推出</Text>
                </View>
              </View>
            </Card>

            <Card
              title="商城界面 (Shop Interface)"
              variant="outlined"
              style={styles.comingSoonCard}
            >
              <Text variant="body2">
                游戏商城组件，支持商品展示、购买、促销等功能。
              </Text>
              <View style={styles.tagContainer}>
                <View style={styles.comingSoonTag}>
                  <Text variant="caption" color="#FFFFFF">即将推出</Text>
                </View>
              </View>
            </Card>

            <Card
              title="设置界面 (Settings Interface)"
              variant="outlined"
              style={styles.comingSoonCard}
            >
              <Text variant="body2">
                游戏设置界面，包括音量、画质、账号等设置选项。
              </Text>
              <View style={styles.tagContainer}>
                <View style={styles.comingSoonTag}>
                  <Text variant="caption" color="#FFFFFF">即将推出</Text>
                </View>
              </View>
            </Card>
          </View>

          {/* Custom Component Request */}
          <Card
            title="需要其他功能组件？"
            variant="elevated"
            style={styles.requestCard}
          >
            <Text>
              如果您需要其他类型的功能组件，可以联系我们或参考核心组件自行构建。
            </Text>
            <Button
              title="联系我们"
              onPress={() => Alert.alert('联系信息', '请联系邮箱: example@example.com')}
              variant="outline"
              style={styles.requestButton}
            />
          </Card>
        </ScrollView>
      </View>
    </ThemeProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  headerContainer: {
    paddingTop: Platform.OS === 'ios' ? 50 : 30,
    paddingBottom: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
    paddingHorizontal: 16,
  },
  backButton: {
    alignSelf: 'flex-start',
    marginBottom: 16,
  },
  title: {
    marginBottom: 4,
  },
  subtitle: {
    opacity: 0.7,
  },
  demoScrollView: {
    flex: 1,
    padding: 16,
  },
  sectionTitle: {
    marginBottom: 16,
  },
  componentCard: {
    marginBottom: 24,
  },
  componentDescription: {
    marginBottom: 16,
  },
  themePreviewContainer: {
    marginBottom: 16,
  },
  themePreviewTitle: {
    marginBottom: 8,
  },
  themePreviewScroll: {
    flexDirection: 'row',
  },
  themePreview: {
    padding: 8,
    marginRight: 8,
    borderRadius: 4,
    minWidth: 60,
  },
  viewDemoButton: {
    alignSelf: 'flex-end',
  },
  comingSoonContainer: {
    marginVertical: 16,
  },
  comingSoonCard: {
    marginVertical: 8,
  },
  tagContainer: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    marginTop: 8,
  },
  comingSoonTag: {
    backgroundColor: '#FF9800',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 4,
  },
  requestCard: {
    marginVertical: 24,
  },
  requestButton: {
    marginTop: 16,
    alignSelf: 'center',
  },
});

export default FunctionComponentsDemo;
</file>

<file path="apps/expo/app/(gameui)/game-components-demo.tsx">
import React, { useState } from 'react';
import { StyleSheet, View, ScrollView, SafeAreaView, Switch } from 'react-native';
import { StatusBar } from 'expo-status-bar';
import { router } from 'expo-router';
import { ThemeProvider } from '../../components/themes/ThemeProvider';
import { Button, Card, Text } from '../../components/core';
import Leaderboard, { LeaderboardPlayer, LeaderboardPeriod } from '../../components/functions/Leaderboard';
import AchievementList, { Achievement } from '../../components/functions/AchievementList';
import { ThemeStyleType, STYLE_THEMES } from '../../utils/theme';

// Sample leaderboard data
const sampleLeaderboardPlayers: LeaderboardPlayer[] = [
  {
    id: '1',
    rank: 1,
    name: 'GamerPro99',
    score: 12450,
    isCurrentUser: false,
    additionalInfo: {
      'Games Played': 132,
      'Win Rate': '68%',
    },
  },
  {
    id: '2',
    rank: 2,
    name: 'WizardKing',
    score: 10980,
    isCurrentUser: false,
    additionalInfo: {
      'Games Played': 95,
      'Win Rate': '62%',
    },
  },
  {
    id: '3',
    rank: 3,
    name: 'DarkNight',
    score: 9750,
    isCurrentUser: false,
    additionalInfo: {
      'Games Played': 87,
      'Win Rate': '59%',
    },
  },
  {
    id: '4',
    rank: 4,
    name: 'PlayerOne',
    score: 8340,
    isCurrentUser: true,
    additionalInfo: {
      'Games Played': 76,
      'Win Rate': '55%',
    },
  },
  {
    id: '5',
    rank: 5,
    name: 'StarGazer',
    score: 7290,
    isCurrentUser: false,
    additionalInfo: {
      'Games Played': 68,
      'Win Rate': '51%',
    },
  },
  {
    id: '6',
    rank: 6,
    name: 'SilentHunter',
    score: 5980,
    isCurrentUser: false,
    additionalInfo: {
      'Games Played': 54,
      'Win Rate': '48%',
    },
  },
  {
    id: '7',
    rank: 7,
    name: 'MoonWalker',
    score: 4560,
    isCurrentUser: false,
    additionalInfo: {
      'Games Played': 47,
      'Win Rate': '45%',
    },
  },
];

// Sample achievement data
const sampleAchievements: Achievement[] = [
  {
    id: '1',
    title: 'First Victory',
    description: 'Win your first game',
    isUnlocked: true,
    unlockedAt: new Date('2023-10-15'),
    tier: 'bronze',
    rarity: 85,
    category: 'Beginner',
  },
  {
    id: '2',
    title: 'Sharpshooter',
    description: 'Achieve 90% accuracy in a single game',
    isUnlocked: true,
    unlockedAt: new Date('2023-11-02'),
    tier: 'silver',
    rarity: 35,
    category: 'Combat',
  },
  {
    id: '3',
    title: 'Collector',
    description: 'Find all hidden treasures',
    isUnlocked: false,
    progress: 65,
    tier: 'gold',
    rarity: 12,
    category: 'Exploration',
  },
  {
    id: '4',
    title: '???',
    description: 'Secret achievement',
    isUnlocked: false,
    isSecret: true,
    tier: 'platinum',
    rarity: 5,
    category: 'Secret',
  },
  {
    id: '5',
    title: 'Master Strategist',
    description: 'Win 10 games in a row',
    isUnlocked: false,
    progress: 30,
    tier: 'gold',
    rarity: 8,
    category: 'Expert',
  },
  {
    id: '6',
    title: 'Friendly Player',
    description: 'Add 5 friends to your team',
    isUnlocked: true,
    unlockedAt: new Date('2023-09-20'),
    reward: '500 Gold Coins',
    tier: 'bronze',
    rarity: 60,
    category: 'Social',
  },
  {
    id: '7',
    title: 'Night Owl',
    description: 'Play for 3 hours after midnight',
    isUnlocked: true,
    unlockedAt: new Date('2023-12-05'),
    tier: 'silver',
    rarity: 25,
    category: 'Lifestyle',
  },
];

// Achievement categories
const achievementCategories = [
  'All',
  'Beginner',
  'Combat',
  'Exploration',
  'Expert',
  'Social',
  'Lifestyle',
  'Secret',
];

export default function GameComponentsDemo() {
  // State for theme selection
  const [currentTheme, setCurrentTheme] = useState<ThemeStyleType>('westernStyle');

  // State for leaderboard
  const [selectedPeriod, setSelectedPeriod] = useState<LeaderboardPeriod>('weekly');
  const [showLeaderboardDetails, setShowLeaderboardDetails] = useState(false);

  // State for achievements
  const [achievementDisplayMode, setAchievementDisplayMode] = useState<'grid' | 'list'>('list');
  const [selectedCategory, setSelectedCategory] = useState('All');
  const [showUnlockedOnly, setShowUnlockedOnly] = useState(false);

  // Filter achievements based on category and unlocked status
  const filteredAchievements = sampleAchievements.filter(achievement => {
    const categoryMatch = selectedCategory === 'All' || achievement.category === selectedCategory;
    const unlockedMatch = !showUnlockedOnly || achievement.isUnlocked;
    return categoryMatch && unlockedMatch;
  });

  // Go back to main menu
  const goBack = () => {
    router.back();
  };

  // Handle leaderboard player press
  const handlePlayerPress = (player: LeaderboardPlayer) => {
    alert(`Player: ${player.name}, Rank: ${player.rank}, Score: ${player.score}`);
  };

  // Handle achievement press
  const handleAchievementPress = (achievement: Achievement) => {
    const status = achievement.isUnlocked ? 'Unlocked' : 'Locked';
    const progress = achievement.progress ? `Progress: ${achievement.progress}%` : '';

    alert(`${achievement.title}\n${status}\n${achievement.description}\n${progress}`);
  };

  return (
    <ThemeProvider initialThemeStyle={currentTheme}>
      <StatusBar style="dark" />
      <SafeAreaView style={styles.container}>
        <ScrollView contentContainerStyle={styles.scrollContent}>
          <Text
            variant="h1"
            align="center"
            style={styles.title}
          >
            Game Components
          </Text>

          {/* Theme Selection */}
          <Card title="Theme Selection" style={styles.card}>
            <Text variant="body1" style={styles.cardDescription}>
              Choose a theme to see how the game components adapt:
            </Text>

            <ScrollView
              horizontal
              showsHorizontalScrollIndicator={false}
              style={styles.themeSelector}
            >
              {Object.entries(STYLE_THEMES).map(([key, theme]) => (
                <Button
                  key={key}
                  title={theme.name}
                  variant={currentTheme === key ? 'primary' : 'outline'}
                  size="small"
                  style={styles.themeButton}
                  onPress={() => setCurrentTheme(key as ThemeStyleType)}
                />
              ))}
            </ScrollView>
          </Card>

          {/* Leaderboard Component */}
          <Text variant="h2" style={styles.sectionTitle}>Leaderboard Component</Text>

          <View style={styles.optionsContainer}>
            <View style={styles.optionRow}>
              <Text>Show Player Details:</Text>
              <Switch
                value={showLeaderboardDetails}
                onValueChange={setShowLeaderboardDetails}
              />
            </View>
          </View>

          <Leaderboard
            title="Top Players"
            players={sampleLeaderboardPlayers}
            selectedPeriod={selectedPeriod}
            onPeriodChange={setSelectedPeriod}
            onPlayerPress={handlePlayerPress}
            showDetails={showLeaderboardDetails}
            highlightTopThree={true}
            themeStyle={currentTheme}
            style={styles.componentDemo}
          />

          <Text variant="caption" style={styles.infoText}>
            * The leaderboard component displays player rankings with support for filtering by time period.
            It highlights the top three players and can show the current user.
            Tap on players to view more details.
          </Text>

          {/* Achievement Component */}
          <Text variant="h2" style={styles.sectionTitle}>Achievement Component</Text>

          <View style={styles.optionsContainer}>
            <View style={styles.optionRow}>
              <Text>Display Mode:</Text>
              <View style={styles.buttonToggle}>
                <Button
                  title="List"
                  variant={achievementDisplayMode === 'list' ? 'primary' : 'outline'}
                  size="small"
                  onPress={() => setAchievementDisplayMode('list')}
                  style={styles.toggleButton}
                />
                <Button
                  title="Grid"
                  variant={achievementDisplayMode === 'grid' ? 'primary' : 'outline'}
                  size="small"
                  onPress={() => setAchievementDisplayMode('grid')}
                  style={styles.toggleButton}
                />
              </View>
            </View>
          </View>

          <AchievementList
            title="Player Achievements"
            achievements={filteredAchievements}
            displayMode={achievementDisplayMode}
            showProgress={true}
            showRarity={true}
            showFilters={true}
            categories={achievementCategories}
            selectedCategory={selectedCategory}
            onFilterChange={setSelectedCategory}
            showUnlockedOnly={showUnlockedOnly}
            onToggleUnlockedOnly={() => setShowUnlockedOnly(!showUnlockedOnly)}
            onAchievementPress={handleAchievementPress}
            themeStyle={currentTheme}
            style={styles.componentDemo}
          />

          <Text variant="caption" style={styles.infoText}>
            * The achievement component displays player achievements with support for different
            display modes, filtering, and progress tracking. Secret achievements are hidden until
            unlocked. Achievements can have different tiers (bronze, silver, gold, etc.)
            and rarity levels.
          </Text>

          <Button
            title="Back to Components"
            onPress={goBack}
            variant="primary"
            style={styles.backButton}
          />
        </ScrollView>
      </SafeAreaView>
    </ThemeProvider>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  scrollContent: {
    padding: 16,
    paddingBottom: 40,
  },
  title: {
    marginTop: 20,
    marginBottom: 24,
  },
  card: {
    marginBottom: 24,
  },
  cardDescription: {
    marginBottom: 16,
  },
  themeSelector: {
    flexDirection: 'row',
    marginBottom: 8,
  },
  themeButton: {
    marginRight: 8,
    marginBottom: 8,
  },
  sectionTitle: {
    marginTop: 16,
    marginBottom: 16,
  },
  optionsContainer: {
    marginBottom: 16,
  },
  optionRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  buttonToggle: {
    flexDirection: 'row',
  },
  toggleButton: {
    marginLeft: 8,
  },
  componentDemo: {
    marginBottom: 8,
  },
  infoText: {
    marginBottom: 24,
    opacity: 0.7,
  },
  backButton: {
    marginTop: 16,
  },
});
</file>

<file path="apps/expo/app/(gameui)/index.tsx">
const styles = StyleSheet.create({
  background: {
    flex: 1,
  },
  backgroundImage: {
    opacity: 0.1,
  },
  container: {
    flex: 1,
    padding: 16,
    paddingTop: Platform.OS === 'ios' ? 60 : 40,
  },
  header: {
    marginBottom: 24,
  },
  title: {
    marginBottom: 8,
  },
  subtitle: {
    marginBottom: 16,
  },
  description: {
    opacity: 0.7,
  },
  categoryCard: {
    marginBottom: 16,
  },
  featuredCard: {
    borderWidth: 2,
    borderColor: '#4CAF50',
    // Add a subtle background color or shadow to make it stand out
    shadowColor: '#4CAF50',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  demoPreview: {
    flexDirection: 'row',
    marginTop: 16,
  },
  demoButton: {
    marginRight: 12,
  },
  viewDemoButton: {
    marginTop: 8,
  },
  themeList: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginTop: 16,
  },
  themeItem: {
    width: '33.33%',
    alignItems: 'center',
    marginBottom: 16,
  },
  themeColor: {
    width: 48,
    height: 48,
    borderRadius: 24,
    marginBottom: 8,
  },
  docLinks: {
    marginTop: 16,
  },
  docLink: {
    paddingVertical: 8,
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderBottomColor: '#e0e0e0',
  },
  footer: {
    marginTop: 32,
    marginBottom: 16,
  },
  copyright: {
    opacity: 0.5,
    marginTop: 4,
  },
});
</file>

<file path="apps/expo/app/(gameui)/login-demo.tsx">
import React, { useState } from 'react';
import { StyleSheet, View, ScrollView, TouchableOpacity, Alert } from 'react-native';
import { router } from 'expo-router';
import { StatusBar } from 'expo-status-bar';

import { LoginScreen } from '../../components/functions';
import { ThemeProvider } from '../../components/themes/ThemeProvider';
import { Text, Button } from '../../components/core';
import { STYLE_THEMES, ThemeStyleType } from '../../utils/theme';

// Import background images
const BACKGROUND_IMAGES = {
  chineseStyle: require('../../assets/images/placeholder.png'),
  westernStyle: require('../../assets/images/placeholder.png'),
  animeStyle: require('../../assets/images/placeholder.png'),
  sciFiStyle: require('../../assets/images/placeholder.png'),
  qStyleCartoon: require('../../assets/images/placeholder.png'),
  militaryStyle: require('../../assets/images/placeholder.png'),
};

// Import logo images
const LOGO_IMAGES = {
  chineseStyle: require('../../assets/images/react-logo.png'),
  westernStyle: require('../../assets/images/react-logo.png'),
  animeStyle: require('../../assets/images/react-logo.png'),
  sciFiStyle: require('../../assets/images/react-logo.png'),
  qStyleCartoon: require('../../assets/images/react-logo.png'),
  militaryStyle: require('../../assets/images/react-logo.png'),
};

const LoginDemo = () => {
  const [selectedTheme, setSelectedTheme] = useState<ThemeStyleType>('chineseStyle');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | undefined>(undefined);

  // Handle theme selection
  const handleThemeChange = (themeStyle: ThemeStyleType) => {
    setSelectedTheme(themeStyle);
    setError(undefined);
  };

  // Mock login function
  const handleLogin = (username: string, password: string) => {
    setLoading(true);
    setError(undefined);

    // Simulate API call
    setTimeout(() => {
      setLoading(false);
      if (username === 'admin' && password === 'password') {
        Alert.alert('登录成功', `欢迎回来, ${username}!`);
      } else {
        setError('用户名或密码错误');
      }
    }, 1500);
  };

  // Mock register function
  const handleRegister = () => {
    Alert.alert('注册', '点击了注册按钮');
  };

  // Mock forgot password function
  const handleForgotPassword = () => {
    Alert.alert('忘记密码', '点击了忘记密码按钮');
  };

  // Go back to main demo page
  const goBack = () => {
    router.back();
  };

  return (
    <ThemeProvider initialThemeStyle={selectedTheme}>
      <StatusBar style="light" />

      <View style={styles.container}>
        <View style={styles.controlPanel}>
          <Button
            title="返回"
            onPress={goBack}
            variant="outlined"
            size="small"
            style={styles.backButton}
          />

          <Text variant="h4" style={styles.themeSelectorTitle}>
            选择登录界面风格:
          </Text>

          <ScrollView
            horizontal
            showsHorizontalScrollIndicator={false}
            style={styles.themeSelectorScroll}
            contentContainerStyle={styles.themeSelectorContent}
          >
            {Object.entries(STYLE_THEMES).map(([key, theme]) => (
              <TouchableOpacity
                key={key}
                style={[
                  styles.themeButton,
                  { backgroundColor: theme.colors.primary },
                  selectedTheme === key && styles.selectedTheme,
                ]}
                onPress={() => handleThemeChange(key as ThemeStyleType)}
              >
                <Text
                  color="#FFFFFF"
                  align="center"
                  style={styles.themeText}
                >
                  {theme.name}
                </Text>
              </TouchableOpacity>
            ))}
          </ScrollView>

          <View style={styles.demoInstructions}>
            <Text variant="body2">
              用户名：admin
            </Text>
            <Text variant="body2">
              密码：password
            </Text>
          </View>
        </View>

        <View style={styles.loginContainer}>
          <LoginScreen
            onLogin={handleLogin}
            onRegister={handleRegister}
            onForgotPassword={handleForgotPassword}
            loading={loading}
            error={error}
            themeStyle={selectedTheme}
            backgroundSource={BACKGROUND_IMAGES[selectedTheme]}
            logoSource={LOGO_IMAGES[selectedTheme]}
          />
        </View>
      </View>
    </ThemeProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  controlPanel: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    zIndex: 10,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    padding: 12,
    paddingTop: 50,
  },
  backButton: {
    marginBottom: 12,
    alignSelf: 'flex-start',
  },
  themeSelectorTitle: {
    color: '#FFFFFF',
    marginBottom: 8,
  },
  themeSelectorScroll: {
    flexDirection: 'row',
  },
  themeSelectorContent: {
    paddingBottom: 8,
  },
  themeButton: {
    paddingHorizontal: 16,
    paddingVertical: 8,
    marginRight: 8,
    borderRadius: 4,
  },
  selectedTheme: {
    borderWidth: 2,
    borderColor: '#FFFFFF',
  },
  themeText: {
    fontWeight: 'bold',
    fontSize: 12,
  },
  demoInstructions: {
    backgroundColor: 'rgba(255, 255, 255, 0.2)',
    padding: 8,
    borderRadius: 4,
    marginTop: 8,
  },
  loginContainer: {
    flex: 1,
  },
});

export default LoginDemo;
</file>

<file path="apps/expo/app/(gameui)/main-interface-demo.tsx">
import React, { useState } from 'react';
import { StyleSheet, View, ScrollView, Alert, Platform } from 'react-native';
import { router } from 'expo-router';
import { StatusBar } from 'expo-status-bar';

import { ThemeProvider } from '../../components/themes/ThemeProvider';
import { Button, Card, Text } from '../../components/core';
import { MainGameInterface, MainGameTabName, GameTab } from '../../components/functions';
import { STYLE_THEMES, ThemeStyleType } from '../../utils/theme';

// Sample game resources
const SAMPLE_RESOURCES = [
  {
    name: 'Gold',
    value: 1250,
    icon: require('../../assets/images/placeholder.png'),
    color: '#FFD700'
  },
  {
    name: 'Gems',
    value: 56,
    icon: require('../../assets/images/placeholder.png'),
    color: '#00BFA5'
  },
  {
    name: 'Energy',
    value: 23,
    icon: require('../../assets/images/placeholder.png'),
    color: '#2979FF'
  }
];

// Sample notifications
const SAMPLE_NOTIFICATIONS = [
  {
    id: '1',
    title: 'Welcome to the Game!',
    message: 'Thank you for trying our game interface demo. Explore the different tabs!',
    isNew: true,
    time: 'Just now',
    action: () => Alert.alert('Welcome', 'This is a sample notification action.')
  },
  {
    id: '2',
    title: 'Daily Rewards Available',
    message: 'Claim your daily login bonus in the rewards center.',
    time: '2 hours ago'
  },
  {
    id: '3',
    title: 'Friend Request',
    message: 'Player "GameMaster" wants to add you as a friend.',
    isNew: true,
    time: '3 hours ago'
  }
];

// Sample tabs for navigation
const SAMPLE_TABS: GameTab[] = [
  {
    name: 'home',
    label: 'Home',
    icon: 'home',
    badgeCount: 0
  },
  {
    name: 'shop',
    label: 'Shop',
    icon: 'shop',
    badgeCount: 2
  },
  {
    name: 'inventory',
    label: 'Items',
    icon: 'inventory',
    badgeCount: 0
  },
  {
    name: 'tasks',
    label: 'Tasks',
    icon: 'tasks',
    badgeCount: 5
  },
  {
    name: 'social',
    label: 'Social',
    icon: 'social',
    badgeCount: 3
  }
];

const MainInterfaceDemo = () => {
  const [selectedTheme, setSelectedTheme] = useState<ThemeStyleType>('chineseStyle');
  const [currentTab, setCurrentTab] = useState<MainGameTabName>('home');

  // Handle theme selection
  const handleThemeChange = (themeStyle: ThemeStyleType) => {
    setSelectedTheme(themeStyle);
  };

  // Go back to main demo page
  const goBack = () => {
    router.back();
  };

  // Handle tab change
  const handleTabChange = (tab: MainGameTabName) => {
    setCurrentTab(tab);
  };

  // Tab content based on current tab
  const renderTabContent = () => {
    switch (currentTab) {
      case 'home':
        return (
          <ScrollView style={styles.tabContent}>
            <Card title="Welcome" style={styles.welcomeCard}>
              <Text>
                This is a demo of the main game interface component. You can use this component
                as a base for your game UI, customizing it with different themes and content.
              </Text>
              <Text style={styles.instructionText}>
                Try changing the theme style and interacting with different UI elements.
              </Text>
            </Card>

            <Card title="Daily Quests" style={styles.contentCard}>
              <View style={styles.questItem}>
                <Text variant="body2">Complete 3 battles</Text>
                <Text variant="caption" color="#4CAF50">2/3</Text>
              </View>
              <View style={styles.questItem}>
                <Text variant="body2">Collect 10 resources</Text>
                <Text variant="caption" color="#4CAF50">5/10</Text>
              </View>
              <View style={styles.questItem}>
                <Text variant="body2">Upgrade equipment</Text>
                <Text variant="caption" color="#F44336">0/1</Text>
              </View>
            </Card>

            <Card title="News & Events" style={styles.contentCard}>
              <Text variant="body2" style={styles.eventTitle}>
                Summer Festival
              </Text>
              <Text variant="caption">
                Join the celebration with special rewards and limited-time quests!
              </Text>
              <Button
                title="View Details"
                size="small"
                style={styles.eventButton}
                onPress={() => Alert.alert('Event', 'Summer Festival details would show here.')}
              />
            </Card>
          </ScrollView>
        );
      case 'shop':
        return (
          <View style={styles.tabContent}>
            <Text variant="h3" align="center">Shop Tab</Text>
            <Text variant="body1" align="center" style={styles.comingSoonText}>
              Shop interface coming soon!
            </Text>
          </View>
        );
      case 'inventory':
        return (
          <View style={styles.tabContent}>
            <Text variant="h3" align="center">Inventory Tab</Text>
            <Text variant="body1" align="center" style={styles.comingSoonText}>
              Inventory interface coming soon!
            </Text>
          </View>
        );
      case 'tasks':
        return (
          <View style={styles.tabContent}>
            <Text variant="h3" align="center">Tasks Tab</Text>
            <Text variant="body1" align="center" style={styles.comingSoonText}>
              Tasks interface coming soon!
            </Text>
          </View>
        );
      case 'social':
        return (
          <View style={styles.tabContent}>
            <Text variant="h3" align="center">Social Tab</Text>
            <Text variant="body1" align="center" style={styles.comingSoonText}>
              Social interface coming soon!
            </Text>
          </View>
        );
      default:
        return null;
    }
  };

  return (
    <ThemeProvider initialThemeStyle={selectedTheme}>
      <StatusBar style="light" />

      <View style={styles.container}>
        <View style={styles.controlPanel}>
          <Button
            title="Back to Menu"
            onPress={goBack}
            variant="outlined"
            size="small"
            style={styles.backButton}
          />

          <Text variant="body1" style={styles.themeSelectorTitle}>
            Select Theme Style:
          </Text>

          <ScrollView
            horizontal
            showsHorizontalScrollIndicator={false}
            style={styles.themeSelectorScroll}
          >
            {Object.entries(STYLE_THEMES).map(([key, theme]) => (
              <Button
                key={key}
                title={theme.name}
                onPress={() => handleThemeChange(key as ThemeStyleType)}
                variant={selectedTheme === key ? 'primary' : 'outline'}
                size="small"
                style={styles.themeButton}
              />
            ))}
          </ScrollView>
        </View>

        <View style={styles.gameContainer}>
          <MainGameInterface
            playerName="GamePlayer"
            playerLevel={42}
            playerExp={{ current: 850, max: 1000 }}
            resources={SAMPLE_RESOURCES}
            notifications={SAMPLE_NOTIFICATIONS}
            gameTitle="Adventure Quest"
            tabs={SAMPLE_TABS}
            currentTab={currentTab}
            onTabChange={handleTabChange}
            themeStyle={selectedTheme}
            onSettingsPress={() => Alert.alert('Settings', 'Settings menu would open here.')}
            onProfilePress={() => Alert.alert('Profile', 'Player profile would open here.')}
          >
            {renderTabContent()}
          </MainGameInterface>
        </View>
      </View>
    </ThemeProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#121212',
  },
  controlPanel: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    zIndex: 10,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    padding: 12,
    paddingTop: Platform.OS === 'ios' ? 50 : 30,
  },
  backButton: {
    marginBottom: 8,
  },
  themeSelectorTitle: {
    color: '#FFFFFF',
    marginBottom: 8,
  },
  themeSelectorScroll: {
    flexDirection: 'row',
    paddingBottom: 8,
  },
  themeButton: {
    marginRight: 8,
  },
  gameContainer: {
    flex: 1,
    paddingTop: Platform.OS === 'ios' ? 110 : 90, // Adjust for control panel
  },
  tabContent: {
    flex: 1,
    paddingVertical: 16,
  },
  welcomeCard: {
    marginBottom: 16,
  },
  instructionText: {
    marginTop: 8,
    fontStyle: 'italic',
  },
  contentCard: {
    marginBottom: 16,
  },
  questItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 8,
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderBottomColor: 'rgba(0, 0, 0, 0.1)',
  },
  eventTitle: {
    fontWeight: 'bold',
    marginBottom: 4,
  },
  eventButton: {
    marginTop: 12,
    alignSelf: 'flex-end',
  },
  comingSoonText: {
    marginTop: 24,
    opacity: 0.7,
    fontStyle: 'italic',
  },
});

export default MainInterfaceDemo;
</file>

<file path="apps/expo/app/(gameui)/theme-explorer.tsx">
import React, { useState } from 'react';
import { StyleSheet, View, ScrollView, SafeAreaView, StatusBar, Platform } from 'react-native';
import { ThemeProvider } from '../../components/themes/ThemeProvider';
import { Button, Text, Card, Input, LoadingIndicator } from '../../components/core';
import { ThemeStyleType, STYLE_THEMES } from '../../utils/theme';
import { router } from 'expo-router';

export default function ThemeShowcase() {
  const [currentTheme, setCurrentTheme] = useState<ThemeStyleType>('chineseStyle');
  const [inputValue, setInputValue] = useState('');
  const [loading, setLoading] = useState(false);

  // Navigation
  const navigateTo = (path: string) => {
    router.push(path);
  };

  // Toggle loading state
  const toggleLoading = () => {
    setLoading(prev => !prev);
  };

  return (
    <ThemeProvider initialThemeStyle={currentTheme}>
      <SafeAreaView style={styles.safeArea}>
        <StatusBar barStyle="dark-content" />

        <View style={styles.header}>
          <Text variant="h2" align="center">Game UI Theme Explorer</Text>
          <Text variant="body1" align="center" style={styles.subtitle}>
            Experience different visual styles for your game UI
          </Text>
        </View>

        {/* Theme Selector */}
        <View style={styles.themeSelector}>
          <Text variant="h4">Select Theme Style:</Text>
          <ScrollView
            horizontal
            showsHorizontalScrollIndicator={false}
            contentContainerStyle={styles.themeSelectorContent}
          >
            {Object.entries(STYLE_THEMES).map(([key, theme]) => (
              <Button
                key={key}
                title={theme.name}
                onPress={() => setCurrentTheme(key as ThemeStyleType)}
                variant={currentTheme === key ? 'primary' : 'outline'}
                size="small"
                style={styles.themeButton}
              />
            ))}
          </ScrollView>
        </View>

        <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>
          {/* Current Theme Info */}
          <Card title="Current Theme" style={styles.section}>
            <Text variant="body1">
              <Text style={styles.bold}>Name:</Text> {STYLE_THEMES[currentTheme].name}
            </Text>
            <Text variant="body1">
              <Text style={styles.bold}>ID:</Text> {currentTheme}
            </Text>

            <View style={styles.colorPalette}>
              <Text variant="body2" style={styles.colorPaletteTitle}>Color Palette:</Text>
              <View style={styles.colorGrid}>
                {Object.entries(STYLE_THEMES[currentTheme].colors).map(([colorName, colorValue]) => (
                  <View key={colorName} style={styles.colorItem}>
                    <View style={[styles.colorSwatch, { backgroundColor: colorValue }]} />
                    <Text variant="caption">{colorName}</Text>
                  </View>
                ))}
              </View>
            </View>
          </Card>

          {/* Button Showcase */}
          <Card title="Buttons" style={styles.section}>
            <View style={styles.componentRow}>
              <Button
                title="Primary"
                variant="primary"
                onPress={() => {}}
                style={styles.componentItem}
              />
              <Button
                title="Secondary"
                variant="secondary"
                onPress={() => {}}
                style={styles.componentItem}
              />
            </View>

            <View style={styles.componentRow}>
              <Button
                title="Outline"
                variant="outline"
                onPress={() => {}}
                style={styles.componentItem}
              />
              <Button
                title="Text"
                variant="text"
                onPress={() => {}}
                style={styles.componentItem}
              />
            </View>

            <View style={styles.componentRow}>
              <Button
                title="Small"
                size="small"
                onPress={() => {}}
                style={styles.componentItem}
              />
              <Button
                title="Medium"
                size="medium"
                onPress={() => {}}
                style={styles.componentItem}
              />
              <Button
                title="Large"
                size="large"
                onPress={() => {}}
                style={styles.componentItem}
              />
            </View>

            <View style={styles.componentRow}>
              <Button
                title="Loading"
                loading={true}
                onPress={() => {}}
                style={styles.componentItem}
              />
              <Button
                title="Disabled"
                disabled={true}
                onPress={() => {}}
                style={styles.componentItem}
              />
            </View>
          </Card>

          {/* Text Showcase */}
          <Card title="Typography" style={styles.section}>
            <Text variant="h1">Heading 1</Text>
            <Text variant="h2">Heading 2</Text>
            <Text variant="h3">Heading 3</Text>
            <Text variant="h4">Heading 4</Text>
            <Text variant="body1">Body Text 1 - Standard paragraph text.</Text>
            <Text variant="body2">Body Text 2 - Smaller paragraph text.</Text>
            <Text variant="caption">Caption Text - Used for supplementary information.</Text>
            <Text variant="button">BUTTON TEXT</Text>
            <Text variant="overline">OVERLINE TEXT</Text>
          </Card>

          {/* Card Showcase */}
          <Card title="Cards" style={styles.section}>
            <Card
              title="Default Card"
              variant="default"
              style={styles.nestedCard}
            >
              <Text>This is a default card.</Text>
            </Card>

            <Card
              title="Outlined Card"
              variant="outlined"
              style={styles.nestedCard}
            >
              <Text>This is an outlined card.</Text>
            </Card>

            <Card
              title="Elevated Card"
              variant="elevated"
              style={styles.nestedCard}
            >
              <Text>This is an elevated card.</Text>
            </Card>

            <Card
              title="Interactive Card"
              variant="elevated"
              style={styles.nestedCard}
              onPress={() => alert('Card pressed')}
            >
              <Text>Tap this card to trigger an action.</Text>
            </Card>
          </Card>

          {/* Input Showcase */}
          <Card title="Input Fields" style={styles.section}>
            <Input
              label="Default Input"
              value={inputValue}
              onChangeText={setInputValue}
              placeholder="Enter some text"
              style={styles.input}
            />

            <Input
              label="Outlined Input"
              value={inputValue}
              onChangeText={setInputValue}
              placeholder="Enter some text"
              variant="outlined"
              style={styles.input}
            />

            <Input
              label="Filled Input"
              value={inputValue}
              onChangeText={setInputValue}
              placeholder="Enter some text"
              variant="filled"
              style={styles.input}
            />

            <Input
              label="Password Input"
              value={inputValue}
              onChangeText={setInputValue}
              placeholder="Enter password"
              secureTextEntry
              style={styles.input}
            />

            <Input
              label="Error Input"
              value={inputValue}
              onChangeText={setInputValue}
              placeholder="Enter some text"
              error="This field has an error"
              style={styles.input}
            />

            <Input
              label="Disabled Input"
              value="This input is disabled"
              onChangeText={() => {}}
              disabled
              style={styles.input}
            />
          </Card>

          {/* Loading Indicator Showcase */}
          <Card title="Loading Indicators" style={styles.section}>
            <Button
              title={loading ? "Stop Loading" : "Start Loading"}
              onPress={toggleLoading}
              style={styles.loadingButton}
            />

            <View style={styles.loadingContainer}>
              <View style={styles.loadingItem}>
                <Text variant="caption" align="center">Small</Text>
                <LoadingIndicator loading={loading} size="small" />
              </View>

              <View style={styles.loadingItem}>
                <Text variant="caption" align="center">Medium</Text>
                <LoadingIndicator loading={loading} size="medium" />
              </View>

              <View style={styles.loadingItem}>
                <Text variant="caption" align="center">Large</Text>
                <LoadingIndicator loading={loading} size="large" />
              </View>
            </View>

            <View style={styles.loadingWithText}>
              <LoadingIndicator
                loading={loading}
                message="Loading game assets..."
                size="medium"
              />
            </View>
          </Card>

          {/* Functional Components Showcase */}
          <Card title="Functional Components" style={styles.section}>
            <Text variant="body1" style={styles.componentDesc}>
              Explore complete game UI components built with our core components.
            </Text>

            <View style={styles.componentLinks}>
              <Button
                title="Login Screen"
                onPress={() => navigateTo('/(gameui)/login-demo')}
                style={styles.componentLink}
              />

              <Button
                title="Main Game Interface"
                onPress={() => navigateTo('/(gameui)/main-interface-demo')}
                style={styles.componentLink}
              />

              <Button
                title="All Components"
                onPress={() => navigateTo('/(gameui)')}
                style={styles.componentLink}
              />
            </View>
          </Card>

          {/* Accessibility Guide */}
          <Card title="Accessibility Features" style={styles.section}>
            <Text variant="body1" style={styles.componentDesc}>
              Learn how to create accessible game interfaces that can be enjoyed by all players.
            </Text>

            <View style={styles.componentLinks}>
              <Button
                title="Accessibility Guide"
                onPress={() => navigateTo('/(gameui)/accessibility-guide')}
                style={styles.componentLink}
                variant="primary"
              />
            </View>
          </Card>

        </ScrollView>
      </SafeAreaView>
    </ThemeProvider>
  );
}

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#f5f5f5',
  },
  header: {
    paddingTop: Platform.OS === 'ios' ? 10 : 30,
    paddingBottom: 16,
    paddingHorizontal: 16,
    backgroundColor: '#fff',
  },
  subtitle: {
    opacity: 0.7,
    marginTop: 4,
  },
  themeSelector: {
    backgroundColor: '#fff',
    paddingHorizontal: 16,
    paddingBottom: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e0e0e0',
  },
  themeSelectorContent: {
    paddingTop: 8,
  },
  themeButton: {
    marginRight: 8,
  },
  container: {
    flex: 1,
  },
  contentContainer: {
    padding: 16,
    paddingBottom: 32,
  },
  section: {
    marginBottom: 16,
  },
  bold: {
    fontWeight: 'bold',
  },
  colorPalette: {
    marginTop: 12,
  },
  colorPaletteTitle: {
    marginBottom: 8,
  },
  colorGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  colorItem: {
    width: '25%',
    alignItems: 'center',
    marginBottom: 12,
  },
  colorSwatch: {
    width: 40,
    height: 40,
    borderRadius: 20,
    marginBottom: 4,
    borderWidth: 1,
    borderColor: 'rgba(0, 0, 0, 0.1)',
  },
  componentRow: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    marginBottom: 12,
  },
  componentItem: {
    marginRight: 8,
    marginBottom: 8,
  },
  nestedCard: {
    marginBottom: 12,
  },
  input: {
    marginBottom: 12,
  },
  loadingButton: {
    marginBottom: 16,
  },
  loadingContainer: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    marginBottom: 16,
    backgroundColor: 'rgba(0, 0, 0, 0.05)',
    padding: 16,
    borderRadius: 8,
  },
  loadingItem: {
    alignItems: 'center',
  },
  loadingWithText: {
    height: 100,
    backgroundColor: 'rgba(0, 0, 0, 0.05)',
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
  componentDesc: {
    marginBottom: 16,
  },
  componentLinks: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  componentLink: {
    marginRight: 8,
    marginBottom: 8,
  },
});
</file>

<file path="apps/expo/app/(tabs)/account.tsx">
import { SignedIn, SignedOut, useClerk, useUser } from "@clerk/clerk-expo";
import { Link, router } from "expo-router";
import { 
  View, 
  Text, 
  StyleSheet, 
  TouchableOpacity, 
  ScrollView, 
  Dimensions,
  ActivityIndicator,
  Image,
  Animated,
  Modal,
} from "react-native";
import { useState, useRef, useEffect } from "react";
import { api } from "@/utils/api";
import { MaterialIcons } from '@expo/vector-icons';

const STYLES = [
  { 
    id: 'classical painting', 
    label: 'Classical Painting',
    image: require('@/assets/styles/classical.png')
  },
  { 
    id: 'ethereal animated fairy', 
    label: 'Ethereal Fairy',
    image: require('@/assets/styles/ethereal.png')
  },
  { 
    id: 'childrens book', 
    label: 'Children\'s Book',
    image: require('@/assets/styles/childrens.png')
  },
  { 
    id: '3d animated style', 
    label: '3D Animated',
    image: require('@/assets/styles/3d.png')
  },
] as const;

const { width, height } = Dimensions.get('window');
const ITEM_WIDTH = width * 0.9;
const ITEM_HEIGHT = height * 0.65;
const SPACING = 15;

const getStyleById = (id: string | undefined) => {
  return STYLES.find(style => style.id === id) ?? STYLES[0];
};

export default function AccountPage() {
  const auth = useUser();
  const { user, isLoaded, isSignedIn } = auth;
  const { signOut } = useClerk();
  const [showStyleSelector, setShowStyleSelector] = useState(false);
  const [activeIndex, setActiveIndex] = useState(0);
  const scrollX = useRef(new Animated.Value(0)).current;
  const scrollRef = useRef<ScrollView>(null);
  const [showSignOutModal, setShowSignOutModal] = useState(false);

  const utils = api.useContext();
  const preferences = api.user.getPreferences.useQuery();
  const updateStyle = api.user.updateArtStyle.useMutation({
    onSuccess: () => {
      utils.user.getPreferences.invalidate();
      // Animate back to account view after successful update
      setShowStyleSelector(false);
    },
  });

  const slideAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    if (showStyleSelector) {
      Animated.spring(slideAnim, {
        toValue: -width,
        useNativeDriver: true,
        tension: 180,
        friction: 26,
        restDisplacementThreshold: 0.01,
        restSpeedThreshold: 0.01,
      }).start();
    } else {
      Animated.spring(slideAnim, {
        toValue: 0,
        useNativeDriver: true,
        tension: 180,
        friction: 26,
        restDisplacementThreshold: 0.01,
        restSpeedThreshold: 0.01,
      }).start();
    }
  }, [showStyleSelector]);

  const handleSignOut = async () => {
    await signOut();
    router.replace('/(auth)/sign-in');
  };

  const handleStyleSelect = () => {
    const selectedStyle = STYLES[activeIndex].id;
    if (selectedStyle !== preferences.data?.artStyle) {
      updateStyle.mutate(selectedStyle);
    }
  };

  return (
    <View style={styles.container}>
      <Animated.View style={[
        styles.slidingContainer,
        { transform: [{ translateX: slideAnim }] }
      ]}>
        {/* Account View */}
        <View style={styles.page}>
          <Text style={styles.text}>Account Page</Text>
          <SignedIn>
            <View style={styles.content}>
              <Text style={styles.email}>Hello {user?.emailAddresses[0].emailAddress}</Text>
              
              <TouchableOpacity
                style={styles.styleButton}
                onPress={() => setShowStyleSelector(true)}
              >
                <View style={styles.styleButtonContent}>
                  <View style={styles.stylePreviewContainer}>
                    <Image
                      source={getStyleById(preferences.data?.artStyle).image}
                      style={styles.stylePreviewImage}
                      resizeMode="cover"
                    />
                    <View style={styles.stylePreviewOverlay} />
                  </View>
                  <View style={styles.styleButtonText}>
                    <Text style={styles.styleButtonTitle}>Select an art style</Text>
                    <Text style={styles.currentStyle}>
                      {getStyleById(preferences.data?.artStyle).label}
                    </Text>
                  </View>
                  <MaterialIcons name="chevron-right" size={24} color="#fff" />
                </View>
              </TouchableOpacity>

              <TouchableOpacity
                onPress={() => setShowSignOutModal(true)}
                style={styles.signOutButton}
              >
                <Text style={styles.signOutText}>Sign Out</Text>
              </TouchableOpacity>
            </View>
          </SignedIn>
          <SignedOut>
            <View style={styles.authLinks}>
              <Link href="/(auth)/sign-in">
                <Text>Sign In</Text>
              </Link>
              <Link href="/(auth)/sign-up">
                <Text>Sign Up</Text>
              </Link>
            </View>
          </SignedOut>
        </View>

        {/* Style Selector View */}
        <View style={styles.page}>
          <View style={styles.header}>
            <TouchableOpacity 
              onPress={() => setShowStyleSelector(false)}
              style={styles.backButton}
            >
              <MaterialIcons name="arrow-back" size={24} color="#333" />
              <Text style={styles.headerTitle}>Select Style</Text>
            </TouchableOpacity>
          </View>

          <View style={styles.carouselContainer}>
            <Animated.ScrollView
              ref={scrollRef}
              horizontal
              pagingEnabled
              snapToInterval={ITEM_WIDTH + SPACING}
              decelerationRate="fast"
              contentContainerStyle={styles.scrollContent}
              showsHorizontalScrollIndicator={false}
              onScroll={Animated.event(
                [{ nativeEvent: { contentOffset: { x: scrollX } } }],
                { useNativeDriver: false }
              )}
              scrollEventThrottle={16}
              onMomentumScrollEnd={(e) => {
                const index = Math.round(
                  e.nativeEvent.contentOffset.x / (ITEM_WIDTH + SPACING)
                );
                setActiveIndex(index);
              }}
            >
              {STYLES.map((style, index) => {
                const inputRange = [
                  (index - 1) * (ITEM_WIDTH + SPACING),
                  index * (ITEM_WIDTH + SPACING),
                  (index + 1) * (ITEM_WIDTH + SPACING),
                ];
                
                const scale = scrollX.interpolate({
                  inputRange,
                  outputRange: [0.9, 1, 0.9],
                  extrapolate: 'clamp',
                });

                return (
                  <Animated.View
                    key={style.id}
                    style={[
                      styles.styleCard,
                      { 
                        width: ITEM_WIDTH,
                        transform: [{ scale }],
                      },
                    ]}
                  >
                    <View style={styles.cardContent}>
                      <View style={styles.imageWrapper}>
                        <Image
                          source={style.image}
                          style={styles.styleImage}
                          resizeMode="cover"
                        />
                      </View>
                      <Text style={styles.styleText}>{style.label}</Text>
                    </View>
                  </Animated.View>
                );
              })}
            </Animated.ScrollView>
          </View>

          <TouchableOpacity
            style={[
              styles.selectButton,
              updateStyle.isPending && styles.loadingButton,
              preferences.data?.artStyle === STYLES[activeIndex].id && styles.selectedButton,
            ]}
            onPress={handleStyleSelect}
            disabled={updateStyle.isPending || preferences.data?.artStyle === STYLES[activeIndex].id}
          >
            {updateStyle.isPending ? (
              <ActivityIndicator color="#fff" />
            ) : preferences.data?.artStyle === STYLES[activeIndex].id ? (
              <View style={styles.selectedContent}>
                <Text style={styles.selectButtonText}>Selected</Text>
                <MaterialIcons name="check" size={20} color="#fff" />
              </View>
            ) : (
              <Text style={styles.selectButtonText}>Select this style</Text>
            )}
          </TouchableOpacity>
        </View>

        <Modal
          animationType="fade"
          transparent={true}
          visible={showSignOutModal}
          onRequestClose={() => setShowSignOutModal(false)}
        >
          <View style={styles.modalOverlay}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitle}>Sign Out</Text>
              <Text style={styles.modalText}>Are you sure you want to sign out?</Text>
              <View style={styles.modalButtons}>
                <TouchableOpacity
                  style={[styles.modalButton, styles.cancelButton]}
                  onPress={() => setShowSignOutModal(false)}
                >
                  <Text style={styles.cancelButtonText}>Cancel</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={[styles.modalButton, styles.confirmButton]}
                  onPress={handleSignOut}
                >
                  <Text style={styles.confirmButtonText}>Sign Out</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </Modal>
      </Animated.View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#121212",
    overflow: 'hidden',
  },
  slidingContainer: {
    flex: 1,
    flexDirection: 'row',
    width: width * 2,
  },
  page: {
    width,
    flex: 1,
    backgroundColor: "#121212",
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
    paddingTop: 40,
  },
  backButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: "#F5F5F5",
  },
  content: {
    flex: 1,
    alignItems: "center",
    paddingTop: 20,
  },
  text: {
    fontSize: 24,
    color: "#F5F5F5",
    marginTop: 40,
    marginBottom: 20,
    textAlign: 'center',
  },
  email: {
    fontSize: 16,
    marginBottom: 30,
    color: "#F5F5F5",
  },
  styleButton: {
    backgroundColor: '#1E1E1E',
    borderRadius: 16,
    width: '90%',
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#333333',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  styleButtonContent: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
  },
  stylePreviewContainer: {
    width: 45,
    height: 45,
    borderRadius: 12,
    overflow: 'hidden',
    position: 'relative',
    marginRight: 12,
    borderWidth: 1,
    borderColor: '#333333',
  },
  stylePreviewImage: {
    width: '100%',
    height: '100%',
  },
  stylePreviewOverlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.1)',
  },
  styleButtonText: {
    flex: 1,
  },
  styleButtonTitle: {
    color: '#F5F5F5',
    fontSize: 16,
    fontWeight: '600',
  },
  currentStyle: {
    color: '#A0A0A0',
    fontSize: 13,
    marginTop: 2,
  },
  signOutButton: {
    backgroundColor: '#1E1E1E',
    padding: 16,
    borderRadius: 16,
    marginTop: 30,
    width: '90%',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#333333',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  signOutText: {
    color: '#FF453A',
    fontWeight: '600',
    fontSize: 16,
  },
  authLinks: {
    alignItems: 'center',
    gap: 10,
  },
  carouselContainer: {
    flex: 1,
    position: 'relative',
  },
  styleCard: {
    marginHorizontal: SPACING / 2,
    height: ITEM_HEIGHT,
    justifyContent: 'center',
  },
  cardContent: {
    flex: 1,
    alignItems: 'center',
    gap: 12,
  },
  imageWrapper: {
    width: '100%',
    height: '85%',
    borderRadius: 20,
    overflow: 'hidden',
    backgroundColor: 'transparent',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.5,
    shadowRadius: 8,
    elevation: 8,
  },
  styleImage: {
    width: '100%',
    height: '100%',
    borderRadius: 20,
    backgroundColor: 'transparent',
  },
  styleText: {
    fontSize: 18,
    fontWeight: '600',
    textAlign: 'center',
    color: '#F5F5F5',
    backgroundColor: '#1E1E1E',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 10,
  },
  selectButton: {
    backgroundColor: '#007AFF',
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginTop: 20,
    marginHorizontal: 20,
    alignItems: 'center',
  },
  loadingButton: {
    backgroundColor: '#999',
  },
  selectedButton: {
    backgroundColor: '#34C759',
  },
  selectedContent: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  selectButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  scrollContent: {
    paddingHorizontal: (width - ITEM_WIDTH) / 2 - SPACING / 2,
    paddingVertical: 20,
    paddingBottom: 50,
  },
  pagination: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    height: 40,
    marginTop: 20,
  },
  dot: {
    height: 8,
    borderRadius: 4,
    backgroundColor: '#007AFF',
    marginHorizontal: 4,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#1E1E1E',
    borderRadius: 16,
    padding: 20,
    width: '85%',
    borderWidth: 1,
    borderColor: '#333333',
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#F5F5F5',
    marginBottom: 10,
    textAlign: 'center',
  },
  modalText: {
    fontSize: 16,
    color: '#A0A0A0',
    marginBottom: 20,
    textAlign: 'center',
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 10,
  },
  modalButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
  },
  cancelButton: {
    backgroundColor: '#2C2C2E',
    borderWidth: 1,
    borderColor: '#333333',
  },
  confirmButton: {
    backgroundColor: '#FF453A',
  },
  cancelButtonText: {
    color: '#F5F5F5',
    fontSize: 16,
    fontWeight: '600',
  },
  confirmButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
});
</file>

<file path="apps/expo/app/(tabs)/add.tsx">
import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Animated,
  ActivityIndicator,
  KeyboardAvoidingView,
  Platform,
  TouchableWithoutFeedback,
  Keyboard,
} from "react-native";
import { MaterialIcons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { api } from "@/utils/api";

const PROMPTS = [
  "What just happened?",
  "What's the tea?",
  "Spill the beans...",
  "Something interesting?",
  "Who did what now?",
] as const;

export default function AddMoment() {
  const [text, setText] = useState("");
  const [isWriting, setIsWriting] = useState(false);
  const promptFade = React.useRef(new Animated.Value(0)).current;
  const inputFade = React.useRef(new Animated.Value(0)).current;
  const [showSuccess, setShowSuccess] = useState(false);

  const { data: moments } = api.moments.getAll.useQuery();
  const utils = api.useContext();

  useEffect(() => {
    fadePromptIn().start();
  }, []);

  const fadePromptOut = () => {
    return Animated.timing(promptFade, {
      toValue: 0,
      duration: 200,
      useNativeDriver: true,
    });
  };

  const fadePromptIn = () => {
    return Animated.timing(promptFade, {
      toValue: 1,
      duration: 200,
      useNativeDriver: true,
    });
  };

  const fadeInputIn = () => {
    return Animated.timing(inputFade, {
      toValue: 1,
      duration: 200,
      useNativeDriver: true,
    });
  };

  const fadeInputOut = () => {
    return Animated.timing(inputFade, {
      toValue: 0,
      duration: 200,
      useNativeDriver: true,
    });
  };

  const handleStartWriting = () => {
    setIsWriting(true);
    Animated.parallel([
      fadePromptOut(),
      fadeInputIn(),
    ]).start();
  };

  const handleKeyboardDismiss = () => {
    Keyboard.dismiss();
    if (!text.trim()) {
      Animated.parallel([
        fadePromptIn(),
        fadeInputOut(),
      ]).start(() => {
        setIsWriting(false);
        fadePromptIn().start();
      });
    }
  };

  const addMoment = api.moments.add.useMutation({
    onSuccess: () => {
      setShowSuccess(true);
      Keyboard.dismiss();
      setTimeout(() => {
        Animated.parallel([
          fadePromptIn(),
          fadeInputOut(),
        ]).start(() => {
          setShowSuccess(false);
          setText("");
          setIsWriting(false);
          fadePromptIn().start();
        });
      }, 1500);
      utils.moments.getAll.invalidate();
    },
  });

  const handleAddMoment = async () => {
    if (!text.trim()) return;
    await addMoment.mutateAsync(text);
  };

  return (
    <View style={styles.container}>
      <KeyboardAvoidingView 
        behavior={Platform.OS === "ios" ? "padding" : "height"}
        style={styles.mainContent}
      >
        <TouchableWithoutFeedback onPress={handleKeyboardDismiss}>
          <View style={styles.content}>
            <Animated.View 
              style={[
                styles.promptSection, 
                { opacity: promptFade },
                isWriting && styles.hidden
              ]}
            >
              <Text style={styles.promptText}>
                {PROMPTS[Math.floor(Math.random() * PROMPTS.length)]}
              </Text>
              <TouchableOpacity
                style={styles.startButton}
                onPress={handleStartWriting}
              >
                <Text style={styles.buttonText}>Add a moment</Text>
                <MaterialIcons name="add" size={20} color="#F5F5F5" />
              </TouchableOpacity>
            </Animated.View>

            <Animated.View 
              style={[
                styles.writeSection, 
                { 
                  opacity: inputFade,
                },
                !isWriting && styles.hidden
              ]}
            >
              <TextInput
                style={styles.input}
                value={text}
                onChangeText={setText}
                multiline
                autoFocus
                textAlign="center"
                textAlignVertical="center"
              />
              {text.trim().length > 0 && (
                <TouchableOpacity
                  style={[
                    styles.addButton,
                    { opacity: addMoment.isPending ? 0.7 : showSuccess ? 1 : 0.7 }
                  ]}
                  onPress={handleAddMoment}
                  disabled={addMoment.isPending || showSuccess}
                >
                  <View style={styles.buttonContent}>
                    {addMoment.isPending ? (
                      <ActivityIndicator color="#F5F5F5" />
                    ) : showSuccess ? (
                      <MaterialIcons name="check" size={24} color="#4CAF50" />
                    ) : (
                      <>
                        <Text style={styles.buttonText}>Add moment</Text>
                        <MaterialIcons 
                          name="add-circle-outline" 
                          size={20} 
                          color="#F5F5F5" 
                          style={{marginLeft: 8}} 
                        />
                      </>
                    )}
                  </View>
                </TouchableOpacity>
              )}
            </Animated.View>
          </View>
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>

      <View style={styles.momentsPreview}>
        <Text style={styles.previewTitle}>Today's Moments</Text>
        <View style={styles.orbContainer}>
          {moments?.map((moment, index) => (
            <LinearGradient
              key={moment.id}
              colors={['#1A1A1A', '#2C2C2E']}
              style={styles.orbWrapper}
            >
              <LinearGradient
                colors={['#4169E1', '#1E90FF']}
                style={styles.orb}
                start={{ x: 0, y: 0 }}
                end={{ x: 1, y: 1 }}
              />
            </LinearGradient>
          ))}
          {(!moments || moments.length === 0) && (
            <Text style={styles.emptyText}>No moments yet today</Text>
          )}
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#121212',
  },
  mainContent: {
    flex: 1,
  },
  content: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
  },
  promptSection: {
    alignItems: 'center',
    marginTop: -100,
  },
  promptText: {
    fontSize: 24,
    color: '#F5F5F5',
    textAlign: 'center',
    marginBottom: 30,
    fontWeight: '600',
  },
  writeSection: {
    position: 'absolute',
    top: '40%',
    left: 0,
    right: 0,
    justifyContent: 'center',
    alignItems: 'center',
  },
  input: {
    fontSize: 24,
    color: '#FFFFFF',
    width: '100%',
    textAlign: 'center',
    padding: 20,
  },
  startButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#1E1E1E',
    padding: 16,
    borderRadius: 12,
    gap: 8,
    borderWidth: 1,
    borderColor: '#333',
  },
  addButton: {
    backgroundColor: '#1E1E1E',
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 12,
    marginTop: 20,
    borderWidth: 1,
    borderColor: '#333',
  },
  buttonText: {
    color: '#F5F5F5',
    fontSize: 16,
    fontWeight: '600',
  },
  momentsPreview: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    padding: 20,
    backgroundColor: '#121212',
  },
  previewTitle: {
    fontSize: 18,
    color: '#F5F5F5',
    marginBottom: 16,
    fontWeight: '600',
  },
  orbContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
    justifyContent: 'center',
    padding: 16,
    backgroundColor: '#1A1A1A',
    borderRadius: 16,
    borderWidth: 1,
    borderColor: '#333',
    minHeight: 60,
    alignItems: 'center',
  },
  orbWrapper: {
    padding: 2,
    borderRadius: 14,
  },
  orb: {
    width: 24,
    height: 24,
    borderRadius: 12,
    shadowColor: '#4169E1',
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.4,
    shadowRadius: 4,
  },
  buttonContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: 24,
  },
  emptyText: {
    color: '#666',
    fontSize: 14,
  },
  hidden: {
    display: 'none',
  },
});
</file>

<file path="apps/expo/app/(tabs)/lore.tsx">
import React, {useState, useRef, useEffect} from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Image,
  RefreshControl,
  ActivityIndicator,
  Animated,
  Dimensions,
} from "react-native";
import {api} from "@/utils/api";
import { PanGestureHandler, State } from "react-native-gesture-handler";
import { GestureHandlerRootView } from "react-native-gesture-handler";
import { Ionicons } from '@expo/vector-icons';

const { width } = Dimensions.get('window');

// Construct R2 URL using account ID
const R2_PUBLIC_URL = `https://pub-17ae87fb525c458eb847cb91755fc43b.r2.dev`;

export const getTypeBadgeColor = (type: string) => {
  switch (type) {
    case 'Daily':
      return '#2196f3';
    case 'Weekly':
      return '#4CAF50';
    case 'Monthly':
      return '#FF9800';
    default:
      return '#9E9E9E';
  }
};

export default function RecapsPage() {
  const [refreshing, setRefreshing] = useState(false);
  const allRecaps = api.recaps.getAll.useQuery(undefined, {});
  const loadingHeight = useRef(new Animated.Value(0)).current;
  const [selectedRecap, setSelectedRecap] = useState<number | null>(null);
  const slideAnim = useRef(new Animated.Value(width)).current;
  const [isAnimating, setIsAnimating] = useState(false);

  const handleRecapPress = (recapId: number) => {
    if (isAnimating) return;
    setIsAnimating(true);
    setSelectedRecap(recapId);
    
    Animated.spring(slideAnim, {
      toValue: 0,
      tension: 180,
      friction: 15,
      useNativeDriver: true,
      restSpeedThreshold: 100,
      restDisplacementThreshold: 40,
    }).start(() => {
      setIsAnimating(false);
    });
  };

  const handleClose = () => {
    if (isAnimating) return;
    setIsAnimating(true);
    
    Animated.spring(slideAnim, {
      toValue: width,
      tension: 180,
      friction: 15,
      useNativeDriver: true,
      restSpeedThreshold: 100,
      restDisplacementThreshold: 40,
    }).start(() => {
      setSelectedRecap(null);
      setIsAnimating(false);
    });
  };

  const handleGesture = ({ nativeEvent }: { nativeEvent: { translationX: number; state: number } }) => {
    const { translationX, state } = nativeEvent;
    if (state === State.END && translationX > 50) {
      handleClose();
    }
  };

  useEffect(() => {
    Animated.timing(loadingHeight, {
      toValue: refreshing ? 50 : 0,
      duration: 300,
      useNativeDriver: false,
    }).start();
  }, [refreshing]);

  const onRefresh = React.useCallback(async () => {
    setRefreshing(true);
    await allRecaps.refetch();
    setRefreshing(false);
  }, [allRecaps]);

  const renderDetailView = () => {
    if (!selectedRecap || !allRecaps.data) return null;

    const recap = allRecaps.data.find(r => r.id === selectedRecap);
    if (!recap) return null;

    return (
      <GestureHandlerRootView style={{ flex: 1 }}>
        <PanGestureHandler
          activeOffsetX={[-20, 20]}
          failOffsetY={[-20, 20]}
          onHandlerStateChange={handleGesture}
        >
          <View style={styles.detailContent}>
            <TouchableOpacity
              onPress={handleClose}
              style={styles.closeButton}
            >
              <Ionicons name="close" size={24} color="#F5F5F5" />
            </TouchableOpacity>
            
            <ScrollView>
              <View style={styles.detailImageContainer}>
                {recap.imageId && (
                  <Image 
                    source={{ uri: `${R2_PUBLIC_URL}/${recap.imageId}` }}
                    style={styles.detailImage}
                    defaultSource={require('../../assets/images/placeholder.png')}
                  />
                )}
              </View>
              
              <View style={styles.detailContentInner}>
                <View style={styles.detailHeaderContent}>
                  <Text style={styles.detailDate}>
                    {recap.createdAt.toLocaleDateString('en-US', {
                      weekday: 'long',
                      month: 'long',
                      day: 'numeric',
                      year: 'numeric'
                    })}
                  </Text>
                  <View style={[
                    styles.typeBadge,
                    { backgroundColor: getTypeBadgeColor(recap.type) }
                  ]}>
                    <Text style={styles.typeBadgeText}>{recap.type}</Text>
                  </View>
                </View>
                <Text style={styles.detailText}>{recap.text}</Text>
              </View>
            </ScrollView>
          </View>
        </PanGestureHandler>
      </GestureHandlerRootView>
    );
  };

  return (
    <View style={styles.container}>
      <Animated.View style={[
        styles.loadingContainer,
        {
          height: loadingHeight,
          overflow: 'hidden',
        }
      ]}>
        <View style={styles.loadingInner}>
          <ActivityIndicator size="small" color="#2196f3" />
        </View>
      </Animated.View>
      <ScrollView
        contentContainerStyle={styles.scrollViewContent}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl
            refreshing={false}
            onRefresh={onRefresh}
            tintColor="transparent"
          />
        }
      >
        {allRecaps.data?.map((recap) => (
          <TouchableOpacity
            key={recap.id}
            style={styles.recapCard}
            onPress={() => handleRecapPress(recap.id)}
            activeOpacity={0.6}
          >
            {recap.imageId && (
              <Image
                source={{ uri: `${R2_PUBLIC_URL}/${recap.imageId}` }}
                style={styles.recapImage}
                defaultSource={require('../../assets/images/placeholder.png')}
              />
            )}
            <View style={styles.recapDetails}>
              <View
                style={[
                  styles.typeBadge,
                  {backgroundColor: getTypeBadgeColor(recap.type)}
                ]}
              >
                <Text style={styles.typeBadgeText}>{recap.type}</Text>
              </View>
              <Text style={styles.recapDate}>
                {recap.createdAt.toLocaleDateString('en-US', {
                  month: 'short',
                  day: 'numeric',
                  year: 'numeric'
                })}
              </Text>
            </View>
          </TouchableOpacity>
        ))}

        {allRecaps.data?.length === 0 && (
          <Text style={styles.emptyStateText}>No Recaps Yet</Text>
        )}

        {allRecaps.isLoading && (
          <Text style={styles.loadingText}>Loading Recaps...</Text>
        )}
      </ScrollView>

      <Animated.View
        style={[
          styles.detailView,
          {
            transform: [{ translateX: slideAnim }],
          },
        ]}
      >
        {selectedRecap && renderDetailView()}
      </Animated.View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#121212",
  },
  scrollViewContent: {
    paddingVertical: 16,
    paddingHorizontal: 16,
  },
  recapCard: {
    backgroundColor: '#1E1E1E',
    borderRadius: 12,
    marginBottom: 16,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: {width: 0, height: 2},
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 3,
  },
  recapImage: {
    width: '100%',
    height: 200,
    backgroundColor: '#2A2A2A',
  },
  recapImagePlaceholder: {
    width: '100%',
    height: 200,
    backgroundColor: '#2A2A2A',
  },
  recapDetails: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 12,
  },
  typeBadge: {
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 4,
  },
  typeBadgeText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  recapDate: {
    color: '#F5F5F5',
    fontSize: 14,
  },
  emptyStateText: {
    textAlign: 'center',
    color: '#F5F5F5',
    marginTop: 50,
    fontSize: 16,
  },
  loadingText: {
    textAlign: 'center',
    color: '#F5F5F5',
    marginTop: 50,
    fontSize: 16,
  },
  loadingContainer: {
    justifyContent: 'flex-start',
    backgroundColor: '#121212',
    borderBottomWidth: 1,
    borderBottomColor: '#333',
  },
  loadingInner: {
    height: 50,
    justifyContent: 'center',
    alignItems: 'center',
    paddingTop: 15,
  },
  detailView: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    width: '100%',
    backgroundColor: '#121212',
    zIndex: 1000,
  },
  detailContent: {
    flex: 1,
  },
  closeButton: {
    position: 'absolute',
    top: 40,
    right: 20,
    zIndex: 1001,
    padding: 12,
    backgroundColor: 'rgba(0,0,0,0.3)',
    borderRadius: 24,
  },
  detailImageContainer: {
    width: '110%',
    height: 400,
    marginLeft: '-5%',
    backgroundColor: '#2A2A2A',
    overflow: 'hidden',
  },
  detailImage: {
    width: '100%',
    height: '100%',
    backgroundColor: 'transparent',
  },
  detailContentInner: {
    padding: 16,
  },
  detailHeaderContent: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 16,
  },
  detailDate: {
    fontSize: 16,
    color: "#F5F5F5",
  },
  detailText: {
    fontSize: 16,
    lineHeight: 24,
    color: "#F5F5F5",
  },
  imagePlaceholder: {
    backgroundColor: "#2A2A2A",
  },
  animatedImage: {
    position: 'absolute',
    zIndex: 1001,
  },
});
</file>

<file path="apps/expo/babel.config.ts">
module.exports = function (api: { cache: (arg0: boolean) => void; }) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};
</file>

<file path="apps/expo/components/core/Button.tsx">
import React from 'react';
import {
  TouchableOpacity,
  TouchableNativeFeedback,
  Text,
  ActivityIndicator,
  StyleSheet,
  ViewStyle,
  TextStyle,
  View,
  Platform
} from 'react-native';
import { useTheme } from '../../utils/theme';
import { AccessibilityHelpers, PlatformStyles } from '../../utils/platform';

export type ButtonVariant = 'primary' | 'secondary' | 'outline' | 'text';
export type ButtonSize = 'small' | 'medium' | 'large';

interface ButtonProps {
  title: string;
  onPress: () => void;
  variant?: ButtonVariant;
  size?: ButtonSize;
  disabled?: boolean;
  loading?: boolean;
  fullWidth?: boolean;
  leftIcon?: React.ReactNode;
  rightIcon?: React.ReactNode;
  style?: ViewStyle;
  textStyle?: TextStyle;
  accessibilityLabel?: string;
  accessibilityHint?: string;
}

const Button: React.FC<ButtonProps> = ({
  title,
  onPress,
  variant = 'primary',
  size = 'medium',
  disabled = false,
  loading = false,
  fullWidth = false,
  leftIcon,
  rightIcon,
  style,
  textStyle,
  accessibilityLabel,
  accessibilityHint,
}) => {
  const { theme } = useTheme();

  // Use platform-specific styling
  const borderRadius = PlatformStyles.buttonStyles.borderRadius;
  const elevation = PlatformStyles.buttonStyles.elevation;
  const useTextTransform = PlatformStyles.buttonStyles.textTransform;

  // Apply shadow using platform-specific implementation
  const shadowStyle = PlatformStyles.shadow(variant === 'primary' || variant === 'secondary' ? 2 : 0);

  // Determine background color based on variant
  const getBackgroundColor = () => {
    if (disabled) return theme.colors.disabled;

    switch (variant) {
      case 'primary':
        return theme.colors.primary;
      case 'secondary':
        return theme.colors.secondary;
      case 'outline':
      case 'text':
        return 'transparent';
      default:
        return theme.colors.primary;
    }
  };

  // Determine text color based on variant
  const getTextColor = () => {
    if (disabled) return 'rgba(255, 255, 255, 0.6)';

    switch (variant) {
      case 'primary':
      case 'secondary':
        return '#FFFFFF';
      case 'outline':
      case 'text':
        return theme.colors.primary;
      default:
        return '#FFFFFF';
    }
  };

  // Determine border properties based on variant
  const getBorderStyles = () => {
    if (variant === 'outline') {
      return {
        borderWidth: 1,
        borderColor: disabled ? theme.colors.disabled : theme.colors.primary,
      };
    }
    return {};
  };

  // Determine padding based on size
  const getPadding = () => {
    switch (size) {
      case 'small':
        return { paddingVertical: 6, paddingHorizontal: 12 };
      case 'medium':
        return { paddingVertical: 10, paddingHorizontal: 16 };
      case 'large':
        return { paddingVertical: 14, paddingHorizontal: 20 };
      default:
        return { paddingVertical: 10, paddingHorizontal: 16 };
    }
  };

  // Combine all styles
  const buttonStyles = [
    styles.button,
    { backgroundColor: getBackgroundColor() },
    { borderRadius },
    getBorderStyles(),
    getPadding(),
    shadowStyle,
    fullWidth && styles.fullWidth,
    variant === 'text' && styles.textButton,
    style,
  ];

  // Text styles
  const textStyles = [
    styles.text,
    {
      color: getTextColor(),
      fontSize: size === 'small' ? 14 : size === 'large' ? 18 : 16,
      // Apply platform-specific text transform
      textTransform: useTextTransform === 'uppercase' && variant !== 'text' ? 'uppercase' : 'none',
    },
    textStyle,
  ];

  // Set up accessibility props
  const a11yProps = AccessibilityHelpers.buttonA11yProps(
    accessibilityLabel || title,
    disabled
  );

  if (accessibilityHint) {
    a11yProps.accessibilityHint = accessibilityHint;
  }

  // Choose the appropriate touchable component based on platform
  const ButtonComponent = Platform.OS === 'android' && !disabled && variant !== 'text'
    ? TouchableNativeFeedback
    : TouchableOpacity;

  // For Android, we need to wrap the content in a View for proper ripple effect
  const buttonContent = (
    <View style={buttonStyles}>
      {leftIcon && <View style={styles.leftIcon}>{leftIcon}</View>}

      {loading ? (
        <ActivityIndicator
          size="small"
          color={variant === 'outline' || variant === 'text' ? theme.colors.primary : '#FFFFFF'}
        />
      ) : (
        <Text style={textStyles}>{title}</Text>
      )}

      {rightIcon && <View style={styles.rightIcon}>{rightIcon}</View>}
    </View>
  );

  // For Android, we need additional setup for the ripple effect
  if (Platform.OS === 'android' && !disabled && variant !== 'text') {
    return (
      <View style={[styles.androidContainer, fullWidth && styles.fullWidth]}>
        <ButtonComponent
          onPress={disabled ? undefined : onPress}
          background={TouchableNativeFeedback.Ripple(
            variant === 'outline' ? theme.colors.primary + '20' : 'rgba(255, 255, 255, 0.2)',
            false
          )}
          {...a11yProps}
        >
          {buttonContent}
        </ButtonComponent>
      </View>
    );
  }

  // For iOS and other platforms
  return (
    <ButtonComponent
      style={buttonStyles}
      onPress={disabled ? undefined : onPress}
      activeOpacity={0.7}
      disabled={disabled}
      {...a11yProps}
    >
      {leftIcon && <View style={styles.leftIcon}>{leftIcon}</View>}

      {loading ? (
        <ActivityIndicator
          size="small"
          color={variant === 'outline' || variant === 'text' ? theme.colors.primary : '#FFFFFF'}
        />
      ) : (
        <Text style={textStyles}>{title}</Text>
      )}

      {rightIcon && <View style={styles.rightIcon}>{rightIcon}</View>}
    </ButtonComponent>
  );
};

const styles = StyleSheet.create({
  button: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  text: {
    fontWeight: '600',
    textAlign: 'center',
  },
  fullWidth: {
    width: '100%',
  },
  textButton: {
    paddingVertical: 4,
    paddingHorizontal: 8,
  },
  leftIcon: {
    marginRight: 8,
  },
  rightIcon: {
    marginLeft: 8,
  },
  // Container to handle Android ripple effect properly
  androidContainer: {
    borderRadius: PlatformStyles.buttonStyles.borderRadius,
    overflow: 'hidden',
  },
});

export default Button;
</file>

<file path="apps/expo/components/core/Card.tsx">
import React, { ReactNode } from 'react';
import {
  View,
  StyleSheet,
  StyleProp,
  ViewStyle,
  TextStyle,
  Text,
  TouchableOpacity,
} from 'react-native';
import { useTheme } from '../../utils/theme';

export type CardVariant = 'default' | 'outlined' | 'elevated';

interface CardProps {
  children: ReactNode;
  variant?: CardVariant;
  style?: StyleProp<ViewStyle>;
  onPress?: () => void;
  disabled?: boolean;
  title?: string;
  titleStyle?: StyleProp<TextStyle>;
  footer?: ReactNode;
  footerStyle?: StyleProp<ViewStyle>;
  contentStyle?: StyleProp<ViewStyle>;
  cornerRadius?: 'default' | 'rounded' | 'none';
}

export const Card: React.FC<CardProps> = ({
  children,
  variant = 'default',
  style,
  onPress,
  disabled = false,
  title,
  titleStyle,
  footer,
  footerStyle,
  contentStyle,
  cornerRadius = 'default',
}) => {
  const { theme } = useTheme();

  // Determine card style based on variant and theme
  const getCardStyle = () => {
    const baseStyle: ViewStyle = {
      backgroundColor: theme.colors.surface,
      borderRadius: getCornerRadius(),
    };

    switch (variant) {
      case 'outlined':
        return {
          ...baseStyle,
          borderWidth: 1,
          borderColor: theme.colors.border,
        };
      case 'elevated':
        return {
          ...baseStyle,
          ...theme.shadows.medium,
        };
      default:
        return baseStyle;
    }
  };

  // Determine corner radius based on the prop
  const getCornerRadius = () => {
    switch (cornerRadius) {
      case 'rounded':
        return theme.borderRadius.large;
      case 'none':
        return 0;
      default:
        return theme.borderRadius.medium;
    }
  };

  // Determine opacity for disabled state
  const getOpacityStyle = () => {
    return disabled ? { opacity: 0.6 } : undefined;
  };

  // Combine styles
  const cardStyles = [
    styles.card,
    getCardStyle(),
    getOpacityStyle(),
    style,
  ];

  const CardComponent = onPress ? TouchableOpacity : View;
  const cardProps = onPress
    ? { onPress, disabled, activeOpacity: 0.8 }
    : {};

  return (
    <CardComponent style={cardStyles} {...cardProps}>
      {title && (
        <View style={styles.header}>
          <Text
            style={[
              styles.title,
              { color: theme.colors.text },
              titleStyle,
            ]}
          >
            {title}
          </Text>
        </View>
      )}
      <View style={[styles.content, contentStyle]}>{children}</View>
      {footer && <View style={[styles.footer, footerStyle]}>{footer}</View>}
    </CardComponent>
  );
};

const styles = StyleSheet.create({
  card: {
    overflow: 'hidden',
  },
  header: {
    padding: 16,
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderBottomColor: 'rgba(0, 0, 0, 0.1)',
  },
  title: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  content: {
    padding: 16,
  },
  footer: {
    padding: 12,
    borderTopWidth: StyleSheet.hairlineWidth,
    borderTopColor: 'rgba(0, 0, 0, 0.1)',
  },
});

export default Card;
</file>

<file path="apps/expo/components/core/index.ts">
export { default as Button } from './Button';
export { default as Card } from './Card';
export { default as Input } from './Input';
export { default as Text } from './Text';
export { default as LoadingIndicator } from './LoadingIndicator';

// Types
export type { ButtonVariant, ButtonSize } from './Button';
export type { CardVariant } from './Card';
export type { InputVariant } from './Input';
export type { TextVariant, TextAlign } from './Text';
export type { LoadingSize, LoadingVariant } from './LoadingIndicator';
</file>

<file path="apps/expo/components/core/Input.tsx">
import React, { ReactNode, useState } from 'react';
import {
  View,
  TextInput,
  StyleSheet,
  StyleProp,
  ViewStyle,
  TextStyle,
  TouchableOpacity,
  Text,
} from 'react-native';
import { useTheme } from '../../utils/theme';

export type InputVariant = 'default' | 'filled' | 'outlined';

interface InputProps {
  value: string;
  onChangeText: (text: string) => void;
  placeholder?: string;
  variant?: InputVariant;
  label?: string;
  error?: string;
  disabled?: boolean;
  secureTextEntry?: boolean;
  keyboardType?: 'default' | 'email-address' | 'numeric' | 'phone-pad' | 'number-pad';
  autoCapitalize?: 'none' | 'sentences' | 'words' | 'characters';
  maxLength?: number;
  multiline?: boolean;
  numberOfLines?: number;
  style?: StyleProp<ViewStyle>;
  inputStyle?: StyleProp<TextStyle>;
  labelStyle?: StyleProp<TextStyle>;
  errorStyle?: StyleProp<TextStyle>;
  leftIcon?: ReactNode;
  rightIcon?: ReactNode;
  onFocus?: () => void;
  onBlur?: () => void;
}

export const Input: React.FC<InputProps> = ({
  value,
  onChangeText,
  placeholder,
  variant = 'default',
  label,
  error,
  disabled = false,
  secureTextEntry = false,
  keyboardType = 'default',
  autoCapitalize = 'none',
  maxLength,
  multiline = false,
  numberOfLines = 1,
  style,
  inputStyle,
  labelStyle,
  errorStyle,
  leftIcon,
  rightIcon,
  onFocus,
  onBlur,
}) => {
  const { theme } = useTheme();
  const [isFocused, setIsFocused] = useState(false);

  // Handle focus state
  const handleFocus = () => {
    setIsFocused(true);
    onFocus && onFocus();
  };

  // Handle blur state
  const handleBlur = () => {
    setIsFocused(false);
    onBlur && onBlur();
  };

  // Get container style based on variant, state, and theme
  const getContainerStyle = () => {
    const baseStyle: ViewStyle = {
      borderRadius: theme.borderRadius.small,
    };

    // Error state overrides other styles
    if (error) {
      return {
        ...baseStyle,
        borderColor: 'red',
        borderWidth: 1,
        backgroundColor: 'rgba(255, 0, 0, 0.05)',
      };
    }

    switch (variant) {
      case 'filled':
        return {
          ...baseStyle,
          backgroundColor: isFocused
            ? 'rgba(0, 0, 0, 0.1)'
            : 'rgba(0, 0, 0, 0.05)',
          borderBottomWidth: 2,
          borderBottomColor: isFocused
            ? theme.colors.primary
            : 'transparent',
        };
      case 'outlined':
        return {
          ...baseStyle,
          borderWidth: 1,
          borderColor: isFocused
            ? theme.colors.primary
            : theme.colors.border,
          backgroundColor: 'transparent',
        };
      default:
        return {
          ...baseStyle,
          borderBottomWidth: 1,
          borderBottomColor: isFocused
            ? theme.colors.primary
            : theme.colors.border,
          backgroundColor: 'transparent',
        };
    }
  };

  // Get input style
  const getInputStyle = () => {
    return {
      color: disabled ? theme.colors.gray : theme.colors.text,
    };
  };

  return (
    <View style={[styles.container, style]}>
      {label && (
        <Text
          style={[
            styles.label,
            { color: error ? 'red' : theme.colors.text },
            labelStyle,
          ]}
        >
          {label}
        </Text>
      )}

      <View
        style={[
          styles.inputContainer,
          getContainerStyle(),
          disabled && styles.disabled,
        ]}
      >
        {leftIcon && <View style={styles.leftIcon}>{leftIcon}</View>}

        <TextInput
          style={[
            styles.input,
            getInputStyle(),
            multiline && styles.multiline,
            inputStyle,
          ]}
          value={value}
          onChangeText={onChangeText}
          placeholder={placeholder}
          placeholderTextColor={theme.colors.gray}
          editable={!disabled}
          secureTextEntry={secureTextEntry}
          keyboardType={keyboardType}
          autoCapitalize={autoCapitalize}
          maxLength={maxLength}
          multiline={multiline}
          numberOfLines={multiline ? numberOfLines : 1}
          onFocus={handleFocus}
          onBlur={handleBlur}
        />

        {rightIcon && <View style={styles.rightIcon}>{rightIcon}</View>}
      </View>

      {error && (
        <Text style={[styles.error, errorStyle]}>
          {error}
        </Text>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    marginBottom: 16,
  },
  label: {
    marginBottom: 8,
    fontSize: 14,
    fontWeight: '500',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    minHeight: 48,
  },
  input: {
    flex: 1,
    paddingHorizontal: 12,
    paddingVertical: 8,
    fontFamily: 'SpaceMono-Regular',
    fontSize: 14,
  },
  multiline: {
    textAlignVertical: 'top',
    minHeight: 80,
  },
  leftIcon: {
    paddingLeft: 12,
  },
  rightIcon: {
    paddingRight: 12,
  },
  disabled: {
    opacity: 0.6,
  },
  error: {
    marginTop: 4,
    fontSize: 12,
    color: 'red',
  },
});

export default Input;
</file>

<file path="apps/expo/components/core/LoadingIndicator.tsx">
import React from 'react';
import {
  View,
  ActivityIndicator,
  StyleSheet,
  StyleProp,
  ViewStyle,
  Text,
} from 'react-native';
import { useTheme } from '../../utils/theme';

export type LoadingSize = 'small' | 'medium' | 'large';
export type LoadingVariant = 'default' | 'overlay' | 'full' | 'centered';

interface LoadingIndicatorProps {
  loading?: boolean;
  size?: LoadingSize;
  variant?: LoadingVariant;
  color?: string;
  message?: string;
  style?: StyleProp<ViewStyle>;
  children?: React.ReactNode;
}

export const LoadingIndicator: React.FC<LoadingIndicatorProps> = ({
  loading = true,
  size = 'medium',
  variant = 'default',
  color,
  message,
  style,
  children,
}) => {
  const { theme } = useTheme();

  if (!loading) {
    return <>{children}</>;
  }

  // Get size for ActivityIndicator
  const getIndicatorSize = (): 'small' | 'large' => {
    switch (size) {
      case 'small':
        return 'small';
      case 'large':
        return 'large';
      default:
        return 'small';
    }
  };

  // Get actual size in pixels
  const getSizePixels = (): number => {
    switch (size) {
      case 'small':
        return 24;
      case 'medium':
        return 36;
      case 'large':
        return 48;
      default:
        return 36;
    }
  };

  // Get container style based on variant
  const getContainerStyle = () => {
    switch (variant) {
      case 'overlay':
        return [
          styles.container,
          styles.overlay,
          { backgroundColor: 'rgba(0, 0, 0, 0.5)' },
        ];
      case 'full':
        return [
          styles.container,
          styles.full,
          { backgroundColor: theme.colors.background },
        ];
      case 'centered':
        return [styles.container, styles.centered];
      default:
        return [styles.container];
    }
  };

  // Indicator color
  const indicatorColor = color || theme.colors.primary;

  return (
    <View style={[getContainerStyle(), style]}>
      <View style={styles.content}>
        <ActivityIndicator
          size={getIndicatorSize()}
          color={indicatorColor}
          style={{ width: getSizePixels(), height: getSizePixels() }}
        />

        {message && (
          <Text style={[styles.message, { color: theme.colors.text }]}>
            {message}
          </Text>
        )}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  content: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  overlay: {
    ...StyleSheet.absoluteFillObject,
    zIndex: 1000,
  },
  full: {
    flex: 1,
  },
  centered: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  message: {
    marginTop: 12,
    fontSize: 14,
    textAlign: 'center',
  },
});

export default LoadingIndicator;
</file>

<file path="apps/expo/components/core/Text.tsx">
import React from 'react';
import { Text as RNText, StyleSheet, TextStyle, StyleProp } from 'react-native';
import { useTheme } from '../../utils/theme';
import { AccessibilityHelpers, CustomPlatform } from '../../utils/platform';

export type TextVariant = 'h1' | 'h2' | 'h3' | 'h4' | 'body1' | 'body2' | 'caption' | 'button' | 'overline';
export type TextAlign = 'left' | 'center' | 'right';

interface TextProps {
  children: React.ReactNode;
  variant?: TextVariant;
  color?: string;
  align?: TextAlign;
  style?: StyleProp<TextStyle>;
  numberOfLines?: number;
  ellipsizeMode?: 'head' | 'middle' | 'tail' | 'clip';
  onPress?: () => void;
  selectable?: boolean;
  accessibilityLabel?: string;
  accessibilityRole?: 'text' | 'header' | 'link' | 'alert' | 'none';
}

export const Text: React.FC<TextProps> = ({
  children,
  variant = 'body1',
  color,
  align = 'left',
  style,
  numberOfLines,
  ellipsizeMode = 'tail',
  onPress,
  selectable = false,
  accessibilityLabel,
  accessibilityRole,
  ...rest
}) => {
  const { theme } = useTheme();

  // Determine font family based on platform
  const getFontFamily = () => {
    // Default font family
    let fontFamily = theme.fonts.regular;

    // Platform-specific font adjustments
    if (CustomPlatform.isIOS) {
      // iOS-specific font adjustments
      if (variant.startsWith('h')) {
        return theme.fonts.bold || 'System-Bold';
      }

      if (variant === 'button') {
        return theme.fonts.semiBold || 'System-SemiBold';
      }

      return fontFamily || 'System';
    } else if (CustomPlatform.isAndroid) {
      // Android-specific font adjustments
      if (variant.startsWith('h')) {
        return theme.fonts.bold || 'sans-serif-medium';
      }

      if (variant === 'button') {
        return theme.fonts.semiBold || 'sans-serif-medium';
      }

      return fontFamily || 'sans-serif';
    }

    return fontFamily;
  };

  // Get font size based on variant
  const getFontSize = () => {
    switch (variant) {
      case 'h1':
        return 28;
      case 'h2':
        return 24;
      case 'h3':
        return 20;
      case 'h4':
        return 18;
      case 'body1':
        return 16;
      case 'body2':
        return 14;
      case 'caption':
        return 12;
      case 'button':
        return 16;
      case 'overline':
        return 10;
      default:
        return 16;
    }
  };

  // Get font weight based on variant and platform
  const getFontWeight = () => {
    if (variant.startsWith('h')) {
      return '700'; // bold
    }

    if (variant === 'button') {
      return '600'; // semi-bold
    }

    if (variant === 'body1') {
      return '400'; // normal
    }

    return '400'; // normal for other variants
  };

  // Get text transform based on variant
  const getTextTransform = () => {
    if (variant === 'button' && CustomPlatform.isAndroid) {
      return 'uppercase';
    }

    if (variant === 'overline') {
      return 'uppercase';
    }

    return 'none';
  };

  // Get letter spacing based on variant
  const getLetterSpacing = () => {
    if (variant === 'overline') {
      return 1.5;
    }

    if (variant === 'button') {
      return 0.5;
    }

    if (variant.startsWith('h')) {
      return -0.3;
    }

    return 0;
  };

  // Set up accessibility properties
  const getAccessibilityProps = () => {
    // Default accessibility role based on variant
    let role = accessibilityRole;

    if (!role) {
      if (variant.startsWith('h')) {
        role = 'header';
      } else if (onPress) {
        role = 'link';
      } else {
        role = 'text';
      }
    }

    // Get header level from variant (h1, h2, etc.)
    let level: number | undefined;
    if (role === 'header' && variant.startsWith('h')) {
      level = parseInt(variant.charAt(1), 10);
    }

    // Return accessibility props
    return {
      accessible: true,
      accessibilityLabel: accessibilityLabel || (typeof children === 'string' ? children : undefined),
      accessibilityRole: role,
      ...(level ? { accessibilityLevel: level } : {}),
    };
  };

  // Combine styles
  const textStyles = [
    {
      color: color || theme.colors.text,
      fontFamily: getFontFamily(),
      fontSize: getFontSize(),
      fontWeight: getFontWeight(),
      textAlign: align,
      textTransform: getTextTransform(),
      letterSpacing: getLetterSpacing(),
    },
    style,
  ];

  return (
    <RNText
      style={textStyles}
      numberOfLines={numberOfLines}
      ellipsizeMode={ellipsizeMode}
      onPress={onPress}
      selectable={selectable}
      {...getAccessibilityProps()}
      {...rest}
    >
      {children}
    </RNText>
  );
};

export default Text;
</file>

<file path="apps/expo/components/functions/AchievementList.tsx">
import React from 'react';
import {
  View,
  StyleSheet,
  FlatList,
  Image,
  TouchableOpacity,
  Animated,
  Easing,
  Dimensions,
} from 'react-native';
import { useTheme } from '../../utils/theme';
import { Text, Card, Button } from '../core';
import { AccessibilityHelpers } from '../../utils/platform';

// Achievement data structure
export interface Achievement {
  id: string;
  title: string;
  description: string;
  icon?: any; // Image source
  reward?: string;
  isUnlocked?: boolean;
  progress?: number; // 0 to 100
  unlockedAt?: Date;
  isSecret?: boolean; // Hidden until unlocked
  tier?: 'bronze' | 'silver' | 'gold' | 'platinum' | 'diamond';
  category?: string;
  rarity?: number; // Percentage of players who have this achievement (0-100)
}

// Achievement list props
export interface AchievementListProps {
  title?: string;
  achievements: Achievement[];
  onAchievementPress?: (achievement: Achievement) => void;
  showProgress?: boolean;
  showRarity?: boolean;
  showFilters?: boolean;
  displayMode?: 'grid' | 'list';
  onFilterChange?: (category: string) => void;
  selectedCategory?: string;
  categories?: string[];
  showUnlockedOnly?: boolean;
  onToggleUnlockedOnly?: () => void;
  themeStyle?: string;
  style?: any;
}

const AchievementList: React.FC<AchievementListProps> = ({
  title = 'Achievements',
  achievements,
  onAchievementPress,
  showProgress = true,
  showRarity = true,
  showFilters = true,
  displayMode = 'list',
  onFilterChange,
  selectedCategory = 'All',
  categories = ['All'],
  showUnlockedOnly = false,
  onToggleUnlockedOnly,
  themeStyle,
  style,
}) => {
  const { theme } = useTheme();
  const windowWidth = Dimensions.get('window').width;
  const numColumns = displayMode === 'grid' ? (windowWidth >= 768 ? 3 : 2) : 1;

  // Animation value for progress bar
  const progressAnim = React.useRef(
    achievements.map(() => new Animated.Value(0))
  ).current;

  // Start progress animation when component mounts
  React.useEffect(() => {
    achievements.forEach((achievement, index) => {
      if (achievement.progress && achievement.progress > 0) {
        Animated.timing(progressAnim[index], {
          toValue: achievement.progress / 100,
          duration: 1000,
          easing: Easing.out(Easing.quad),
          useNativeDriver: false,
        }).start();
      }
    });
  }, [achievements, progressAnim]);

  // Get tier color and border style
  const getTierStyle = (tier?: string) => {
    if (!tier) return {};

    const tierColors = {
      bronze: '#CD7F32',
      silver: '#C0C0C0',
      gold: '#FFD700',
      platinum: '#E5E4E2',
      diamond: '#B9F2FF',
    };

    const color = tierColors[tier as keyof typeof tierColors] || '#CCCCCC';

    return {
      borderColor: color,
      shadowColor: color,
    };
  };

  // Get rarity text and color
  const getRarityInfo = (rarity?: number) => {
    if (rarity === undefined) return { text: 'Unknown', color: '#888888' };

    if (rarity < 10) return { text: 'Ultra Rare', color: '#9C27B0' };
    if (rarity < 30) return { text: 'Rare', color: '#3F51B5' };
    if (rarity < 60) return { text: 'Uncommon', color: '#4CAF50' };
    return { text: 'Common', color: '#9E9E9E' };
  };

  // Render filter tabs
  const renderFilters = () => {
    if (!showFilters || categories.length <= 1) return null;

    return (
      <View style={styles.filtersContainer}>
        <ScrollView horizontal showsHorizontalScrollIndicator={false}>
          {categories.map((category) => (
            <TouchableOpacity
              key={category}
              style={[
                styles.filterTab,
                selectedCategory === category && styles.selectedFilterTab,
                {
                  borderColor: theme.colors.primary,
                  backgroundColor:
                    selectedCategory === category
                      ? `${theme.colors.primary}20`
                      : 'transparent',
                },
              ]}
              onPress={() => onFilterChange && onFilterChange(category)}
              accessibilityRole="tab"
              accessibilityState={{ selected: selectedCategory === category }}
              accessibilityLabel={`${category} category filter`}
            >
              <Text
                variant="body2"
                color={selectedCategory === category ? theme.colors.primary : undefined}
              >
                {category}
              </Text>
            </TouchableOpacity>
          ))}
        </ScrollView>

        {onToggleUnlockedOnly && (
          <TouchableOpacity
            style={[
              styles.toggleButton,
              showUnlockedOnly && styles.activeToggleButton,
              {
                borderColor: theme.colors.primary,
                backgroundColor: showUnlockedOnly
                  ? `${theme.colors.primary}20`
                  : 'transparent',
              },
            ]}
            onPress={onToggleUnlockedOnly}
            accessibilityRole="switch"
            accessibilityState={{ checked: showUnlockedOnly }}
            accessibilityLabel="Show unlocked achievements only"
          >
            <Text
              variant="caption"
              color={showUnlockedOnly ? theme.colors.primary : undefined}
            >
              Unlocked
            </Text>
          </TouchableOpacity>
        )}
      </View>
    );
  };

  // Render a single achievement in list mode
  const renderListItem = (achievement: Achievement, index: number) => {
    const isSecret = achievement.isSecret && !achievement.isUnlocked;
    const tierStyle = getTierStyle(achievement.tier);
    const { text: rarityText, color: rarityColor } = getRarityInfo(achievement.rarity);

    return (
      <TouchableOpacity
        style={[
          styles.listItemContainer,
          achievement.isUnlocked && styles.unlockedAchievement,
          tierStyle,
        ]}
        onPress={() => onAchievementPress && onAchievementPress(achievement)}
        disabled={!onAchievementPress}
        {...AccessibilityHelpers.combineA11yProps(
          `${achievement.title}${achievement.isUnlocked ? ', Unlocked' : ', Locked'}`,
          achievement.description
        )}
      >
        {/* Icon/Badge */}
        <View style={styles.achievementIcon}>
          {achievement.icon ? (
            <Image
              source={achievement.icon}
              style={[
                styles.icon,
                !achievement.isUnlocked && styles.lockedIcon,
                achievement.tier && styles.tieredIcon,
              ]}
            />
          ) : (
            <View
              style={[
                styles.defaultIcon,
                !achievement.isUnlocked && styles.lockedIcon,
                achievement.tier && styles.tieredIcon,
                { backgroundColor: achievement.isUnlocked ? theme.colors.primary : '#CCCCCC' },
              ]}
            >
              <Text style={styles.defaultIconText}>
                {isSecret ? '?' : achievement.title.charAt(0).toUpperCase()}
              </Text>
            </View>
          )}

          {/* Tier badge if available */}
          {achievement.tier && (
            <View
              style={[
                styles.tierBadge,
                { backgroundColor: tierStyle.borderColor || '#CCCCCC' },
              ]}
            >
              <Text variant="caption" style={styles.tierText}>
                {achievement.tier.charAt(0).toUpperCase()}
              </Text>
            </View>
          )}
        </View>

        {/* Achievement details */}
        <View style={styles.achievementDetails}>
          <Text
            variant="body1"
            style={[
              styles.achievementTitle,
              !achievement.isUnlocked && styles.lockedText,
            ]}
          >
            {isSecret ? 'Secret Achievement' : achievement.title}
          </Text>

          <Text
            variant="caption"
            style={[
              styles.achievementDescription,
              !achievement.isUnlocked && styles.lockedText,
            ]}
            numberOfLines={2}
          >
            {isSecret ? 'Keep playing to unlock this secret achievement'
              : achievement.description}
          </Text>

          {showProgress && achievement.progress !== undefined && achievement.progress < 100 && (
            <View style={styles.progressContainer}>
              <Animated.View
                style={[
                  styles.progressBar,
                  {
                    width: progressAnim[index].interpolate({
                      inputRange: [0, 1],
                      outputRange: ['0%', '100%'],
                    }),
                    backgroundColor: theme.colors.primary,
                  },
                ]}
              />
              <Text variant="caption" style={styles.progressText}>
                {`${Math.floor(achievement.progress)}%`}
              </Text>
            </View>
          )}

          {/* Rarity indicator */}
          {showRarity && achievement.rarity !== undefined && (
            <View style={styles.rarityContainer}>
              <Text variant="caption" style={[styles.rarityText, { color: rarityColor }]}>
                {rarityText} • {achievement.rarity}% of players
              </Text>
            </View>
          )}

          {/* Unlocked date or reward */}
          {achievement.isUnlocked && achievement.unlockedAt && (
            <Text variant="caption" style={styles.unlockedDate}>
              Unlocked on{' '}
              {new Date(achievement.unlockedAt).toLocaleDateString()}
            </Text>
          )}

          {achievement.reward && (
            <Text
              variant="caption"
              style={[
                styles.rewardText,
                !achievement.isUnlocked && styles.lockedText,
              ]}
            >
              Reward: {achievement.reward}
            </Text>
          )}
        </View>

        {/* Status indicator */}
        <View style={styles.statusContainer}>
          {achievement.isUnlocked ? (
            <View style={[styles.unlockedBadge, { backgroundColor: theme.colors.primary }]}>
              <Text variant="caption" style={styles.unlockedText}>
                ✓
              </Text>
            </View>
          ) : (
            <View style={styles.lockedBadge}>
              <Text variant="caption" style={styles.lockedBadgeText}>
                🔒
              </Text>
            </View>
          )}
        </View>
      </TouchableOpacity>
    );
  };

  // Render a single achievement in grid mode
  const renderGridItem = (achievement: Achievement, index: number) => {
    const isSecret = achievement.isSecret && !achievement.isUnlocked;
    const tierStyle = getTierStyle(achievement.tier);

    return (
      <TouchableOpacity
        style={[
          styles.gridItemContainer,
          achievement.isUnlocked && styles.unlockedAchievement,
          tierStyle,
        ]}
        onPress={() => onAchievementPress && onAchievementPress(achievement)}
        disabled={!onAchievementPress}
        {...AccessibilityHelpers.combineA11yProps(
          `${achievement.title}${achievement.isUnlocked ? ', Unlocked' : ', Locked'}`,
          achievement.description
        )}
      >
        {/* Icon/Badge */}
        <View style={styles.gridIconContainer}>
          {achievement.icon ? (
            <Image
              source={achievement.icon}
              style={[
                styles.gridIcon,
                !achievement.isUnlocked && styles.lockedIcon,
                achievement.tier && styles.tieredIcon,
              ]}
            />
          ) : (
            <View
              style={[
                styles.gridDefaultIcon,
                !achievement.isUnlocked && styles.lockedIcon,
                achievement.tier && styles.tieredIcon,
                { backgroundColor: achievement.isUnlocked ? theme.colors.primary : '#CCCCCC' },
              ]}
            >
              <Text style={styles.defaultIconText}>
                {isSecret ? '?' : achievement.title.charAt(0).toUpperCase()}
              </Text>
            </View>
          )}

          {/* Status indicator */}
          {achievement.isUnlocked ? (
            <View style={[styles.gridUnlockedBadge, { backgroundColor: theme.colors.primary }]}>
              <Text variant="caption" style={styles.unlockedText}>
                ✓
              </Text>
            </View>
          ) : (
            <View style={styles.gridLockedBadge}>
              <Text variant="caption" style={styles.lockedBadgeText}>
                🔒
              </Text>
            </View>
          )}
        </View>

        {/* Achievement details */}
        <Text
          variant="body2"
          style={[
            styles.gridTitle,
            !achievement.isUnlocked && styles.lockedText,
          ]}
          numberOfLines={2}
        >
          {isSecret ? 'Secret Achievement' : achievement.title}
        </Text>

        {showProgress && achievement.progress !== undefined && achievement.progress < 100 && (
          <View style={styles.gridProgressContainer}>
            <Animated.View
              style={[
                styles.gridProgressBar,
                {
                  width: progressAnim[index].interpolate({
                    inputRange: [0, 1],
                    outputRange: ['0%', '100%'],
                  }),
                  backgroundColor: theme.colors.primary,
                },
              ]}
            />
            <Text variant="caption" style={styles.gridProgressText}>
              {`${Math.floor(achievement.progress)}%`}
            </Text>
          </View>
        )}
      </TouchableOpacity>
    );
  };

  // Render achievement items based on display mode
  const renderItem = ({ item, index }: { item: Achievement; index: number }) => {
    return displayMode === 'list'
      ? renderListItem(item, index)
      : renderGridItem(item, index);
  };

  return (
    <Card
      title={title}
      style={[styles.container, style]}
      {...AccessibilityHelpers.combineA11yProps(`${title}`, 'List of game achievements')}
    >
      {/* Filter controls */}
      {renderFilters()}

      {/* Achievement list */}
      <FlatList
        data={achievements}
        renderItem={renderItem}
        keyExtractor={(item) => item.id}
        contentContainerStyle={
          displayMode === 'list' ? styles.listContent : styles.gridContent
        }
        numColumns={displayMode === 'grid' ? numColumns : 1}
        key={displayMode} // Force re-render when display mode changes
        showsVerticalScrollIndicator={false}
        ListEmptyComponent={
          <View style={styles.emptyContainer}>
            <Text variant="body1" style={styles.emptyText}>
              No achievements found.
            </Text>
          </View>
        }
      />
    </Card>
  );
};

const styles = StyleSheet.create({
  container: {
    overflow: 'hidden',
  },
  filtersContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingHorizontal: 8,
    marginBottom: 16,
  },
  filterTab: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginRight: 8,
    borderRadius: 16,
    borderWidth: 1,
  },
  selectedFilterTab: {
    borderWidth: 1,
  },
  toggleButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    borderWidth: 1,
  },
  activeToggleButton: {
    borderWidth: 1,
  },
  // List view styles
  listContent: {
    paddingHorizontal: 8,
    paddingBottom: 16,
  },
  listItemContainer: {
    flexDirection: 'row',
    padding: 12,
    borderRadius: 8,
    marginBottom: 12,
    borderWidth: 1,
    borderColor: 'rgba(0, 0, 0, 0.1)',
    backgroundColor: 'rgba(0, 0, 0, 0.02)',
  },
  // Grid view styles
  gridContent: {
    paddingHorizontal: 8,
    paddingBottom: 16,
  },
  gridItemContainer: {
    flex: 1,
    margin: 6,
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    borderColor: 'rgba(0, 0, 0, 0.1)',
    backgroundColor: 'rgba(0, 0, 0, 0.02)',
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: 150,
  },
  unlockedAchievement: {
    backgroundColor: 'rgba(76, 175, 80, 0.05)',
  },
  // Icon styles
  achievementIcon: {
    width: 60,
    alignItems: 'center',
    justifyContent: 'center',
    position: 'relative',
  },
  icon: {
    width: 50,
    height: 50,
    borderRadius: 25,
  },
  defaultIcon: {
    width: 50,
    height: 50,
    borderRadius: 25,
    alignItems: 'center',
    justifyContent: 'center',
  },
  defaultIconText: {
    color: 'white',
    fontWeight: 'bold',
    fontSize: 20,
  },
  lockedIcon: {
    opacity: 0.5,
  },
  tieredIcon: {
    borderWidth: 2,
  },
  tierBadge: {
    position: 'absolute',
    bottom: -5,
    right: -5,
    width: 22,
    height: 22,
    borderRadius: 11,
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: '#FFFFFF',
  },
  tierText: {
    color: '#FFFFFF',
    fontWeight: 'bold',
    fontSize: 10,
  },
  // Content styles
  achievementDetails: {
    flex: 1,
    marginLeft: 12,
    justifyContent: 'center',
  },
  achievementTitle: {
    fontWeight: 'bold',
    marginBottom: 4,
  },
  achievementDescription: {
    opacity: 0.7,
    marginBottom: 8,
  },
  lockedText: {
    opacity: 0.5,
  },
  progressContainer: {
    height: 6,
    backgroundColor: 'rgba(0, 0, 0, 0.1)',
    borderRadius: 3,
    marginVertical: 8,
    overflow: 'hidden',
    position: 'relative',
  },
  progressBar: {
    height: '100%',
    borderRadius: 3,
  },
  progressText: {
    position: 'absolute',
    right: 0,
    top: 6,
    fontSize: 10,
  },
  rarityContainer: {
    marginTop: 4,
  },
  rarityText: {
    fontSize: 10,
  },
  unlockedDate: {
    opacity: 0.5,
    fontSize: 10,
    marginTop: 4,
  },
  rewardText: {
    fontStyle: 'italic',
    fontSize: 10,
    marginTop: 4,
  },
  statusContainer: {
    width: 40,
    alignItems: 'center',
    justifyContent: 'center',
  },
  unlockedBadge: {
    width: 24,
    height: 24,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
  },
  unlockedText: {
    color: '#FFFFFF',
    fontWeight: 'bold',
  },
  lockedBadge: {
    width: 24,
    height: 24,
    alignItems: 'center',
    justifyContent: 'center',
  },
  lockedBadgeText: {
    opacity: 0.5,
  },
  // Grid-specific styles
  gridIconContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 12,
    position: 'relative',
  },
  gridIcon: {
    width: 60,
    height: 60,
    borderRadius: 30,
  },
  gridDefaultIcon: {
    width: 60,
    height: 60,
    borderRadius: 30,
    alignItems: 'center',
    justifyContent: 'center',
  },
  gridTitle: {
    textAlign: 'center',
    fontWeight: 'bold',
    marginBottom: 8,
  },
  gridProgressContainer: {
    height: 6,
    backgroundColor: 'rgba(0, 0, 0, 0.1)',
    borderRadius: 3,
    marginTop: 8,
    overflow: 'hidden',
    position: 'relative',
    width: '100%',
  },
  gridProgressBar: {
    height: '100%',
    borderRadius: 3,
  },
  gridProgressText: {
    position: 'absolute',
    right: 0,
    top: 6,
    fontSize: 10,
  },
  gridUnlockedBadge: {
    position: 'absolute',
    top: -5,
    right: -5,
    width: 24,
    height: 24,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
    borderWidth: 1,
    borderColor: '#FFFFFF',
  },
  gridLockedBadge: {
    position: 'absolute',
    top: -5,
    right: -5,
    width: 24,
    height: 24,
    alignItems: 'center',
    justifyContent: 'center',
  },
  // Empty state
  emptyContainer: {
    padding: 24,
    alignItems: 'center',
  },
  emptyText: {
    textAlign: 'center',
    opacity: 0.7,
  },
});

export default AchievementList;
</file>

<file path="apps/expo/components/functions/DialogSystem.tsx">
import React, { useState, useEffect } from 'react';
import {
  View,
  StyleSheet,
  TouchableOpacity,
  Modal,
  Image,
  Animated,
  Dimensions,
  ScrollView,
  Platform,
} from 'react-native';
import { useTheme } from '../../utils/theme';
import { Text, Button } from '../core';
import { AccessibilityHelpers } from '../../utils/platform';

// Character type
export interface DialogCharacter {
  id: string;
  name: string;
  avatar: any; // Image source
  role?: string; // e.g., 'protagonist', 'villain', 'npc', etc.
  relationship?: number; // -100 to 100, representing relationship with player
}

// Dialog choice type
export interface DialogChoice {
  id: string;
  text: string;
  nextDialogId?: string;
  condition?: (state: any) => boolean;
  action?: (state: any) => any;
  relationshipChange?: { characterId: string; amount: number };
  disabled?: boolean;
}

// Dialog node type
export interface DialogNode {
  id: string;
  characterId: string;
  text: string;
  emotion?: 'neutral' | 'happy' | 'sad' | 'angry' | 'surprised' | 'thinking' | 'confused' | string;
  animation?: 'none' | 'shake' | 'bounce' | 'pulse' | 'fade' | string;
  choices?: DialogChoice[];
  autoAdvance?: boolean;
  autoAdvanceDelay?: number; // in milliseconds
  nextDialogId?: string;
  background?: any; // Image source
  sound?: any; // Sound source
  showOnce?: boolean;
}

// Dialog props
export interface DialogSystemProps {
  visible: boolean;
  onClose: () => void;
  initialDialogId: string;
  dialogNodes: DialogNode[];
  characters: DialogCharacter[];
  onDialogComplete?: (finalState: any) => void;
  initialState?: any;
  dialogTitle?: string;
  style?: any;
  themeStyle?: string;
}

const DialogSystem: React.FC<DialogSystemProps> = ({
  visible,
  onClose,
  initialDialogId,
  dialogNodes,
  characters,
  onDialogComplete,
  initialState = {},
  dialogTitle = 'Conversation',
  style,
  themeStyle,
}) => {
  const { theme } = useTheme();
  const [currentNodeId, setCurrentNodeId] = useState<string>(initialDialogId);
  const [dialogState, setDialogState] = useState<any>(initialState);
  const [textOpacity] = useState(new Animated.Value(0));
  const [choicesOpacity] = useState(new Animated.Value(0));
  const [choicesEnabled, setChoicesEnabled] = useState(false);
  const [dialogHistory, setDialogHistory] = useState<string[]>([]);
  const [showHistory, setShowHistory] = useState(false);

  // Window dimensions
  const { width: windowWidth } = Dimensions.get('window');

  // Get current dialog node
  const currentNode = dialogNodes.find(node => node.id === currentNodeId);

  // Get character for current node
  const currentCharacter = currentNode
    ? characters.find(char => char.id === currentNode.characterId)
    : null;

  // Reset dialog when initialDialogId changes
  useEffect(() => {
    if (visible) {
      setCurrentNodeId(initialDialogId);
      setDialogHistory([]);
      setDialogState(initialState);
      setShowHistory(false);
    }
  }, [visible, initialDialogId, initialState]);

  // Handle dialog animation and auto-advance
  useEffect(() => {
    if (!currentNode || !visible) return;

    // Add dialog to history
    setDialogHistory(prev => [...prev, currentNodeId]);

    // Animate text appearance
    Animated.sequence([
      Animated.timing(textOpacity, {
        toValue: 0,
        duration: 150,
        useNativeDriver: true,
      }),
      Animated.timing(textOpacity, {
        toValue: 1,
        duration: 300,
        useNativeDriver: true,
      }),
    ]).start();

    // If there are choices, animate them after a delay
    if (currentNode.choices && currentNode.choices.length > 0) {
      // Disable choices during animation
      setChoicesEnabled(false);

      // Animate choices appearance
      Animated.sequence([
        Animated.timing(choicesOpacity, {
          toValue: 0,
          duration: 100,
          useNativeDriver: true,
        }),
        Animated.delay(300), // Delay to let the player read the text
        Animated.timing(choicesOpacity, {
          toValue: 1,
          duration: 300,
          useNativeDriver: true,
        }),
      ]).start(() => {
        // Enable choices after animation
        setChoicesEnabled(true);
      });
    }

    // Handle auto-advance
    if (currentNode.autoAdvance && currentNode.nextDialogId) {
      const timer = setTimeout(() => {
        handleAdvanceDialog(currentNode.nextDialogId!);
      }, currentNode.autoAdvanceDelay || 2000);

      return () => clearTimeout(timer);
    }
  }, [currentNodeId, visible, currentNode]);

  // Handle advancing to next dialog node
  const handleAdvanceDialog = (nextNodeId?: string) => {
    // If no next node, end dialog
    if (!nextNodeId) {
      // Call onDialogComplete if provided
      if (onDialogComplete) {
        onDialogComplete(dialogState);
      }

      // Close dialog
      onClose();
      return;
    }

    // Set next node
    setCurrentNodeId(nextNodeId);
  };

  // Handle dialog choice selection
  const handleChoiceSelect = (choice: DialogChoice) => {
    // If disabled, do nothing
    if (choice.disabled) return;

    // Execute choice action if any
    let newState = { ...dialogState };
    if (choice.action) {
      newState = choice.action(newState);
      setDialogState(newState);
    }

    // Update relationship if specified
    if (choice.relationshipChange) {
      const { characterId, amount } = choice.relationshipChange;

      // Find character
      const charIndex = characters.findIndex(c => c.id === characterId);

      if (charIndex >= 0) {
        const character = characters[charIndex];

        // Update relationship within bounds
        const currentRelationship = character.relationship || 0;
        const newRelationship = Math.max(-100, Math.min(100, currentRelationship + amount));

        // Update character
        characters[charIndex] = {
          ...character,
          relationship: newRelationship,
        };
      }
    }

    // Advance to next dialog
    handleAdvanceDialog(choice.nextDialogId);
  };

  // Toggle dialog history view
  const toggleHistory = () => {
    setShowHistory(!showHistory);
  };

  // Format dialog text with potential variables
  const formatDialogText = (text: string) => {
    // Replace variables in form of {variable} with values from dialogState
    return text.replace(/\{(\w+)\}/g, (match, variable) => {
      return dialogState[variable] !== undefined ? dialogState[variable] : match;
    });
  };

  // Render character avatar with emotion
  const renderCharacterAvatar = () => {
    if (!currentCharacter) return null;

    return (
      <View style={styles.avatarContainer}>
        <Image
          source={currentCharacter.avatar}
          style={styles.avatar}
          accessibilityLabel={`${currentCharacter.name}'s avatar`}
        />

        {currentNode?.emotion && currentNode.emotion !== 'neutral' && (
          <View style={styles.emotionBadge}>
            <Text style={styles.emotionText}>
              {currentNode.emotion.charAt(0).toUpperCase() + currentNode.emotion.slice(1)}
            </Text>
          </View>
        )}
      </View>
    );
  };

  // Render dialog content
  const renderDialogContent = () => {
    if (!currentNode || !currentCharacter) return null;

    return (
      <View style={styles.dialogContent}>
        {/* Character name */}
        <View style={styles.characterNameContainer}>
          <Text variant="body1" style={styles.characterName}>
            {currentCharacter.name}
          </Text>

          {currentCharacter.role && (
            <Text variant="caption" style={styles.characterRole}>
              {currentCharacter.role}
            </Text>
          )}
        </View>

        {/* Dialog text */}
        <Animated.View style={[styles.textContainer, { opacity: textOpacity }]}>
          <Text variant="body1" style={styles.dialogText}>
            {formatDialogText(currentNode.text)}
          </Text>
        </Animated.View>

        {/* Dialog choices */}
        {currentNode.choices && currentNode.choices.length > 0 && (
          <Animated.View style={[styles.choicesContainer, { opacity: choicesOpacity }]}>
            {currentNode.choices.map((choice) => {
              // Check if choice is disabled by condition
              const isDisabled = choice.condition
                ? !choice.condition(dialogState)
                : !!choice.disabled;

              return (
                <TouchableOpacity
                  key={choice.id}
                  style={[
                    styles.choiceButton,
                    isDisabled && styles.disabledChoice,
                    { borderColor: theme.colors.primary }
                  ]}
                  onPress={() => choicesEnabled && handleChoiceSelect(choice)}
                  disabled={isDisabled || !choicesEnabled}
                  accessibilityRole="button"
                  accessibilityState={{ disabled: isDisabled }}
                  accessibilityLabel={choice.text}
                >
                  <Text
                    variant="body2"
                    style={[
                      styles.choiceText,
                      isDisabled && styles.disabledChoiceText
                    ]}
                  >
                    {formatDialogText(choice.text)}
                  </Text>
                </TouchableOpacity>
              );
            })}
          </Animated.View>
        )}

        {/* Continue button for auto-advance dialogs */}
        {(!currentNode.choices || currentNode.choices.length === 0) && currentNode.nextDialogId && (
          <TouchableOpacity
            style={[
              styles.continueButton,
              { backgroundColor: theme.colors.primary }
            ]}
            onPress={() => handleAdvanceDialog(currentNode.nextDialogId)}
            accessibilityRole="button"
            accessibilityLabel="Continue"
          >
            <Text color="#FFFFFF" style={styles.continueButtonText}>
              Continue
            </Text>
          </TouchableOpacity>
        )}
      </View>
    );
  };

  // Render dialog history
  const renderDialogHistory = () => {
    return (
      <ScrollView style={styles.historyContainer}>
        {dialogHistory.map((nodeId, index) => {
          const node = dialogNodes.find(n => n.id === nodeId);
          if (!node) return null;

          const character = characters.find(c => c.id === node.characterId);
          if (!character) return null;

          return (
            <View key={`${nodeId}-${index}`} style={styles.historyItem}>
              <Text variant="body2" style={styles.historyCharacter}>
                {character.name}:
              </Text>
              <Text variant="body2" style={styles.historyText}>
                {node.text}
              </Text>
            </View>
          );
        })}
      </ScrollView>
    );
  };

  // If not visible, return null
  if (!visible) return null;

  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="fade"
      onRequestClose={onClose}
    >
      <View style={styles.modalContainer}>
        <View style={[
          styles.dialogContainer,
          windowWidth < 768 ? styles.mobileDialog : styles.desktopDialog,
          style,
        ]}>
          {/* Dialog header */}
          <View style={styles.dialogHeader}>
            <Text variant="h3" style={styles.dialogTitle}>
              {dialogTitle}
            </Text>

            <View style={styles.dialogControls}>
              {/* History button */}
              <TouchableOpacity
                style={[
                  styles.controlButton,
                  showHistory && styles.activeControlButton,
                ]}
                onPress={toggleHistory}
                accessibilityRole="button"
                accessibilityLabel="Toggle dialog history"
                accessibilityHint="Shows previous conversation history"
              >
                <Text style={styles.controlButtonText}>📜</Text>
              </TouchableOpacity>

              {/* Close button */}
              <TouchableOpacity
                style={styles.controlButton}
                onPress={onClose}
                accessibilityRole="button"
                accessibilityLabel="Close dialog"
              >
                <Text style={styles.controlButtonText}>✕</Text>
              </TouchableOpacity>
            </View>
          </View>

          {/* Dialog body */}
          <View style={styles.dialogBody}>
            {showHistory ? (
              renderDialogHistory()
            ) : (
              <>
                {/* Character avatar */}
                {renderCharacterAvatar()}

                {/* Dialog content */}
                {renderDialogContent()}
              </>
            )}
          </View>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
  },
  dialogContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    overflow: 'hidden',
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 5 },
    shadowOpacity: 0.2,
    shadowRadius: 8,
  },
  mobileDialog: {
    width: '90%',
    maxHeight: '80%',
  },
  desktopDialog: {
    width: '60%',
    maxWidth: 800,
    maxHeight: '80%',
  },
  dialogHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0, 0, 0, 0.1)',
    backgroundColor: 'rgba(0, 0, 0, 0.03)',
  },
  dialogTitle: {
    fontWeight: 'bold',
  },
  dialogControls: {
    flexDirection: 'row',
  },
  controlButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: 'rgba(0, 0, 0, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    marginLeft: 8,
  },
  activeControlButton: {
    backgroundColor: 'rgba(0, 0, 0, 0.2)',
  },
  controlButtonText: {
    fontSize: 16,
  },
  dialogBody: {
    padding: 20,
  },
  avatarContainer: {
    alignItems: 'center',
    marginBottom: 20,
    position: 'relative',
  },
  avatar: {
    width: 120,
    height: 120,
    borderRadius: 60,
    borderWidth: 2,
    borderColor: 'rgba(0, 0, 0, 0.1)',
  },
  emotionBadge: {
    position: 'absolute',
    bottom: 0,
    right: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 12,
  },
  emotionText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: 'bold',
  },
  dialogContent: {
    flex: 1,
  },
  characterNameContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 12,
  },
  characterName: {
    fontWeight: 'bold',
    fontSize: 18,
    marginRight: 8,
  },
  characterRole: {
    opacity: 0.7,
  },
  textContainer: {
    backgroundColor: 'rgba(0, 0, 0, 0.03)',
    padding: 16,
    borderRadius: 8,
    marginBottom: 20,
  },
  dialogText: {
    fontSize: 16,
    lineHeight: 24,
  },
  choicesContainer: {
    marginBottom: 16,
  },
  choiceButton: {
    marginBottom: 10,
    padding: 12,
    borderRadius: 8,
    borderWidth: 1,
    backgroundColor: 'rgba(255, 255, 255, 0.5)',
  },
  disabledChoice: {
    opacity: 0.5,
    borderColor: 'rgba(0, 0, 0, 0.1) !important',
  },
  choiceText: {
    fontSize: 14,
  },
  disabledChoiceText: {
    color: 'rgba(0, 0, 0, 0.4)',
  },
  continueButton: {
    alignSelf: 'center',
    paddingHorizontal: 24,
    paddingVertical: 12,
    borderRadius: 24,
  },
  continueButtonText: {
    fontWeight: 'bold',
  },
  historyContainer: {
    maxHeight: 400,
  },
  historyItem: {
    marginBottom: 12,
    padding: 12,
    backgroundColor: 'rgba(0, 0, 0, 0.03)',
    borderRadius: 8,
  },
  historyCharacter: {
    fontWeight: 'bold',
    marginBottom: 4,
  },
  historyText: {
    opacity: 0.8,
  },
});

export default DialogSystem;
</file>

<file path="apps/expo/components/functions/index.ts">
export { default as LoginScreen } from './LoginScreen';
export { default as MainGameInterface } from './MainGameInterface';
export { default as Leaderboard } from './Leaderboard';
export { default as AchievementList } from './AchievementList';

// Types
export type {
  MainGameTabName,
  ResourceDisplay,
  GameNotification,
  GameTab,
  MainGameScreenProps
} from './MainGameInterface';

export type {
  LeaderboardPlayer,
  LeaderboardPeriod,
  LeaderboardProps
} from './Leaderboard';

export type {
  Achievement,
  AchievementListProps
} from './AchievementList';
</file>

<file path="apps/expo/components/functions/InventoryTypes.ts">
import { ThemeStyleType } from '../../utils/theme';

// Item rarity levels
export type ItemRarity = 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';

// Item types/categories
export type ItemType =
  | 'weapon'
  | 'armor'
  | 'accessory'
  | 'consumable'
  | 'material'
  | 'quest'
  | 'special';

// Inventory item data structure
export interface InventoryItem {
  id: string;
  name: string;
  description?: string;
  icon: any; // Image source
  type: ItemType;
  rarity: ItemRarity;
  quantity: number;
  maxStack?: number;
  value?: number; // In-game currency value
  level?: number; // Required level
  equipped?: boolean;
  locked?: boolean;
  stats?: {
    [key: string]: number;
  };
  effects?: string[];
  favorite?: boolean;
}

// Inventory tab for categorization
export interface InventoryTab {
  id: string;
  label: string;
  icon: any;
  filter?: (item: InventoryItem) => boolean;
}

// Layout types
export type InventoryLayout = 'grid' | 'list' | 'detailed';

// Sort options
export type InventorySortOption =
  | 'name-asc'
  | 'name-desc'
  | 'rarity-asc'
  | 'rarity-desc'
  | 'level-asc'
  | 'level-desc'
  | 'value-asc'
  | 'value-desc'
  | 'quantity-asc'
  | 'quantity-desc';

// Item action types
export type ItemAction =
  | 'use'
  | 'equip'
  | 'unequip'
  | 'sell'
  | 'discard'
  | 'lock'
  | 'unlock'
  | 'favorite'
  | 'unfavorite';

// Props for the InventorySystem component
export interface InventorySystemProps {
  items: InventoryItem[];
  tabs?: InventoryTab[];
  defaultTab?: string;
  maxCapacity?: number;
  layout?: InventoryLayout;
  sortOption?: InventorySortOption;
  searchEnabled?: boolean;
  emptyStateMessage?: string;
  themeStyle?: ThemeStyleType;
  onItemPress?: (item: InventoryItem) => void;
  onItemAction?: (item: InventoryItem, action: ItemAction) => void;
  onSort?: (option: InventorySortOption) => void;
  onSearch?: (query: string) => void;
  onTabChange?: (tabId: string) => void;
}

// Item details modal props
export interface ItemDetailsProps {
  item: InventoryItem;
  visible: boolean;
  onClose: () => void;
  onAction: (action: ItemAction) => void;
  themeStyle?: ThemeStyleType;
}

// Color scheme for rarity levels
export const RARITY_COLORS = {
  common: '#B0BEC5',      // Gray
  uncommon: '#4CAF50',    // Green
  rare: '#2196F3',        // Blue
  epic: '#9C27B0',        // Purple
  legendary: '#FFC107',   // Gold
};

// Default sorting function
export const sortItems = (
  items: InventoryItem[],
  sortOption: InventorySortOption
): InventoryItem[] => {
  const sortedItems = [...items];

  switch (sortOption) {
    case 'name-asc':
      return sortedItems.sort((a, b) => a.name.localeCompare(b.name));
    case 'name-desc':
      return sortedItems.sort((a, b) => b.name.localeCompare(a.name));
    case 'rarity-asc':
      return sortedItems.sort((a, b) => {
        const rarityOrder = { common: 1, uncommon: 2, rare: 3, epic: 4, legendary: 5 };
        return rarityOrder[a.rarity] - rarityOrder[b.rarity];
      });
    case 'rarity-desc':
      return sortedItems.sort((a, b) => {
        const rarityOrder = { common: 1, uncommon: 2, rare: 3, epic: 4, legendary: 5 };
        return rarityOrder[b.rarity] - rarityOrder[a.rarity];
      });
    case 'level-asc':
      return sortedItems.sort((a, b) => (a.level || 0) - (b.level || 0));
    case 'level-desc':
      return sortedItems.sort((a, b) => (b.level || 0) - (a.level || 0));
    case 'value-asc':
      return sortedItems.sort((a, b) => (a.value || 0) - (b.value || 0));
    case 'value-desc':
      return sortedItems.sort((a, b) => (b.value || 0) - (a.value || 0));
    case 'quantity-asc':
      return sortedItems.sort((a, b) => a.quantity - b.quantity);
    case 'quantity-desc':
      return sortedItems.sort((a, b) => b.quantity - a.quantity);
    default:
      return sortedItems;
  }
};

// Stats display formats
export const STAT_DISPLAY_NAMES: Record<string, string> = {
  attack: 'Attack',
  defense: 'Defense',
  hp: 'Health',
  mp: 'Mana',
  speed: 'Speed',
  strength: 'Strength',
  dexterity: 'Dexterity',
  intelligence: 'Intelligence',
  vitality: 'Vitality',
  luck: 'Luck',
  critRate: 'Critical Rate',
  critDamage: 'Critical Damage',
  // Add more stats as needed
};
</file>

<file path="apps/expo/components/functions/ItemDetailsModal.tsx">
import React from 'react';
import {
  View,
  StyleSheet,
  Image,
  TouchableOpacity,
  Modal,
  ScrollView,
  Dimensions,
} from 'react-native';
import { ItemDetailsProps, RARITY_COLORS, STAT_DISPLAY_NAMES, ItemAction } from './InventoryTypes';
import { useTheme } from '../../utils/theme';
import { Text, Button } from '../core';

export const ItemDetailsModal: React.FC<ItemDetailsProps> = ({
  item,
  visible,
  onClose,
  onAction,
  themeStyle,
}) => {
  const { theme } = useTheme();
  const screenWidth = Dimensions.get('window').width;

  // Determine which actions are available for this item
  const getAvailableActions = (): { action: ItemAction; label: string }[] => {
    const actions: { action: ItemAction; label: string }[] = [];

    // Equipment actions
    if (item.equipped) {
      actions.push({ action: 'unequip', label: 'Unequip' });
    } else if (['weapon', 'armor', 'accessory'].includes(item.type)) {
      actions.push({ action: 'equip', label: 'Equip' });
    }

    // Consumable items
    if (item.type === 'consumable') {
      actions.push({ action: 'use', label: 'Use' });
    }

    // General actions
    actions.push({ action: 'sell', label: 'Sell' });

    if (item.locked) {
      actions.push({ action: 'unlock', label: 'Unlock' });
    } else {
      actions.push({ action: 'lock', label: 'Lock' });
    }

    if (item.favorite) {
      actions.push({ action: 'unfavorite', label: 'Remove Favorite' });
    } else {
      actions.push({ action: 'favorite', label: 'Favorite' });
    }

    actions.push({ action: 'discard', label: 'Discard' });

    return actions;
  };

  // Get the color for the item's rarity
  const getRarityColor = () => {
    return RARITY_COLORS[item.rarity] || RARITY_COLORS.common;
  };

  // Get the background for the modal based on theme and rarity
  const getModalBackground = () => {
    switch (themeStyle) {
      case 'chineseStyle':
        return {
          backgroundColor: 'rgba(28, 28, 28, 0.95)',
          borderWidth: 1,
          borderColor: getRarityColor(),
        };
      case 'animeStyle':
        return {
          backgroundColor: 'rgba(255, 255, 255, 0.95)',
          borderRadius: 20,
          borderWidth: 2,
          borderColor: getRarityColor(),
        };
      case 'sciFiStyle':
        return {
          backgroundColor: 'rgba(10, 10, 10, 0.95)',
          borderWidth: 1,
          borderColor: getRarityColor(),
        };
      case 'qStyleCartoon':
        return {
          backgroundColor: 'rgba(255, 255, 255, 0.95)',
          borderRadius: 30,
          borderWidth: 3,
          borderColor: getRarityColor(),
        };
      case 'militaryStyle':
        return {
          backgroundColor: 'rgba(38, 50, 56, 0.95)',
          borderWidth: 2,
          borderColor: getRarityColor(),
        };
      default:
        return {
          backgroundColor: 'rgba(30, 30, 30, 0.95)',
          borderWidth: 1,
          borderColor: getRarityColor(),
        };
    }
  };

  // Format the rarity text
  const getRarityText = () => {
    return item.rarity.charAt(0).toUpperCase() + item.rarity.slice(1);
  };

  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="fade"
      onRequestClose={onClose}
    >
      <View style={styles.overlay}>
        <View style={[styles.modalContainer, getModalBackground()]}>
          {/* Header with close button */}
          <View style={styles.header}>
            <View style={styles.headerTitleContainer}>
              <Text
                variant="h3"
                style={[styles.itemName, { color: getRarityColor() }]}
              >
                {item.name}
              </Text>
              <View style={[styles.rarityBadge, { backgroundColor: getRarityColor() }]}>
                <Text variant="caption" color="#FFFFFF">
                  {getRarityText()}
                </Text>
              </View>
            </View>
            <TouchableOpacity onPress={onClose} style={styles.closeButton}>
              <Text variant="h3">✕</Text>
            </TouchableOpacity>
          </View>

          {/* Item content */}
          <ScrollView style={styles.contentScroll}>
            <View style={styles.itemContent}>
              {/* Item image and basic info */}
              <View style={styles.itemBasicInfo}>
                <View style={[styles.imageContainer, { borderColor: getRarityColor() }]}>
                  <Image
                    source={item.icon}
                    style={styles.itemImage}
                    resizeMode="contain"
                  />
                  {item.equipped && (
                    <View style={styles.equippedBadge}>
                      <Text variant="caption" color="#FFFFFF">
                        Equipped
                      </Text>
                    </View>
                  )}
                  {item.locked && (
                    <View style={styles.lockedIndicator}>
                      <Text variant="body1">🔒</Text>
                    </View>
                  )}
                  {item.favorite && (
                    <View style={styles.favoriteIndicator}>
                      <Text variant="body1">⭐</Text>
                    </View>
                  )}
                </View>

                <View style={styles.itemMetaInfo}>
                  <Text variant="body2" style={styles.itemTypeText}>
                    {item.type.charAt(0).toUpperCase() + item.type.slice(1)}
                  </Text>

                  {item.level !== undefined && (
                    <Text variant="body2" style={styles.itemLevelText}>
                      Level Req: {item.level}
                    </Text>
                  )}

                  {item.value !== undefined && (
                    <Text variant="body2" style={styles.itemValueText}>
                      Value: {item.value} gold
                    </Text>
                  )}

                  <Text variant="body2" style={styles.itemQuantityText}>
                    Quantity: {item.quantity}
                    {item.maxStack ? `/${item.maxStack}` : ''}
                  </Text>
                </View>
              </View>

              {/* Item description */}
              {item.description && (
                <View style={styles.descriptionContainer}>
                  <Text variant="body1" style={styles.descriptionText}>
                    {item.description}
                  </Text>
                </View>
              )}

              {/* Item stats */}
              {item.stats && Object.keys(item.stats).length > 0 && (
                <View style={styles.statsContainer}>
                  <Text variant="h4" style={styles.sectionTitle}>
                    Stats
                  </Text>
                  {Object.entries(item.stats).map(([statKey, statValue]) => (
                    <View key={statKey} style={styles.statRow}>
                      <Text variant="body2" style={styles.statName}>
                        {STAT_DISPLAY_NAMES[statKey] || statKey}
                      </Text>
                      <Text
                        variant="body2"
                        style={[styles.statValue, { color: statValue > 0 ? '#4CAF50' : '#F44336' }]}
                      >
                        {statValue > 0 ? '+' : ''}{statValue}
                      </Text>
                    </View>
                  ))}
                </View>
              )}

              {/* Item effects */}
              {item.effects && item.effects.length > 0 && (
                <View style={styles.effectsContainer}>
                  <Text variant="h4" style={styles.sectionTitle}>
                    Effects
                  </Text>
                  {item.effects.map((effect, index) => (
                    <View key={index} style={styles.effectRow}>
                      <Text variant="caption" style={styles.effectBullet}>
                        •
                      </Text>
                      <Text variant="body2" style={styles.effectText}>
                        {effect}
                      </Text>
                    </View>
                  ))}
                </View>
              )}
            </View>
          </ScrollView>

          {/* Action buttons */}
          <View style={styles.actionsContainer}>
            {getAvailableActions().map((actionItem, index) => (
              <Button
                key={actionItem.action}
                title={actionItem.label}
                variant={
                  actionItem.action === 'discard'
                    ? 'outline'
                    : actionItem.action === 'equip' || actionItem.action === 'use'
                    ? 'primary'
                    : 'secondary'
                }
                size="small"
                style={[
                  styles.actionButton,
                  // Different styling for destructive actions
                  actionItem.action === 'discard' && { borderColor: '#F44336' },
                ]}
                textStyle={
                  actionItem.action === 'discard' ? { color: '#F44336' } : undefined
                }
                onPress={() => onAction(actionItem.action)}
              />
            ))}
          </View>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  overlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.7)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContainer: {
    width: '90%',
    maxHeight: '80%',
    borderRadius: 16,
    overflow: 'hidden',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(255, 255, 255, 0.1)',
  },
  headerTitleContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
  },
  itemName: {
    flex: 1,
    marginRight: 8,
  },
  rarityBadge: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    borderRadius: 8,
  },
  closeButton: {
    padding: 8,
  },
  contentScroll: {
    maxHeight: 400,
  },
  itemContent: {
    padding: 16,
  },
  itemBasicInfo: {
    flexDirection: 'row',
    marginBottom: 16,
  },
  imageContainer: {
    width: 100,
    height: 100,
    backgroundColor: 'rgba(0, 0, 0, 0.2)',
    borderRadius: 12,
    borderWidth: 2,
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
  },
  itemImage: {
    width: 80,
    height: 80,
  },
  equippedBadge: {
    position: 'absolute',
    bottom: -8,
    backgroundColor: '#4CAF50',
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 8,
  },
  lockedIndicator: {
    position: 'absolute',
    top: -8,
    right: -8,
    backgroundColor: '#F44336',
    width: 24,
    height: 24,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
  },
  favoriteIndicator: {
    position: 'absolute',
    top: -8,
    left: -8,
    backgroundColor: '#FFC107',
    width: 24,
    height: 24,
    borderRadius: 12,
    justifyContent: 'center',
    alignItems: 'center',
  },
  itemMetaInfo: {
    flex: 1,
    marginLeft: 16,
    justifyContent: 'center',
  },
  itemTypeText: {
    marginBottom: 4,
  },
  itemLevelText: {
    marginBottom: 4,
  },
  itemValueText: {
    marginBottom: 4,
  },
  itemQuantityText: {
    marginBottom: 4,
  },
  descriptionContainer: {
    backgroundColor: 'rgba(0, 0, 0, 0.1)',
    padding: 12,
    borderRadius: 8,
    marginBottom: 16,
  },
  descriptionText: {
    fontStyle: 'italic',
  },
  sectionTitle: {
    marginBottom: 8,
  },
  statsContainer: {
    marginBottom: 16,
  },
  statRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    paddingVertical: 4,
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderBottomColor: 'rgba(255, 255, 255, 0.1)',
  },
  statName: {
    flex: 1,
  },
  statValue: {
    fontWeight: 'bold',
  },
  effectsContainer: {
    marginBottom: 16,
  },
  effectRow: {
    flexDirection: 'row',
    alignItems: 'flex-start',
    marginBottom: 4,
  },
  effectBullet: {
    marginRight: 8,
  },
  effectText: {
    flex: 1,
  },
  actionsContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'flex-end',
    borderTopWidth: 1,
    borderTopColor: 'rgba(255, 255, 255, 0.1)',
    padding: 16,
  },
  actionButton: {
    marginLeft: 8,
    marginBottom: 8,
  },
});

export default ItemDetailsModal;
</file>

<file path="apps/expo/components/functions/Leaderboard.tsx">
import React from 'react';
import {
  View,
  StyleSheet,
  FlatList,
  Image,
  TouchableOpacity,
  ActivityIndicator,
  Dimensions,
} from 'react-native';
import { useTheme } from '../../utils/theme';
import { Text, Card } from '../core';
import { AccessibilityHelpers } from '../../utils/platform';

// Player data structure for leaderboard entries
export interface LeaderboardPlayer {
  id: string;
  rank: number;
  name: string;
  score: number;
  avatar?: any; // Image source
  isCurrentUser?: boolean;
  additionalInfo?: {
    [key: string]: string | number; // For additional stats like "Games Played", "Win Rate", etc.
  };
}

// Time period filter options
export type LeaderboardPeriod = 'daily' | 'weekly' | 'monthly' | 'allTime';

// Leaderboard component props
export interface LeaderboardProps {
  title?: string;
  players: LeaderboardPlayer[];
  loading?: boolean;
  maxPlayersToShow?: number;
  selectedPeriod?: LeaderboardPeriod;
  onPeriodChange?: (period: LeaderboardPeriod) => void;
  onPlayerPress?: (player: LeaderboardPlayer) => void;
  showRankChange?: boolean;
  highlightTopThree?: boolean;
  showDetails?: boolean;
  statToShow?: string;
  themeStyle?: string;
  style?: any;
}

const Leaderboard: React.FC<LeaderboardProps> = ({
  title = 'Leaderboard',
  players,
  loading = false,
  maxPlayersToShow = 10,
  selectedPeriod = 'weekly',
  onPeriodChange,
  onPlayerPress,
  showRankChange = false,
  highlightTopThree = true,
  showDetails = false,
  statToShow = 'score',
  themeStyle,
  style,
}) => {
  const { theme } = useTheme();
  const windowWidth = Dimensions.get('window').width;
  const isMobileView = windowWidth < 600;

  // Filter to show only the specified number of players
  const displayedPlayers = players.slice(0, maxPlayersToShow);

  // Function to render medal instead of rank number for top 3 players
  const renderRank = (rank: number) => {
    if (!highlightTopThree || rank > 3) {
      return (
        <View style={styles.rankContainer}>
          <Text
            variant="body1"
            style={styles.rankText}
            {...AccessibilityHelpers.combineA11yProps(`Rank ${rank}`, '')}
          >
            {rank}
          </Text>
        </View>
      );
    }

    // Medal colors for top 3
    const medalColors = ['#FFD700', '#C0C0C0', '#CD7F32']; // Gold, Silver, Bronze
    const medalNames = ['Gold', 'Silver', 'Bronze'];

    return (
      <View
        style={[styles.medalContainer, { backgroundColor: medalColors[rank - 1] }]}
        {...AccessibilityHelpers.combineA11yProps(`${medalNames[rank - 1]} medal, Rank ${rank}`, '')}
      >
        <Text style={styles.medalText}>{rank}</Text>
      </View>
    );
  };

  // Render period selection tabs
  const renderPeriodTabs = () => {
    const periods: LeaderboardPeriod[] = ['daily', 'weekly', 'monthly', 'allTime'];
    const periodLabels = {
      daily: 'Daily',
      weekly: 'Weekly',
      monthly: 'Monthly',
      allTime: 'All Time',
    };

    return (
      <View style={styles.periodTabsContainer}>
        {periods.map((period) => (
          <TouchableOpacity
            key={period}
            style={[
              styles.periodTab,
              selectedPeriod === period && styles.selectedPeriodTab,
              { borderColor: theme.colors.primary },
              selectedPeriod === period && { backgroundColor: theme.colors.primary + '20' },
            ]}
            onPress={() => onPeriodChange && onPeriodChange(period)}
            accessibilityRole="tab"
            accessibilityState={{ selected: selectedPeriod === period }}
            accessibilityLabel={`${periodLabels[period]} leaderboard`}
          >
            <Text
              variant="body2"
              color={selectedPeriod === period ? theme.colors.primary : undefined}
            >
              {periodLabels[period]}
            </Text>
          </TouchableOpacity>
        ))}
      </View>
    );
  };

  // Render a player item in the leaderboard
  const renderPlayerItem = ({ item }: { item: LeaderboardPlayer }) => {
    const isTopThree = item.rank <= 3 && highlightTopThree;

    return (
      <TouchableOpacity
        style={[
          styles.playerContainer,
          item.isCurrentUser && styles.currentUserContainer,
          isTopThree && styles.topThreeContainer,
        ]}
        onPress={() => onPlayerPress && onPlayerPress(item)}
        disabled={!onPlayerPress}
        {...AccessibilityHelpers.combineA11yProps(
          `${item.name}, Rank ${item.rank}, Score ${item.score}`,
          item.isCurrentUser ? 'This is you' : ''
        )}
      >
        {/* Rank */}
        <View style={styles.rankSection}>
          {renderRank(item.rank)}
          {showRankChange && (
            <View style={styles.rankChangeContainer}>
              {/* This would typically show a rank change indicator */}
              {/* For now, using a placeholder */}
            </View>
          )}
        </View>

        {/* Player info */}
        <View style={styles.playerInfoSection}>
          {/* Avatar */}
          <View style={styles.avatarContainer}>
            {item.avatar ? (
              <Image source={item.avatar} style={styles.avatar} />
            ) : (
              <View style={[styles.defaultAvatar, { backgroundColor: theme.colors.primary }]}>
                <Text color="#FFFFFF" style={styles.avatarInitial}>
                  {item.name.charAt(0).toUpperCase()}
                </Text>
              </View>
            )}
          </View>

          {/* Name and details */}
          <View style={styles.nameContainer}>
            <Text
              variant="body1"
              style={[
                styles.playerName,
                item.isCurrentUser && styles.currentUserText,
                isTopThree && styles.topThreeText,
              ]}
              numberOfLines={1}
            >
              {item.name}
              {item.isCurrentUser && ' (You)'}
            </Text>

            {showDetails && item.additionalInfo && (
              <Text variant="caption" style={styles.additionalInfo}>
                {Object.entries(item.additionalInfo)
                  .map(([key, value]) => `${key}: ${value}`)
                  .join(' • ')}
              </Text>
            )}
          </View>
        </View>

        {/* Score */}
        <View style={styles.scoreSection}>
          <Text
            variant="body1"
            style={[
              styles.scoreText,
              item.isCurrentUser && styles.currentUserText,
              isTopThree && styles.topThreeText,
            ]}
          >
            {statToShow === 'score' ? item.score.toLocaleString() : item.additionalInfo?.[statToShow]}
          </Text>
        </View>
      </TouchableOpacity>
    );
  };

  // Function to render the leaderboard header
  const renderHeader = () => {
    return (
      <View style={styles.headerContainer}>
        <View style={styles.rankSection}>
          <Text variant="caption" style={styles.headerText}>
            RANK
          </Text>
        </View>
        <View style={styles.playerInfoSection}>
          <Text variant="caption" style={styles.headerText}>
            PLAYER
          </Text>
        </View>
        <View style={styles.scoreSection}>
          <Text variant="caption" style={styles.headerText}>
            {statToShow === 'score' ? 'SCORE' : statToShow.toUpperCase()}
          </Text>
        </View>
      </View>
    );
  };

  // Function to handle empty state
  const renderEmptyState = () => {
    if (loading) {
      return (
        <View style={styles.emptyContainer}>
          <ActivityIndicator size="large" color={theme.colors.primary} />
          <Text variant="body1" style={styles.emptyText}>
            Loading leaderboard...
          </Text>
        </View>
      );
    }

    return (
      <View style={styles.emptyContainer}>
        <Text variant="body1" style={styles.emptyText}>
          No players found for this leaderboard.
        </Text>
      </View>
    );
  };

  return (
    <Card
      title={title}
      style={[styles.container, style]}
      {...AccessibilityHelpers.combineA11yProps(`${title}`, 'Displays player rankings')}
    >
      {/* Period tabs */}
      {onPeriodChange && renderPeriodTabs()}

      {/* Leaderboard content */}
      <View style={styles.leaderboardContainer}>
        {players.length > 0 && renderHeader()}

        <FlatList
          data={displayedPlayers}
          renderItem={renderPlayerItem}
          keyExtractor={(item) => item.id}
          contentContainerStyle={styles.listContent}
          ListEmptyComponent={renderEmptyState}
          scrollEnabled={!isMobileView || displayedPlayers.length > 5}
          showsVerticalScrollIndicator={!isMobileView}
        />
      </View>
    </Card>
  );
};

const styles = StyleSheet.create({
  container: {
    overflow: 'hidden',
  },
  periodTabsContainer: {
    flexDirection: 'row',
    marginBottom: 16,
    paddingHorizontal: 8,
  },
  periodTab: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    marginRight: 8,
    borderRadius: 16,
    borderWidth: 1,
  },
  selectedPeriodTab: {
    borderWidth: 1,
  },
  leaderboardContainer: {
    flex: 1,
  },
  headerContainer: {
    flexDirection: 'row',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0, 0, 0, 0.1)',
  },
  headerText: {
    fontWeight: 'bold',
    opacity: 0.7,
  },
  listContent: {
    flexGrow: 1,
  },
  playerContainer: {
    flexDirection: 'row',
    paddingVertical: 12,
    paddingHorizontal: 16,
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderBottomColor: 'rgba(0, 0, 0, 0.1)',
    alignItems: 'center',
  },
  currentUserContainer: {
    backgroundColor: 'rgba(0, 120, 255, 0.1)',
  },
  topThreeContainer: {
    backgroundColor: 'rgba(255, 215, 0, 0.05)',
  },
  rankSection: {
    width: 50,
    alignItems: 'center',
    justifyContent: 'center',
  },
  rankContainer: {
    width: 30,
    height: 30,
    borderRadius: 15,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.05)',
  },
  rankText: {
    fontWeight: 'bold',
  },
  rankChangeContainer: {
    marginTop: 4,
  },
  medalContainer: {
    width: 30,
    height: 30,
    borderRadius: 15,
    alignItems: 'center',
    justifyContent: 'center',
  },
  medalText: {
    color: '#FFFFFF',
    fontWeight: 'bold',
  },
  playerInfoSection: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
  },
  avatarContainer: {
    marginRight: 12,
  },
  avatar: {
    width: 36,
    height: 36,
    borderRadius: 18,
  },
  defaultAvatar: {
    width: 36,
    height: 36,
    borderRadius: 18,
    alignItems: 'center',
    justifyContent: 'center',
  },
  avatarInitial: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  nameContainer: {
    flex: 1,
  },
  playerName: {
    fontWeight: '500',
  },
  currentUserText: {
    fontWeight: 'bold',
  },
  topThreeText: {
    fontWeight: 'bold',
  },
  additionalInfo: {
    opacity: 0.7,
    marginTop: 2,
  },
  scoreSection: {
    width: 80,
    alignItems: 'flex-end',
  },
  scoreText: {
    fontWeight: '500',
  },
  emptyContainer: {
    padding: 24,
    alignItems: 'center',
  },
  emptyText: {
    textAlign: 'center',
    marginTop: 12,
    opacity: 0.7,
  },
});

export default Leaderboard;
</file>

<file path="apps/expo/components/functions/LoginScreen.tsx">
import React, { useState } from 'react';
import {
  View,
  StyleSheet,
  ImageBackground,
  KeyboardAvoidingView,
  Platform,
  Image,
  TouchableOpacity,
  ScrollView,
  Dimensions,
} from 'react-native';
import { useTheme, ThemeStyleType } from '../../utils/theme';
import { Button, Card, Input, Text } from '../core';

interface LoginScreenProps {
  onLogin: (username: string, password: string) => void;
  onRegister?: () => void;
  onForgotPassword?: () => void;
  loading?: boolean;
  error?: string;
  logoSource?: any;
  backgroundSource?: any;
  themeStyle?: ThemeStyleType;
}

export const LoginScreen: React.FC<LoginScreenProps> = ({
  onLogin,
  onRegister,
  onForgotPassword,
  loading = false,
  error,
  logoSource,
  backgroundSource,
  themeStyle,
}) => {
  const { theme } = useTheme();
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [showPassword, setShowPassword] = useState(false);

  const screenWidth = Dimensions.get('window').width;
  const isTablet = screenWidth > 768;

  // Get login card styles based on current theme
  const getLoginCardStyle = () => {
    switch (themeStyle) {
      case 'chineseStyle':
        return {
          backgroundColor: 'rgba(28, 28, 28, 0.85)',
          borderColor: theme.colors.accent,
          borderWidth: 1,
        };
      case 'animeStyle':
        return {
          backgroundColor: 'rgba(255, 255, 255, 0.9)',
          borderRadius: 20,
        };
      case 'sciFiStyle':
        return {
          backgroundColor: 'rgba(10, 10, 10, 0.8)',
          borderColor: theme.colors.accent,
          borderWidth: 1,
          borderRadius: 4,
        };
      case 'qStyleCartoon':
        return {
          backgroundColor: 'rgba(255, 255, 255, 0.9)',
          borderRadius: 30,
        };
      case 'militaryStyle':
        return {
          backgroundColor: 'rgba(38, 50, 56, 0.9)',
          borderColor: theme.colors.accent,
          borderWidth: 2,
          borderRadius: 2,
        };
      default:
        return {
          backgroundColor: 'rgba(30, 30, 30, 0.85)',
        };
    }
  };

  // Get button styles based on current theme
  const getButtonStyle = () => {
    switch (themeStyle) {
      case 'chineseStyle':
        return {
          buttonStyle: { borderRadius: 4 },
        };
      case 'animeStyle':
        return {
          buttonStyle: { borderRadius: 30 },
        };
      case 'sciFiStyle':
        return {
          buttonStyle: { borderRadius: 0 },
        };
      case 'qStyleCartoon':
        return {
          buttonStyle: { borderRadius: 20, height: 50 },
        };
      case 'militaryStyle':
        return {
          buttonStyle: { borderRadius: 0, height: 50 },
        };
      default:
        return {};
    }
  };

  // Handle login form submission
  const handleLogin = () => {
    if (username.trim() && password.trim()) {
      onLogin(username, password);
    }
  };

  return (
    <ImageBackground
      source={backgroundSource || require('../../assets/images/placeholder.png')}
      style={styles.background}
      resizeMode="cover"
    >
      <KeyboardAvoidingView
        behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
        style={styles.container}
      >
        <ScrollView
          contentContainerStyle={styles.scrollContent}
          keyboardShouldPersistTaps="handled"
        >
          <View style={[styles.loginContainer, isTablet && styles.tabletContainer]}>
            {/* Logo */}
            <View style={styles.logoContainer}>
              <Image
                source={logoSource || require('../../assets/images/react-logo.png')}
                style={styles.logo}
                resizeMode="contain"
              />
            </View>

            {/* Login Form */}
            <Card
              style={[styles.loginCard, getLoginCardStyle()]}
              variant="elevated"
            >
              <Text
                variant="h2"
                align="center"
                style={styles.title}
              >
                Welcome Back
              </Text>

              {error && (
                <View style={styles.errorContainer}>
                  <Text color="red">{error}</Text>
                </View>
              )}

              <Input
                label="Username"
                value={username}
                onChangeText={setUsername}
                placeholder="Enter your username"
                variant="outlined"
                disabled={loading}
                style={styles.input}
              />

              <Input
                label="Password"
                value={password}
                onChangeText={setPassword}
                placeholder="Enter your password"
                secureTextEntry={!showPassword}
                variant="outlined"
                disabled={loading}
                style={styles.input}
                rightIcon={
                  <TouchableOpacity
                    onPress={() => setShowPassword(!showPassword)}
                  >
                    <Text
                      color={theme.colors.gray}
                      variant="caption"
                    >
                      {showPassword ? 'Hide' : 'Show'}
                    </Text>
                  </TouchableOpacity>
                }
              />

              <Button
                title="Login"
                onPress={handleLogin}
                variant="primary"
                loading={loading}
                disabled={loading || !username || !password}
                style={[styles.loginButton, getButtonStyle().buttonStyle]}
                fullWidth
              />

              {onForgotPassword && (
                <TouchableOpacity
                  onPress={onForgotPassword}
                  style={styles.forgotPassword}
                  disabled={loading}
                >
                  <Text
                    variant="caption"
                    color={theme.colors.accent}
                    align="center"
                  >
                    Forgot Password?
                  </Text>
                </TouchableOpacity>
              )}

              {onRegister && (
                <View style={styles.registerContainer}>
                  <Text
                    variant="body2"
                    color={theme.colors.text}
                    align="center"
                  >
                    Don't have an account?{' '}
                  </Text>
                  <TouchableOpacity
                    onPress={onRegister}
                    disabled={loading}
                  >
                    <Text
                      variant="body2"
                      color={theme.colors.accent}
                      style={styles.registerText}
                    >
                      Register Now
                    </Text>
                  </TouchableOpacity>
                </View>
              )}
            </Card>
          </View>
        </ScrollView>
      </KeyboardAvoidingView>
    </ImageBackground>
  );
};

const styles = StyleSheet.create({
  background: {
    flex: 1,
    width: '100%',
    height: '100%',
  },
  container: {
    flex: 1,
  },
  scrollContent: {
    flexGrow: 1,
    justifyContent: 'center',
    padding: 16,
  },
  loginContainer: {
    width: '100%',
    maxWidth: 400,
    alignSelf: 'center',
  },
  tabletContainer: {
    maxWidth: 500,
  },
  logoContainer: {
    alignItems: 'center',
    marginBottom: 20,
  },
  logo: {
    width: 120,
    height: 120,
  },
  loginCard: {
    padding: 16,
  },
  title: {
    marginBottom: 24,
  },
  input: {
    marginBottom: 16,
  },
  loginButton: {
    marginTop: 16,
  },
  errorContainer: {
    marginBottom: 16,
    padding: 12,
    backgroundColor: 'rgba(255, 0, 0, 0.1)',
    borderRadius: 4,
    alignItems: 'center',
  },
  forgotPassword: {
    marginTop: 16,
    padding: 8,
  },
  registerContainer: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginTop: 16,
    padding: 8,
  },
  registerText: {
    textDecorationLine: 'underline',
  },
});

export default LoginScreen;
</file>

<file path="apps/expo/components/functions/MainGameInterface.tsx">
import React, { useState } from 'react';
import {
  View,
  StyleSheet,
  Image,
  TouchableOpacity,
  ImageBackground,
  ScrollView,
  Dimensions,
  Modal,
  Alert,
} from 'react-native';
import { useTheme, ThemeStyleType } from '../../utils/theme';
import { Button, Card, Text } from '../core';

// Default avatar and icons
const DEFAULT_AVATAR = require('../../assets/images/placeholder.png');
const DEFAULT_CURRENCY_ICON = require('../../assets/images/placeholder.png');
const DEFAULT_ENERGY_ICON = require('../../assets/images/placeholder.png');

export type MainGameTabName =
  | 'home'
  | 'shop'
  | 'inventory'
  | 'tasks'
  | 'social';

export type ResourceDisplay = {
  name: string;
  value: number;
  icon?: any;
  color?: string;
  onPress?: () => void;
};

export type GameNotification = {
  id: string;
  title: string;
  message: string;
  isNew?: boolean;
  time?: string;
  icon?: any;
  action?: () => void;
};

export type GameTab = {
  name: MainGameTabName;
  label: string;
  icon: any; // React component or image source
  badgeCount?: number;
};

export type MainGameScreenProps = {
  playerName: string;
  playerLevel: number;
  playerAvatar?: any;
  playerExp?: {current: number, max: number};
  resources?: ResourceDisplay[];
  notifications?: GameNotification[];
  gameTitle?: string;
  backgroundImage?: any;
  tabs?: GameTab[];
  currentTab?: MainGameTabName;
  onTabChange?: (tab: MainGameTabName) => void;
  themeStyle?: ThemeStyleType;
  children?: React.ReactNode;
  onSettingsPress?: () => void;
  onProfilePress?: () => void;
};

export const MainGameInterface: React.FC<MainGameScreenProps> = ({
  playerName,
  playerLevel,
  playerAvatar = DEFAULT_AVATAR,
  playerExp = { current: 0, max: 100 },
  resources = [],
  notifications = [],
  gameTitle = 'Game Title',
  backgroundImage,
  tabs = [],
  currentTab = 'home',
  onTabChange,
  themeStyle,
  children,
  onSettingsPress,
  onProfilePress,
}) => {
  const { theme } = useTheme();
  const [showNotifications, setShowNotifications] = useState(false);

  // Checking if there are any new notifications
  const hasNewNotifications = notifications.some(notification => notification.isNew);

  // Track device size for responsive design
  const { width: screenWidth } = Dimensions.get('window');
  const isTablet = screenWidth > 768;

  // Get top bar styles based on theme
  const getTopBarStyle = () => {
    switch (themeStyle) {
      case 'chineseStyle':
        return {
          backgroundColor: 'rgba(28, 28, 28, 0.85)',
          borderBottomWidth: 1,
          borderBottomColor: theme.colors.accent,
        };
      case 'animeStyle':
        return {
          backgroundColor: 'rgba(255, 255, 255, 0.9)',
          borderBottomWidth: 2,
          borderBottomColor: theme.colors.secondary,
        };
      case 'sciFiStyle':
        return {
          backgroundColor: 'rgba(10, 10, 10, 0.9)',
          borderBottomWidth: 1,
          borderBottomColor: theme.colors.accent,
        };
      case 'qStyleCartoon':
        return {
          backgroundColor: 'rgba(255, 255, 255, 0.9)',
          borderBottomLeftRadius: 20,
          borderBottomRightRadius: 20,
          marginHorizontal: 10,
        };
      case 'militaryStyle':
        return {
          backgroundColor: 'rgba(38, 50, 56, 0.95)',
          borderBottomWidth: 2,
          borderBottomColor: theme.colors.primary,
        };
      default:
        return {
          backgroundColor: 'rgba(30, 30, 30, 0.85)',
        };
    }
  };

  // Get bottom bar styles based on theme
  const getBottomBarStyle = () => {
    switch (themeStyle) {
      case 'chineseStyle':
        return {
          backgroundColor: 'rgba(28, 28, 28, 0.85)',
          borderTopWidth: 1,
          borderTopColor: theme.colors.accent,
        };
      case 'animeStyle':
        return {
          backgroundColor: 'rgba(255, 255, 255, 0.9)',
          borderTopWidth: 2,
          borderTopColor: theme.colors.secondary,
          borderTopLeftRadius: 20,
          borderTopRightRadius: 20,
          marginHorizontal: 10,
          paddingBottom: 10,
        };
      case 'sciFiStyle':
        return {
          backgroundColor: 'rgba(10, 10, 10, 0.9)',
          borderTopWidth: 1,
          borderTopColor: theme.colors.accent,
        };
      case 'qStyleCartoon':
        return {
          backgroundColor: 'rgba(255, 255, 255, 0.9)',
          borderTopLeftRadius: 20,
          borderTopRightRadius: 20,
          marginHorizontal: 10,
          paddingBottom: 10,
        };
      case 'militaryStyle':
        return {
          backgroundColor: 'rgba(38, 50, 56, 0.95)',
          borderTopWidth: 2,
          borderTopColor: theme.colors.primary,
        };
      default:
        return {
          backgroundColor: 'rgba(30, 30, 30, 0.85)',
        };
    }
  };

  // Get tab button styles based on theme and state
  const getTabButtonStyle = (tabName: MainGameTabName) => {
    const isActive = currentTab === tabName;

    // Base styles that apply regardless of theme
    const baseStyle = {
      backgroundColor: isActive ? theme.colors.primary : 'transparent',
      borderRadius: theme.borderRadius.small,
      padding: 8,
      opacity: isActive ? 1 : 0.7,
    };

    // Theme-specific modifications
    switch (themeStyle) {
      case 'chineseStyle':
        return {
          ...baseStyle,
          borderRadius: 4,
          borderWidth: isActive ? 1 : 0,
          borderColor: theme.colors.accent,
        };
      case 'animeStyle':
        return {
          ...baseStyle,
          borderRadius: 20,
          backgroundColor: isActive ? theme.colors.primary : 'transparent',
        };
      case 'sciFiStyle':
        return {
          ...baseStyle,
          borderRadius: 0,
          borderBottomWidth: isActive ? 2 : 0,
          borderBottomColor: theme.colors.accent,
          backgroundColor: isActive ? 'rgba(0, 188, 212, 0.2)' : 'transparent',
        };
      case 'qStyleCartoon':
        return {
          ...baseStyle,
          borderRadius: 16,
          backgroundColor: isActive ? theme.colors.primary : 'transparent',
          paddingVertical: 10,
        };
      case 'militaryStyle':
        return {
          ...baseStyle,
          borderRadius: 0,
          borderTopWidth: isActive ? 2 : 0,
          borderTopColor: theme.colors.accent,
          backgroundColor: isActive ? 'rgba(76, 175, 80, 0.2)' : 'transparent',
        };
      default:
        return baseStyle;
    }
  };

  // Handle notification click
  const handleNotificationPress = (notification: GameNotification) => {
    if (notification.action) {
      notification.action();
    }
  };

  return (
    <ImageBackground
      source={backgroundImage || require('../../assets/images/placeholder.png')}
      style={styles.background}
    >
      {/* Top Bar */}
      <View style={[styles.topBar, getTopBarStyle()]}>
        <View style={styles.playerInfo}>
          <TouchableOpacity
            style={styles.avatarContainer}
            onPress={onProfilePress}
          >
            <Image
              source={playerAvatar}
              style={styles.avatar}
              resizeMode="cover"
            />
            <View style={styles.levelBadge}>
              <Text
                variant="caption"
                color="#FFFFFF"
                align="center"
                style={styles.levelText}
              >
                {playerLevel}
              </Text>
            </View>
          </TouchableOpacity>

          <View style={styles.nameExpContainer}>
            <Text variant="body1" style={styles.playerName}>
              {playerName}
            </Text>

            <View style={styles.expBarContainer}>
              <View
                style={[
                  styles.expBar,
                  {
                    width: `${(playerExp.current / playerExp.max) * 100}%`,
                    backgroundColor: theme.colors.primary
                  }
                ]}
              />
              <Text
                variant="caption"
                color={theme.colors.text}
                style={styles.expText}
              >
                {playerExp.current}/{playerExp.max} XP
              </Text>
            </View>
          </View>
        </View>

        <View style={styles.resourcesContainer}>
          {resources.map((resource, index) => (
            <TouchableOpacity
              key={`resource-${index}`}
              style={styles.resourceItem}
              onPress={resource.onPress}
            >
              <Image
                source={resource.icon || DEFAULT_CURRENCY_ICON}
                style={styles.resourceIcon}
                resizeMode="contain"
              />
              <Text
                variant="body2"
                color={resource.color || theme.colors.text}
              >
                {resource.value.toLocaleString()}
              </Text>
            </TouchableOpacity>
          ))}

          <TouchableOpacity
            style={[
              styles.notificationButton,
              hasNewNotifications && styles.notificationButtonActive
            ]}
            onPress={() => setShowNotifications(true)}
          >
            <Text
              variant="body1"
              color={hasNewNotifications ? '#FFFFFF' : theme.colors.text}
            >
              📬
            </Text>
            {hasNewNotifications && (
              <View style={styles.notificationBadge}>
                <Text
                  variant="caption"
                  color="#FFFFFF"
                  align="center"
                  style={styles.notificationBadgeText}
                >
                  {notifications.filter(n => n.isNew).length}
                </Text>
              </View>
            )}
          </TouchableOpacity>

          <TouchableOpacity
            style={styles.settingsButton}
            onPress={onSettingsPress}
          >
            <Text variant="body1">⚙️</Text>
          </TouchableOpacity>
        </View>
      </View>

      {/* Main Content Area */}
      <View style={styles.contentContainer}>
        {children}
      </View>

      {/* Bottom Navigation Bar */}
      <View style={[styles.bottomBar, getBottomBarStyle()]}>
        {tabs.map((tab, index) => (
          <TouchableOpacity
            key={`tab-${index}`}
            style={[
              styles.tabButton,
              getTabButtonStyle(tab.name)
            ]}
            onPress={() => onTabChange && onTabChange(tab.name)}
          >
            <View style={styles.tabButtonContent}>
              {/* This would typically be an icon component */}
              <Text variant="body1">{tab.name.charAt(0).toUpperCase()}</Text>

              <Text
                variant="caption"
                style={[
                  styles.tabLabel,
                  currentTab === tab.name && styles.activeTabLabel
                ]}
              >
                {tab.label}
              </Text>

              {tab.badgeCount && tab.badgeCount > 0 && (
                <View style={styles.tabBadge}>
                  <Text
                    variant="caption"
                    color="#FFFFFF"
                    align="center"
                    style={styles.tabBadgeText}
                  >
                    {tab.badgeCount}
                  </Text>
                </View>
              )}
            </View>
          </TouchableOpacity>
        ))}
      </View>

      {/* Notifications Modal */}
      <Modal
        visible={showNotifications}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setShowNotifications(false)}
      >
        <View style={styles.modalOverlay}>
          <View style={[
            styles.notificationsContainer,
            { backgroundColor: theme.colors.background }
          ]}>
            <View style={styles.notificationsHeader}>
              <Text variant="h3">Notifications</Text>
              <TouchableOpacity onPress={() => setShowNotifications(false)}>
                <Text variant="body1">✕</Text>
              </TouchableOpacity>
            </View>

            <ScrollView style={styles.notificationsList}>
              {notifications.length > 0 ? (
                notifications.map((notification, index) => (
                  <TouchableOpacity
                    key={`notification-${notification.id || index}`}
                    style={[
                      styles.notificationItem,
                      notification.isNew && styles.newNotificationItem
                    ]}
                    onPress={() => handleNotificationPress(notification)}
                  >
                    <View style={styles.notificationIcon}>
                      <Text variant="body1">
                        {notification.isNew ? '🆕' : '📄'}
                      </Text>
                    </View>
                    <View style={styles.notificationContent}>
                      <Text
                        variant="body1"
                        style={notification.isNew && styles.newNotificationTitle}
                      >
                        {notification.title}
                      </Text>
                      <Text variant="caption">
                        {notification.message}
                      </Text>
                      {notification.time && (
                        <Text
                          variant="caption"
                          color={theme.colors.gray}
                          style={styles.notificationTime}
                        >
                          {notification.time}
                        </Text>
                      )}
                    </View>
                  </TouchableOpacity>
                ))
              ) : (
                <View style={styles.emptyNotifications}>
                  <Text variant="body1" align="center">
                    No notifications yet
                  </Text>
                </View>
              )}
            </ScrollView>
          </View>
        </View>
      </Modal>
    </ImageBackground>
  );
};

const styles = StyleSheet.create({
  background: {
    flex: 1,
    width: '100%',
    height: '100%',
  },
  topBar: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 8,
    paddingHorizontal: 16,
    paddingTop: 48, // Account for status bar
  },
  playerInfo: {
    flexDirection: 'row',
    alignItems: 'center',
    flex: 1,
  },
  avatarContainer: {
    position: 'relative',
    marginRight: 12,
  },
  avatar: {
    width: 50,
    height: 50,
    borderRadius: 25,
  },
  levelBadge: {
    position: 'absolute',
    bottom: -5,
    right: -5,
    backgroundColor: '#FFD700',
    borderRadius: 10,
    width: 20,
    height: 20,
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#000',
  },
  levelText: {
    fontSize: 10,
    fontWeight: 'bold',
  },
  nameExpContainer: {
    flex: 1,
  },
  playerName: {
    fontWeight: 'bold',
    marginBottom: 4,
  },
  expBarContainer: {
    height: 8,
    backgroundColor: 'rgba(0,0,0,0.2)',
    borderRadius: 4,
    overflow: 'hidden',
    position: 'relative',
  },
  expBar: {
    height: '100%',
    borderRadius: 4,
  },
  expText: {
    position: 'absolute',
    right: 4,
    fontSize: 6,
    top: -2,
  },
  resourcesContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  resourceItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginLeft: 12,
  },
  resourceIcon: {
    width: 24,
    height: 24,
    marginRight: 4,
  },
  notificationButton: {
    marginLeft: 16,
    padding: 6,
    borderRadius: 20,
    position: 'relative',
  },
  notificationButtonActive: {
    backgroundColor: '#F44336',
  },
  notificationBadge: {
    position: 'absolute',
    top: -5,
    right: -5,
    backgroundColor: '#F44336',
    borderRadius: 10,
    width: 18,
    height: 18,
    justifyContent: 'center',
    alignItems: 'center',
  },
  notificationBadgeText: {
    fontSize: 10,
    fontWeight: 'bold',
  },
  settingsButton: {
    marginLeft: 16,
    padding: 6,
  },
  contentContainer: {
    flex: 1,
    paddingHorizontal: 16,
    paddingVertical: 8,
  },
  bottomBar: {
    flexDirection: 'row',
    justifyContent: 'space-around',
    paddingVertical: 8,
    paddingBottom: 20, // Extra padding for bottom safe area
  },
  tabButton: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
    paddingVertical: 8,
    marginHorizontal: 4,
  },
  tabButtonContent: {
    alignItems: 'center',
    justifyContent: 'center',
  },
  tabLabel: {
    marginTop: 4,
    fontSize: 10,
  },
  activeTabLabel: {
    fontWeight: 'bold',
  },
  tabBadge: {
    position: 'absolute',
    top: -5,
    right: -15,
    backgroundColor: '#F44336',
    borderRadius: 10,
    width: 18,
    height: 18,
    justifyContent: 'center',
    alignItems: 'center',
  },
  tabBadgeText: {
    fontSize: 10,
    fontWeight: 'bold',
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    padding: 20,
  },
  notificationsContainer: {
    width: '90%',
    maxHeight: '80%',
    borderRadius: 16,
    overflow: 'hidden',
  },
  notificationsHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0,0,0,0.1)',
  },
  notificationsList: {
    padding: 16,
  },
  notificationItem: {
    flexDirection: 'row',
    marginBottom: 16,
    padding: 12,
    borderRadius: 8,
    backgroundColor: 'rgba(0,0,0,0.05)',
  },
  newNotificationItem: {
    backgroundColor: 'rgba(244, 67, 54, 0.1)',
  },
  notificationIcon: {
    marginRight: 12,
  },
  notificationContent: {
    flex: 1,
  },
  newNotificationTitle: {
    fontWeight: 'bold',
  },
  notificationTime: {
    marginTop: 4,
    fontSize: 10,
  },
  emptyNotifications: {
    padding: 20,
    alignItems: 'center',
  },
});

export default MainGameInterface;
</file>

<file path="apps/expo/components/functions/QuestLog.tsx">
import React, { useState } from 'react';
import {
  View,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  FlatList,
  Image,
  Platform,
  Animated,
} from 'react-native';
import { useTheme } from '../../utils/theme';
import { Text, Card, Button } from '../core';
import { AccessibilityHelpers } from '../../utils/platform';

// Quest types
export type QuestStatus = 'active' | 'completed' | 'failed' | 'available' | 'locked';
export type QuestPriority = 'main' | 'side' | 'daily' | 'weekly' | 'event';
export type QuestDifficulty = 'easy' | 'normal' | 'hard' | 'expert' | 'legendary';

// Quest objective type
export interface QuestObjective {
  id: string;
  description: string;
  current: number;
  target: number;
  completed: boolean;
  type?: 'collect' | 'kill' | 'visit' | 'interact' | 'escort' | 'defend' | 'craft' | 'other';
}

// Quest reward type
export interface QuestReward {
  type: 'currency' | 'item' | 'experience' | 'reputation' | 'other';
  name: string;
  amount: number;
  icon?: any; // Image source
}

// Quest data structure
export interface Quest {
  id: string;
  title: string;
  description: string;
  status: QuestStatus;
  priority: QuestPriority;
  difficulty?: QuestDifficulty;
  location?: string;
  giver?: string;
  giverIcon?: any; // Image source
  objectives: QuestObjective[];
  rewards: QuestReward[];
  timeLimit?: number; // Time limit in seconds
  timeRemaining?: number; // Time remaining in seconds
  expireAt?: Date; // For timed quests
  recommendedLevel?: number;
  requiredLevel?: number;
  questChain?: string; // ID of the quest chain this belongs to
  previousQuest?: string; // ID of the prerequisite quest
  nextQuest?: string; // ID of the next quest in the chain
  isTracked?: boolean;
  icon?: any; // Image source
}

// Quest filter type
export interface QuestFilter {
  status?: QuestStatus[];
  priority?: QuestPriority[];
  searchText?: string;
}

// QuestLog props
export interface QuestLogProps {
  title?: string;
  quests: Quest[];
  onQuestPress?: (quest: Quest) => void;
  onTrackQuest?: (quest: Quest, track: boolean) => void;
  onAbandonQuest?: (quest: Quest) => void;
  onCompleteQuest?: (quest: Quest) => void;
  activeFilters?: QuestFilter;
  onFilterChange?: (filters: QuestFilter) => void;
  maxTrackedQuests?: number;
  style?: any;
  themeStyle?: string;
}

// Priority colors
const PRIORITY_COLORS = {
  main: '#F44336', // Red for main quests
  side: '#4CAF50', // Green for side quests
  daily: '#2196F3', // Blue for daily quests
  weekly: '#9C27B0', // Purple for weekly quests
  event: '#FF9800', // Orange for event quests
};

// Difficulty stars
const DIFFICULTY_STARS = {
  easy: 1,
  normal: 2,
  hard: 3,
  expert: 4,
  legendary: 5,
};

const QuestLog: React.FC<QuestLogProps> = ({
  title = 'Quest Log',
  quests,
  onQuestPress,
  onTrackQuest,
  onAbandonQuest,
  onCompleteQuest,
  activeFilters = {},
  onFilterChange,
  maxTrackedQuests = 3,
  style,
  themeStyle,
}) => {
  const { theme } = useTheme();
  const [expandedQuest, setExpandedQuest] = useState<string | null>(null);
  const [activeTab, setActiveTab] = useState<'active' | 'completed' | 'available'>('active');

  // Animation value for objective progress bars
  const progressAnimations = React.useRef<{[key: string]: Animated.Value}>({});

  // Initialize animations for new quests
  React.useEffect(() => {
    quests.forEach(quest => {
      quest.objectives.forEach(objective => {
        const animKey = `${quest.id}-${objective.id}`;
        if (!progressAnimations.current[animKey]) {
          progressAnimations.current[animKey] = new Animated.Value(0);

          // Animate to current progress
          Animated.timing(progressAnimations.current[animKey], {
            toValue: objective.current / objective.target,
            duration: 1000,
            useNativeDriver: false,
          }).start();
        }
      });
    });
  }, [quests]);

  // Filter quests based on active tab and other filters
  const getFilteredQuests = () => {
    return quests.filter(quest => {
      // Filter by tab (status)
      if (activeTab === 'active' && quest.status !== 'active') return false;
      if (activeTab === 'completed' && quest.status !== 'completed') return false;
      if (activeTab === 'available' && quest.status !== 'available') return false;

      // Filter by additional filters if present
      if (activeFilters.status && activeFilters.status.length > 0) {
        if (!activeFilters.status.includes(quest.status)) return false;
      }

      if (activeFilters.priority && activeFilters.priority.length > 0) {
        if (!activeFilters.priority.includes(quest.priority)) return false;
      }

      if (activeFilters.searchText && activeFilters.searchText.trim() !== '') {
        const searchTerm = activeFilters.searchText.toLowerCase();
        const titleMatch = quest.title.toLowerCase().includes(searchTerm);
        const descMatch = quest.description.toLowerCase().includes(searchTerm);
        if (!titleMatch && !descMatch) return false;
      }

      return true;
    });
  };

  // Get count of quests by status
  const getQuestCounts = () => {
    const counts = {
      active: 0,
      completed: 0,
      available: 0,
      failed: 0,
      locked: 0,
    };

    quests.forEach(quest => {
      counts[quest.status] = (counts[quest.status] || 0) + 1;
    });

    return counts;
  };

  // Get tracked quests
  const getTrackedQuests = () => {
    return quests.filter(quest => quest.isTracked);
  };

  // Format time remaining
  const formatTimeRemaining = (seconds?: number) => {
    if (!seconds) return '';

    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);

    if (hours > 0) {
      return `${hours}h ${minutes}m`;
    }

    return `${minutes}m`;
  };

  // Get the color for a quest based on priority
  const getQuestColor = (priority: QuestPriority) => {
    return PRIORITY_COLORS[priority] || '#9E9E9E';
  };

  // Get difficulty stars
  const getDifficultyStars = (difficulty?: QuestDifficulty) => {
    if (!difficulty) return null;

    const starCount = DIFFICULTY_STARS[difficulty] || 0;
    const stars = [];

    for (let i = 0; i < 5; i++) {
      stars.push(
        <Text key={i} style={[styles.star, i < starCount ? styles.filledStar : styles.emptyStar]}>
          ★
        </Text>
      );
    }

    return <View style={styles.starsContainer}>{stars}</View>;
  };

  // Toggle expanded state of a quest
  const toggleExpandQuest = (questId: string) => {
    setExpandedQuest(expandedQuest === questId ? null : questId);
  };

  // Handle tracking a quest
  const handleTrackQuest = (quest: Quest, track: boolean) => {
    if (onTrackQuest) {
      // Check if we're at the max tracked quests
      if (track && getTrackedQuests().length >= maxTrackedQuests) {
        // Replace the last tracked quest with this one
        const trackedQuests = getTrackedQuests();
        onTrackQuest(trackedQuests[trackedQuests.length - 1], false);
      }

      onTrackQuest(quest, track);
    }
  };

  // Render tab buttons
  const renderTabs = () => {
    const counts = getQuestCounts();

    return (
      <View style={styles.tabsContainer}>
        <TouchableOpacity
          style={[
            styles.tabButton,
            activeTab === 'active' && styles.activeTabButton,
            { borderColor: theme.colors.primary }
          ]}
          onPress={() => setActiveTab('active')}
          accessibilityRole="tab"
          accessibilityState={{ selected: activeTab === 'active' }}
          accessibilityLabel="Active quests tab"
        >
          <Text
            variant="body2"
            color={activeTab === 'active' ? theme.colors.primary : undefined}
          >
            Active ({counts.active})
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[
            styles.tabButton,
            activeTab === 'available' && styles.activeTabButton,
            { borderColor: theme.colors.primary }
          ]}
          onPress={() => setActiveTab('available')}
          accessibilityRole="tab"
          accessibilityState={{ selected: activeTab === 'available' }}
          accessibilityLabel="Available quests tab"
        >
          <Text
            variant="body2"
            color={activeTab === 'available' ? theme.colors.primary : undefined}
          >
            Available ({counts.available})
          </Text>
        </TouchableOpacity>

        <TouchableOpacity
          style={[
            styles.tabButton,
            activeTab === 'completed' && styles.activeTabButton,
            { borderColor: theme.colors.primary }
          ]}
          onPress={() => setActiveTab('completed')}
          accessibilityRole="tab"
          accessibilityState={{ selected: activeTab === 'completed' }}
          accessibilityLabel="Completed quests tab"
        >
          <Text
            variant="body2"
            color={activeTab === 'completed' ? theme.colors.primary : undefined}
          >
            Completed ({counts.completed})
          </Text>
        </TouchableOpacity>
      </View>
    );
  };

  // Render a quest item
  const renderQuestItem = ({ item }: { item: Quest }) => {
    const isExpanded = expandedQuest === item.id;
    const questColor = getQuestColor(item.priority);

    return (
      <View style={[
        styles.questItem,
        { borderLeftColor: questColor, borderLeftWidth: 4 }
      ]}>
        {/* Quest header - always visible */}
        <TouchableOpacity
          style={styles.questHeader}
          onPress={() => toggleExpandQuest(item.id)}
          {...AccessibilityHelpers.combineA11yProps(
            `${item.title}, ${item.priority} quest, ${item.status}`,
            `Press to ${isExpanded ? 'collapse' : 'expand'} quest details`
          )}
        >
          {/* Quest icon */}
          <View style={styles.questIconContainer}>
            {item.icon ? (
              <Image source={item.icon} style={styles.questIcon} />
            ) : (
              <View style={[styles.defaultQuestIcon, { backgroundColor: questColor }]}>
                <Text style={styles.defaultQuestIconText}>
                  {item.title.charAt(0).toUpperCase()}
                </Text>
              </View>
            )}

            {/* Status indicator */}
            <View style={[
              styles.statusIndicator,
              item.status === 'completed' && styles.completedIndicator,
              item.status === 'active' && styles.activeIndicator,
              item.status === 'failed' && styles.failedIndicator,
              item.status === 'available' && styles.availableIndicator,
              item.status === 'locked' && styles.lockedIndicator,
            ]} />
          </View>

          {/* Quest info */}
          <View style={styles.questInfo}>
            <Text
              variant="body1"
              style={[
                styles.questTitle,
                item.status === 'completed' && styles.completedQuestTitle,
              ]}
            >
              {item.title}
            </Text>

            <View style={styles.questMeta}>
              <Text variant="caption" style={styles.questType}>
                {item.priority.charAt(0).toUpperCase() + item.priority.slice(1)} Quest
              </Text>

              {item.timeRemaining !== undefined && (
                <Text variant="caption" style={styles.questTimer}>
                  ⏱️ {formatTimeRemaining(item.timeRemaining)}
                </Text>
              )}

              {getDifficultyStars(item.difficulty)}
            </View>
          </View>

          {/* Tracked indicator */}
          {item.isTracked && (
            <View style={styles.trackedBadge}>
              <Text style={styles.trackedBadgeText}>Tracked</Text>
            </View>
          )}
        </TouchableOpacity>

        {/* Expandable content */}
        {isExpanded && (
          <View style={styles.expandedContent}>
            {/* Quest description */}
            <Text variant="body2" style={styles.questDescription}>
              {item.description}
            </Text>

            {/* Quest location and giver */}
            {(item.location || item.giver) && (
              <View style={styles.questDetails}>
                {item.location && (
                  <Text variant="caption" style={styles.questDetailItem}>
                    📍 {item.location}
                  </Text>
                )}

                {item.giver && (
                  <View style={styles.giverContainer}>
                    {item.giverIcon && (
                      <Image source={item.giverIcon} style={styles.giverIcon} />
                    )}
                    <Text variant="caption" style={styles.questDetailItem}>
                      Quest Giver: {item.giver}
                    </Text>
                  </View>
                )}
              </View>
            )}

            {/* Quest objectives */}
            <View style={styles.objectivesContainer}>
              <Text variant="body2" style={styles.sectionTitle}>Objectives:</Text>

              {item.objectives.map((objective) => (
                <View key={objective.id} style={styles.objectiveItem}>
                  <View style={styles.objectiveInfo}>
                    <Text
                      variant="body2"
                      style={[
                        styles.objectiveText,
                        objective.completed && styles.completedObjective,
                      ]}
                    >
                      {objective.description}
                    </Text>

                    <Text variant="body2" style={styles.objectiveProgress}>
                      {objective.current}/{objective.target}
                    </Text>
                  </View>

                  {/* Progress bar */}
                  <View style={styles.progressBarContainer}>
                    <Animated.View
                      style={[
                        styles.progressBar,
                        {
                          width: progressAnimations.current[`${item.id}-${objective.id}`]?.interpolate({
                            inputRange: [0, 1],
                            outputRange: ['0%', '100%'],
                          }) || '0%',
                          backgroundColor: questColor,
                        }
                      ]}
                    />
                  </View>
                </View>
              ))}
            </View>

            {/* Quest rewards */}
            <View style={styles.rewardsContainer}>
              <Text variant="body2" style={styles.sectionTitle}>Rewards:</Text>

              <View style={styles.rewardsList}>
                {item.rewards.map((reward, index) => (
                  <View key={index} style={styles.rewardItem}>
                    {reward.icon && (
                      <Image source={reward.icon} style={styles.rewardIcon} />
                    )}
                    <Text variant="body2" style={styles.rewardText}>
                      {reward.amount} {reward.name}
                    </Text>
                  </View>
                ))}
              </View>
            </View>

            {/* Quest actions */}
            <View style={styles.questActions}>
              {item.status === 'active' && onCompleteQuest && (
                <Button
                  title="Complete"
                  variant="primary"
                  size="small"
                  onPress={() => onCompleteQuest(item)}
                  style={styles.actionButton}
                />
              )}

              {item.status === 'active' && onAbandonQuest && (
                <Button
                  title="Abandon"
                  variant="outline"
                  size="small"
                  onPress={() => onAbandonQuest(item)}
                  style={styles.actionButton}
                />
              )}

              {item.status === 'available' && onQuestPress && (
                <Button
                  title="Accept"
                  variant="primary"
                  size="small"
                  onPress={() => onQuestPress(item)}
                  style={styles.actionButton}
                />
              )}

              {onTrackQuest && item.status === 'active' && (
                <Button
                  title={item.isTracked ? "Untrack" : "Track"}
                  variant="outline"
                  size="small"
                  onPress={() => handleTrackQuest(item, !item.isTracked)}
                  style={styles.actionButton}
                />
              )}
            </View>
          </View>
        )}
      </View>
    );
  };

  // Render tracked quests section
  const renderTrackedQuests = () => {
    const trackedQuests = getTrackedQuests();

    if (trackedQuests.length === 0) return null;

    return (
      <View style={styles.trackedQuestsContainer}>
        <Text variant="h4" style={styles.trackedQuestsTitle}>
          Tracked Quests
        </Text>

        {trackedQuests.map(quest => (
          <View key={quest.id} style={styles.trackedQuestItem}>
            <View style={styles.trackedQuestHeader}>
              <Text variant="body1" style={styles.trackedQuestTitle}>
                {quest.title}
              </Text>

              <TouchableOpacity
                onPress={() => handleTrackQuest(quest, false)}
                style={styles.untrackButton}
                {...AccessibilityHelpers.buttonA11yProps('Untrack quest', false)}
              >
                <Text style={styles.untrackButtonText}>×</Text>
              </TouchableOpacity>
            </View>

            {quest.objectives.map(objective => (
              <View key={objective.id} style={styles.trackedObjective}>
                <Text
                  variant="caption"
                  style={[
                    styles.trackedObjectiveText,
                    objective.completed && styles.completedObjective,
                  ]}
                  numberOfLines={1}
                >
                  {objective.description}
                </Text>

                <Text variant="caption" style={styles.trackedObjectiveProgress}>
                  {objective.current}/{objective.target}
                </Text>
              </View>
            ))}
          </View>
        ))}
      </View>
    );
  };

  return (
    <Card
      title={title}
      style={[styles.container, style]}
      {...AccessibilityHelpers.combineA11yProps(`${title}`, 'List of quest and objectives')}
    >
      {/* Tracked quests */}
      {renderTrackedQuests()}

      {/* Tabs for different quest statuses */}
      {renderTabs()}

      {/* Quest list */}
      <FlatList
        data={getFilteredQuests()}
        renderItem={renderQuestItem}
        keyExtractor={item => item.id}
        contentContainerStyle={styles.questList}
        ListEmptyComponent={
          <View style={styles.emptyState}>
            <Text variant="body1" style={styles.emptyStateText}>
              No {activeTab} quests found.
            </Text>
          </View>
        }
      />
    </Card>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    overflow: 'hidden',
  },
  trackedQuestsContainer: {
    padding: 12,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0, 0, 0, 0.1)',
    backgroundColor: 'rgba(0, 0, 0, 0.02)',
  },
  trackedQuestsTitle: {
    marginBottom: 8,
  },
  trackedQuestItem: {
    marginBottom: 8,
    padding: 8,
    backgroundColor: 'rgba(255, 255, 255, 0.5)',
    borderRadius: 4,
    borderLeftWidth: 3,
    borderLeftColor: '#4CAF50',
  },
  trackedQuestHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 4,
  },
  trackedQuestTitle: {
    fontWeight: 'bold',
  },
  untrackButton: {
    width: 20,
    height: 20,
    borderRadius: 10,
    backgroundColor: 'rgba(0, 0, 0, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  untrackButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  trackedObjective: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 2,
  },
  trackedObjectiveText: {
    flex: 1,
  },
  trackedObjectiveProgress: {
    marginLeft: 8,
  },
  tabsContainer: {
    flexDirection: 'row',
    padding: 12,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0, 0, 0, 0.1)',
  },
  tabButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    borderWidth: 1,
    marginRight: 8,
  },
  activeTabButton: {
    borderWidth: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.05)',
  },
  questList: {
    padding: 12,
  },
  questItem: {
    marginBottom: 12,
    borderRadius: 8,
    overflow: 'hidden',
    backgroundColor: '#FFFFFF',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 1,
    elevation: 2,
  },
  questHeader: {
    flexDirection: 'row',
    padding: 12,
  },
  questIconContainer: {
    position: 'relative',
    marginRight: 12,
  },
  questIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
  },
  defaultQuestIcon: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  defaultQuestIconText: {
    color: '#FFFFFF',
    fontWeight: 'bold',
    fontSize: 18,
  },
  statusIndicator: {
    position: 'absolute',
    bottom: 0,
    right: 0,
    width: 12,
    height: 12,
    borderRadius: 6,
    borderWidth: 2,
    borderColor: '#FFFFFF',
  },
  completedIndicator: {
    backgroundColor: '#4CAF50', // Green
  },
  activeIndicator: {
    backgroundColor: '#2196F3', // Blue
  },
  failedIndicator: {
    backgroundColor: '#F44336', // Red
  },
  availableIndicator: {
    backgroundColor: '#FF9800', // Orange
  },
  lockedIndicator: {
    backgroundColor: '#9E9E9E', // Gray
  },
  questInfo: {
    flex: 1,
  },
  questTitle: {
    fontWeight: 'bold',
    marginBottom: 4,
  },
  completedQuestTitle: {
    textDecorationLine: 'line-through',
    opacity: 0.7,
  },
  questMeta: {
    flexDirection: 'row',
    alignItems: 'center',
    flexWrap: 'wrap',
  },
  questType: {
    marginRight: 8,
    opacity: 0.7,
  },
  questTimer: {
    marginRight: 8,
  },
  starsContainer: {
    flexDirection: 'row',
  },
  star: {
    fontSize: 12,
    marginRight: 2,
  },
  filledStar: {
    color: '#FFD700', // Gold
  },
  emptyStar: {
    color: '#E0E0E0', // Light gray
  },
  trackedBadge: {
    backgroundColor: '#2196F3',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
    alignSelf: 'flex-start',
  },
  trackedBadgeText: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: 'bold',
  },
  expandedContent: {
    padding: 12,
    borderTopWidth: 1,
    borderTopColor: 'rgba(0, 0, 0, 0.1)',
    backgroundColor: 'rgba(0, 0, 0, 0.02)',
  },
  questDescription: {
    marginBottom: 12,
  },
  questDetails: {
    marginBottom: 12,
  },
  questDetailItem: {
    marginBottom: 4,
  },
  giverContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  giverIcon: {
    width: 16,
    height: 16,
    borderRadius: 8,
    marginRight: 4,
  },
  sectionTitle: {
    fontWeight: 'bold',
    marginBottom: 8,
  },
  objectivesContainer: {
    marginBottom: 12,
  },
  objectiveItem: {
    marginBottom: 8,
  },
  objectiveInfo: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 4,
  },
  objectiveText: {
    flex: 1,
  },
  completedObjective: {
    textDecorationLine: 'line-through',
    opacity: 0.7,
  },
  objectiveProgress: {
    fontWeight: 'bold',
    marginLeft: 8,
  },
  progressBarContainer: {
    height: 6,
    backgroundColor: 'rgba(0, 0, 0, 0.1)',
    borderRadius: 3,
    overflow: 'hidden',
  },
  progressBar: {
    height: '100%',
    borderRadius: 3,
  },
  rewardsContainer: {
    marginBottom: 12,
  },
  rewardsList: {
    flexDirection: 'row',
    flexWrap: 'wrap',
  },
  rewardItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 12,
    marginBottom: 4,
  },
  rewardIcon: {
    width: 16,
    height: 16,
    marginRight: 4,
  },
  rewardText: {
    fontWeight: 'bold',
  },
  questActions: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    flexWrap: 'wrap',
  },
  actionButton: {
    marginLeft: 8,
    marginBottom: 4,
  },
  emptyState: {
    padding: 24,
    alignItems: 'center',
  },
  emptyStateText: {
    opacity: 0.5,
  },
});

export default QuestLog;
</file>

<file path="apps/expo/components/functions/StoreItemCard.tsx">
import React from 'react';
import {
  View,
  StyleSheet,
  TouchableOpacity,
  Image,
  Dimensions,
} from 'react-native';
import { useTheme } from '../../utils/theme';
import { Text } from '../core';
import { AccessibilityHelpers } from '../../utils/platform';
import { StoreItem, StoreCurrency } from './StoreSystem';

// Rarity colors
export const RARITY_COLORS = {
  common: '#9E9E9E',    // Gray
  uncommon: '#4CAF50',  // Green
  rare: '#2196F3',      // Blue
  epic: '#9C27B0',      // Purple
  legendary: '#FF9800', // Orange
};

interface StoreItemCardProps {
  item: StoreItem;
  currency?: StoreCurrency;
  onPress: (item: StoreItem) => void;
  featured?: boolean;
  style?: any;
}

const StoreItemCard: React.FC<StoreItemCardProps> = ({
  item,
  currency,
  onPress,
  featured = false,
  style,
}) => {
  const { theme } = useTheme();

  // Get rarity color (or default to common)
  const rarityColor = item.rarity
    ? RARITY_COLORS[item.rarity]
    : RARITY_COLORS.common;

  // Calculate the discounted price
  const discountedPrice = item.discount
    ? Math.round(item.price * (1 - item.discount / 100))
    : null;

  // Determine if item is limited time and if it has expired
  const isLimitedTime = item.limitedTime && item.limitedTimeEnd;
  const hasExpired = isLimitedTime && new Date() > new Date(item.limitedTimeEnd!);

  // Calculate remaining time for limited items
  const getRemainingTime = () => {
    if (!isLimitedTime || hasExpired) return '';

    const now = new Date();
    const end = new Date(item.limitedTimeEnd!);
    const diffMs = end.getTime() - now.getTime();

    // If less than an hour remains
    if (diffMs < 3600000) {
      const minutes = Math.floor(diffMs / 60000);
      return `${minutes}m left`;
    }

    // If less than a day remains
    if (diffMs < 86400000) {
      const hours = Math.floor(diffMs / 3600000);
      return `${hours}h left`;
    }

    // Otherwise show days
    const days = Math.floor(diffMs / 86400000);
    return `${days}d left`;
  };

  // Get accessibility label describing the item
  const getAccessibilityLabel = () => {
    let label = `${item.name}, ${item.rarity || 'common'} rarity`;

    if (discountedPrice) {
      label += `, discounted from ${item.price} to ${discountedPrice}`;
    } else {
      label += `, price ${item.price}`;
    }

    if (item.isNew) label += ', new item';
    if (featured) label += ', featured item';
    if (isLimitedTime && !hasExpired) label += `, limited time offer, ${getRemainingTime()}`;
    if (item.requiredLevel) label += `, requires level ${item.requiredLevel}`;

    return label;
  };

  return (
    <TouchableOpacity
      style={[
        styles.container,
        { borderColor: rarityColor },
        featured && styles.featuredContainer,
        style,
      ]}
      onPress={() => onPress(item)}
      {...AccessibilityHelpers.combineA11yProps(
        getAccessibilityLabel(),
        item.description
      )}
    >
      {/* Item icon */}
      <View style={styles.imageContainer}>
        <Image
          source={item.icon}
          style={styles.image}
          resizeMode="contain"
        />

        {/* Rarity indicator */}
        <View style={[styles.rarityIndicator, { backgroundColor: rarityColor }]} />
      </View>

      {/* Item details */}
      <View style={styles.detailsContainer}>
        <Text
          variant="body1"
          style={styles.itemName}
          numberOfLines={1}
        >
          {item.name}
        </Text>

        {/* Price section */}
        <View style={styles.priceContainer}>
          {currency?.icon && (
            <Image source={currency.icon} style={styles.currencyIcon} />
          )}

          {discountedPrice ? (
            <View style={styles.discountContainer}>
              <Text style={styles.originalPrice}>
                {item.price}
              </Text>
              <Text style={[styles.price, { color: theme.colors.primary }]}>
                {discountedPrice}
              </Text>
            </View>
          ) : (
            <Text style={styles.price}>
              {item.price}
            </Text>
          )}
        </View>
      </View>

      {/* Badges */}
      <View style={styles.badgesContainer}>
        {item.isNew && (
          <View style={[styles.badge, styles.newBadge]}>
            <Text style={styles.badgeText}>NEW</Text>
          </View>
        )}

        {item.discount && item.discount > 0 && (
          <View style={[styles.badge, styles.discountBadge]}>
            <Text style={styles.badgeText}>-{item.discount}%</Text>
          </View>
        )}

        {isLimitedTime && !hasExpired && (
          <View style={[styles.badge, styles.limitedBadge]}>
            <Text style={styles.badgeText}>{getRemainingTime()}</Text>
          </View>
        )}
      </View>

      {/* Required level */}
      {item.requiredLevel && (
        <View style={styles.levelContainer}>
          <Text style={styles.levelText}>
            Lvl {item.requiredLevel}
          </Text>
        </View>
      )}
    </TouchableOpacity>
  );
};

const styles = StyleSheet.create({
  container: {
    borderRadius: 8,
    borderWidth: 1,
    padding: 12,
    backgroundColor: 'rgba(0, 0, 0, 0.02)',
    overflow: 'hidden',
    position: 'relative',
  },
  featuredContainer: {
    borderWidth: 2,
    padding: 14,
  },
  imageContainer: {
    alignItems: 'center',
    justifyContent: 'center',
    marginBottom: 8,
    position: 'relative',
  },
  image: {
    width: '80%',
    height: 80,
  },
  rarityIndicator: {
    position: 'absolute',
    bottom: 0,
    width: 20,
    height: 4,
    borderRadius: 2,
  },
  detailsContainer: {
    alignItems: 'center',
  },
  itemName: {
    fontWeight: 'bold',
    marginBottom: 4,
    textAlign: 'center',
  },
  priceContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
  },
  currencyIcon: {
    width: 16,
    height: 16,
    marginRight: 4,
  },
  discountContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  originalPrice: {
    textDecorationLine: 'line-through',
    opacity: 0.6,
    marginRight: 4,
    fontSize: 12,
  },
  price: {
    fontWeight: 'bold',
  },
  badgesContainer: {
    position: 'absolute',
    top: 8,
    right: 8,
    alignItems: 'flex-end',
  },
  badge: {
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
    marginBottom: 4,
  },
  newBadge: {
    backgroundColor: '#4CAF50',
  },
  discountBadge: {
    backgroundColor: '#F44336',
  },
  limitedBadge: {
    backgroundColor: '#FF9800',
  },
  badgeText: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: 'bold',
  },
  levelContainer: {
    position: 'absolute',
    bottom: 8,
    right: 8,
    backgroundColor: 'rgba(0, 0, 0, 0.6)',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
  },
  levelText: {
    color: '#FFFFFF',
    fontSize: 10,
    fontWeight: 'bold',
  },
});

export default StoreItemCard;
</file>

<file path="apps/expo/components/functions/StoreItemDetails.tsx">
import React, { useState } from 'react';
import {
  View,
  StyleSheet,
  Modal,
  Image,
  TouchableOpacity,
  ScrollView,
  Dimensions,
  Platform,
} from 'react-native';
import { useTheme } from '../../utils/theme';
import { Text, Button } from '../core';
import { AccessibilityHelpers } from '../../utils/platform';
import { StoreItem, StoreCurrency, PurchaseResult } from './StoreSystem';
import { RARITY_COLORS } from './StoreItemCard';

interface StoreItemDetailsProps {
  item: StoreItem;
  currency?: StoreCurrency;
  visible: boolean;
  onClose: () => void;
  onPurchase: (quantity: number) => Promise<PurchaseResult>;
}

const StoreItemDetails: React.FC<StoreItemDetailsProps> = ({
  item,
  currency,
  visible,
  onClose,
  onPurchase,
}) => {
  const { theme } = useTheme();
  const [quantity, setQuantity] = useState(1);
  const [purchasing, setPurchasing] = useState(false);
  const [result, setResult] = useState<PurchaseResult | null>(null);

  const windowWidth = Dimensions.get('window').width;
  const isMobile = windowWidth < 768;

  // Reset state when modal closes or item changes
  React.useEffect(() => {
    if (visible) {
      setQuantity(1);
      setResult(null);
    }
  }, [visible, item]);

  // Get rarity color (or default to common)
  const rarityColor = item.rarity
    ? RARITY_COLORS[item.rarity]
    : RARITY_COLORS.common;

  // Get rarity label
  const getRarityLabel = () => {
    if (!item.rarity) return 'Common';

    // Capitalize first letter
    return item.rarity.charAt(0).toUpperCase() + item.rarity.slice(1);
  };

  // Calculate the discounted price
  const discountedPrice = item.discount
    ? Math.round(item.price * (1 - item.discount / 100))
    : null;

  // Calculate total price
  const totalPrice = (discountedPrice || item.price) * quantity;

  // Check if user can afford the item
  const canAfford = currency
    ? currency.amount >= totalPrice
    : false;

  // Check if user meets the level requirement
  const meetsLevelRequirement = !item.requiredLevel; // In a real app, compare with player level

  // Determine if purchase button should be disabled
  const purchaseDisabled = !canAfford || !meetsLevelRequirement || purchasing;

  // Increment quantity
  const incrementQuantity = () => {
    setQuantity(q => Math.min(q + 1, 99));
  };

  // Decrement quantity
  const decrementQuantity = () => {
    setQuantity(q => Math.max(q - 1, 1));
  };

  // Handle purchase
  const handlePurchase = async () => {
    setPurchasing(true);
    setResult(null);

    try {
      const purchaseResult = await onPurchase(quantity);
      setResult(purchaseResult);

      if (purchaseResult.success) {
        // Reset quantity after successful purchase
        setQuantity(1);
      }
    } catch (error) {
      setResult({
        success: false,
        message: 'An error occurred during purchase. Please try again.',
      });
    } finally {
      setPurchasing(false);
    }
  };

  // Render item stats if available
  const renderStats = () => {
    if (!item.stats || Object.keys(item.stats).length === 0) return null;

    return (
      <View style={styles.statsContainer}>
        <Text variant="h4" style={styles.sectionTitle}>Stats</Text>

        {Object.entries(item.stats).map(([statName, statValue]) => (
          <View key={statName} style={styles.statRow}>
            <Text variant="body2" style={styles.statName}>
              {statName}:
            </Text>
            <Text variant="body2" style={styles.statValue}>
              {typeof statValue === 'number' && statValue > 0 ? `+${statValue}` : statValue}
            </Text>
          </View>
        ))}
      </View>
    );
  };

  // Render required items if any
  const renderRequirements = () => {
    if (!item.requiredLevel && (!item.requiredItems || item.requiredItems.length === 0)) {
      return null;
    }

    return (
      <View style={styles.requirementsContainer}>
        <Text variant="h4" style={styles.sectionTitle}>Requirements</Text>

        {item.requiredLevel && (
          <View style={styles.requirementRow}>
            <Text
              variant="body2"
              style={[
                styles.requirementText,
                !meetsLevelRequirement && styles.requirementNotMet,
              ]}
            >
              Player Level {item.requiredLevel}
            </Text>
          </View>
        )}

        {item.requiredItems && item.requiredItems.length > 0 && (
          item.requiredItems.map((reqItem, index) => (
            <View key={index} style={styles.requirementRow}>
              <Text variant="body2" style={styles.requirementText}>
                Requires: {reqItem}
              </Text>
            </View>
          ))
        )}
      </View>
    );
  };

  // Render purchase result
  const renderResult = () => {
    if (!result) return null;

    return (
      <View style={[
        styles.resultContainer,
        { backgroundColor: result.success ? 'rgba(76, 175, 80, 0.1)' : 'rgba(244, 67, 54, 0.1)' }
      ]}>
        <Text
          style={[
            styles.resultText,
            { color: result.success ? '#4CAF50' : '#F44336' }
          ]}
        >
          {result.message}
        </Text>
      </View>
    );
  };

  if (!visible) return null;

  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="fade"
      onRequestClose={onClose}
    >
      <View style={styles.modalOverlay}>
        <View style={[
          styles.modalContainer,
          isMobile ? styles.mobileContainer : styles.desktopContainer
        ]}>
          {/* Close button */}
          <TouchableOpacity
            style={styles.closeButton}
            onPress={onClose}
            {...AccessibilityHelpers.buttonA11yProps('Close dialog', false)}
          >
            <Text style={styles.closeButtonText}>✕</Text>
          </TouchableOpacity>

          <ScrollView style={styles.scrollView}>
            {/* Item header */}
            <View style={styles.headerContainer}>
              <View style={styles.imageContainer}>
                <Image
                  source={item.icon}
                  style={styles.itemImage}
                  resizeMode="contain"
                />
              </View>

              <View style={styles.headerDetails}>
                <View style={styles.titleContainer}>
                  <Text variant="h2" style={styles.itemName}>
                    {item.name}
                  </Text>

                  <View style={[styles.rarityBadge, { backgroundColor: rarityColor }]}>
                    <Text style={styles.rarityText}>
                      {getRarityLabel()}
                    </Text>
                  </View>
                </View>

                <Text variant="body1" style={styles.itemDescription}>
                  {item.description}
                </Text>
              </View>
            </View>

            {/* Divider */}
            <View style={styles.divider} />

            {/* Stats section */}
            {renderStats()}

            {/* Requirements section */}
            {renderRequirements()}

            {/* Result message */}
            {renderResult()}
          </ScrollView>

          {/* Purchase section */}
          <View style={styles.purchaseSection}>
            {/* Quantity selector */}
            <View style={styles.quantitySelector}>
              <TouchableOpacity
                style={[styles.quantityButton, quantity <= 1 && styles.disabledButton]}
                onPress={decrementQuantity}
                disabled={quantity <= 1}
                {...AccessibilityHelpers.buttonA11yProps('Decrease quantity', quantity <= 1)}
              >
                <Text style={styles.quantityButtonText}>-</Text>
              </TouchableOpacity>

              <Text style={styles.quantityText}>{quantity}</Text>

              <TouchableOpacity
                style={styles.quantityButton}
                onPress={incrementQuantity}
                {...AccessibilityHelpers.buttonA11yProps('Increase quantity', false)}
              >
                <Text style={styles.quantityButtonText}>+</Text>
              </TouchableOpacity>
            </View>

            {/* Price display */}
            <View style={styles.priceDisplay}>
              {discountedPrice ? (
                <View style={styles.discountedPriceContainer}>
                  <Text style={styles.originalTotalPrice}>
                    {item.price * quantity}
                  </Text>
                  <View style={styles.currentPriceContainer}>
                    {currency?.icon && (
                      <Image source={currency.icon} style={styles.currencyIcon} />
                    )}
                    <Text style={[
                      styles.totalPrice,
                      !canAfford && styles.cannotAffordPrice
                    ]}>
                      {totalPrice}
                    </Text>
                  </View>
                </View>
              ) : (
                <View style={styles.currentPriceContainer}>
                  {currency?.icon && (
                    <Image source={currency.icon} style={styles.currencyIcon} />
                  )}
                  <Text style={[
                    styles.totalPrice,
                    !canAfford && styles.cannotAffordPrice
                  ]}>
                    {totalPrice}
                  </Text>
                </View>
              )}

              {!canAfford && (
                <Text style={styles.insufficientFunds}>
                  Insufficient {currency?.name || 'funds'}
                </Text>
              )}
            </View>

            {/* Purchase button */}
            <Button
              title={purchasing ? "Purchasing..." : "Purchase"}
              onPress={handlePurchase}
              disabled={purchaseDisabled}
              loading={purchasing}
              variant="primary"
              style={styles.purchaseButton}
            />
          </View>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: 12,
    overflow: 'hidden',
    position: 'relative',
    elevation: 5,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
  },
  mobileContainer: {
    width: '90%',
    maxHeight: '90%',
  },
  desktopContainer: {
    width: '60%',
    maxWidth: 600,
    maxHeight: '80%',
  },
  closeButton: {
    position: 'absolute',
    top: 12,
    right: 12,
    width: 30,
    height: 30,
    borderRadius: 15,
    backgroundColor: 'rgba(0, 0, 0, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 10,
  },
  closeButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#000',
  },
  scrollView: {
    flex: 1,
    padding: 20,
    paddingTop: 24,
  },
  headerContainer: {
    flexDirection: 'row',
    marginBottom: 16,
  },
  imageContainer: {
    width: 100,
    height: 100,
    marginRight: 16,
    backgroundColor: 'rgba(0, 0, 0, 0.03)',
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
  itemImage: {
    width: 80,
    height: 80,
  },
  headerDetails: {
    flex: 1,
  },
  titleContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
    flexWrap: 'wrap',
  },
  itemName: {
    fontWeight: 'bold',
    marginRight: 8,
  },
  rarityBadge: {
    paddingHorizontal: 8,
    paddingVertical: 2,
    borderRadius: 4,
  },
  rarityText: {
    color: '#FFFFFF',
    fontSize: 12,
    fontWeight: 'bold',
  },
  itemDescription: {
    marginBottom: 8,
  },
  divider: {
    height: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.1)',
    marginVertical: 16,
  },
  statsContainer: {
    marginBottom: 16,
  },
  sectionTitle: {
    fontWeight: 'bold',
    marginBottom: 8,
  },
  statRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 4,
  },
  statName: {
    opacity: 0.7,
  },
  statValue: {
    fontWeight: 'bold',
  },
  requirementsContainer: {
    marginBottom: 16,
  },
  requirementRow: {
    marginBottom: 4,
  },
  requirementText: {
    fontSize: 14,
  },
  requirementNotMet: {
    color: '#F44336',
  },
  resultContainer: {
    padding: 12,
    borderRadius: 8,
    marginTop: 8,
    marginBottom: 8,
  },
  resultText: {
    fontWeight: 'bold',
  },
  purchaseSection: {
    flexDirection: 'row',
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: 'rgba(0, 0, 0, 0.1)',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: 'rgba(0, 0, 0, 0.02)',
  },
  quantitySelector: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 16,
  },
  quantityButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: 'rgba(0, 0, 0, 0.1)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  disabledButton: {
    opacity: 0.5,
  },
  quantityButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  quantityText: {
    marginHorizontal: 12,
    fontSize: 16,
    fontWeight: 'bold',
  },
  priceDisplay: {
    flex: 1,
    alignItems: 'flex-end',
    marginRight: 16,
  },
  discountedPriceContainer: {
    alignItems: 'flex-end',
  },
  originalTotalPrice: {
    textDecorationLine: 'line-through',
    opacity: 0.6,
    fontSize: 12,
  },
  currentPriceContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  currencyIcon: {
    width: 20,
    height: 20,
    marginRight: 4,
  },
  totalPrice: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  cannotAffordPrice: {
    color: '#F44336',
  },
  insufficientFunds: {
    fontSize: 12,
    color: '#F44336',
    marginTop: 2,
  },
  purchaseButton: {
    minWidth: 120,
  },
});

export default StoreItemDetails;
</file>

<file path="apps/expo/components/functions/StoreSystem.tsx">
import React, { useState } from 'react';
import {
  View,
  StyleSheet,
  FlatList,
  TouchableOpacity,
  ScrollView,
  Image,
  Dimensions,
  Platform,
} from 'react-native';
import { useTheme } from '../../utils/theme';
import { Text, Card, Button } from '../core';
import { AccessibilityHelpers } from '../../utils/platform';
import StoreItemCard from './StoreItemCard';
import StoreItemDetails from './StoreItemDetails';

// Store item data structure
export interface StoreItem {
  id: string;
  name: string;
  description: string;
  icon: any; // Image source
  price: number;
  currency: string;
  category: string;
  rarity?: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';
  discount?: number; // Percentage discount (0-100)
  limitedTime?: boolean;
  limitedTimeEnd?: Date;
  isNew?: boolean;
  isFeatured?: boolean;
  requiredLevel?: number;
  requiredItems?: string[];
  stats?: {
    [key: string]: number | string;
  };
  quantity?: number; // Available quantity (undefined means unlimited)
}

// Store category
export interface StoreCategory {
  id: string;
  name: string;
  icon?: any;
  featuredItem?: string; // ID of featured item for this category
}

// Currency type
export interface StoreCurrency {
  id: string;
  name: string;
  icon: any;
  amount: number;
  isPremium?: boolean;
}

// Purchase result
export interface PurchaseResult {
  success: boolean;
  message: string;
  newBalance?: number;
  itemId?: string;
}

// Store props
export interface StoreSystemProps {
  title?: string;
  items: StoreItem[];
  categories: StoreCategory[];
  currencies: StoreCurrency[];
  onPurchase: (item: StoreItem, quantity: number) => Promise<PurchaseResult>;
  onCurrencyPurchase?: (currencyId: string) => void;
  showFeatured?: boolean;
  showDiscounts?: boolean;
  showNew?: boolean;
  emptyStateMessage?: string;
  style?: any;
  themeStyle?: string;
}

const StoreSystem: React.FC<StoreSystemProps> = ({
  title = 'Store',
  items,
  categories,
  currencies,
  onPurchase,
  onCurrencyPurchase,
  showFeatured = true,
  showDiscounts = true,
  showNew = true,
  emptyStateMessage = 'No items available in the store',
  style,
  themeStyle,
}) => {
  const { theme } = useTheme();
  const [selectedCategory, setSelectedCategory] = useState<string>(categories[0]?.id || '');
  const [selectedItem, setSelectedItem] = useState<StoreItem | null>(null);
  const [isDetailsVisible, setIsDetailsVisible] = useState(false);

  const windowWidth = Dimensions.get('window').width;
  const isMobile = windowWidth < 768;

  // Filter items by selected category
  const filteredItems = selectedCategory
    ? items.filter(item => item.category === selectedCategory)
    : items;

  // Get discounted items
  const discountedItems = items.filter(item => item.discount && item.discount > 0);

  // Get new items
  const newItems = items.filter(item => item.isNew);

  // Get featured items (one per category)
  const featuredItems = categories
    .map(category => {
      if (category.featuredItem) {
        return items.find(item => item.id === category.featuredItem);
      }
      return null;
    })
    .filter(item => item !== null) as StoreItem[];

  // Get currency by ID
  const getCurrency = (currencyId: string) => {
    return currencies.find(curr => curr.id === currencyId);
  };

  // Handle item press
  const handleItemPress = (item: StoreItem) => {
    setSelectedItem(item);
    setIsDetailsVisible(true);
  };

  // Close item details
  const handleCloseDetails = () => {
    setIsDetailsVisible(false);
  };

  // Handle purchase from details modal
  const handlePurchase = async (item: StoreItem, quantity: number) => {
    const result = await onPurchase(item, quantity);

    if (result.success) {
      // Update currency display
      const currency = getCurrency(item.currency);
      if (currency && result.newBalance !== undefined) {
        currency.amount = result.newBalance;
      }
    }

    return result;
  };

  // Render category tabs
  const renderCategoryTabs = () => {
    return (
      <ScrollView
        horizontal
        showsHorizontalScrollIndicator={false}
        style={styles.categoriesContainer}
        contentContainerStyle={styles.categoriesContent}
      >
        {categories.map(category => (
          <TouchableOpacity
            key={category.id}
            style={[
              styles.categoryTab,
              selectedCategory === category.id && styles.selectedCategoryTab,
              {
                borderColor: theme.colors.primary,
                ...(selectedCategory === category.id && { backgroundColor: `${theme.colors.primary}20` }),
              },
            ]}
            onPress={() => setSelectedCategory(category.id)}
            accessibilityRole="tab"
            accessibilityState={{ selected: selectedCategory === category.id }}
            accessibilityLabel={`${category.name} category`}
          >
            {category.icon && (
              <Image source={category.icon} style={styles.categoryIcon} />
            )}
            <Text
              variant="body2"
              color={selectedCategory === category.id ? theme.colors.primary : undefined}
            >
              {category.name}
            </Text>
          </TouchableOpacity>
        ))}
      </ScrollView>
    );
  };

  // Render currency display
  const renderCurrencyDisplay = () => {
    return (
      <View style={styles.currencyContainer}>
        {currencies.map(currency => (
          <View key={currency.id} style={styles.currencyItem}>
            <View style={styles.currencyInfo}>
              {currency.icon && (
                <Image source={currency.icon} style={styles.currencyIcon} />
              )}
              <Text variant="body2" style={styles.currencyAmount}>
                {currency.amount.toLocaleString()}
              </Text>
            </View>

            {currency.isPremium && onCurrencyPurchase && (
              <TouchableOpacity
                style={[styles.addButton, { backgroundColor: theme.colors.primary }]}
                onPress={() => onCurrencyPurchase(currency.id)}
                accessibilityLabel={`Add ${currency.name}`}
                accessibilityRole="button"
              >
                <Text variant="body2" color="#FFFFFF" style={styles.addButtonText}>
                  +
                </Text>
              </TouchableOpacity>
            )}
          </View>
        ))}
      </View>
    );
  };

  // Render featured section
  const renderFeaturedSection = () => {
    if (!showFeatured || featuredItems.length === 0) return null;

    return (
      <View style={styles.featuredSection}>
        <Text variant="h3" style={styles.sectionTitle}>
          Featured
        </Text>

        <ScrollView
          horizontal
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={styles.featuredItemsContainer}
        >
          {featuredItems.map(item => (
            <StoreItemCard
              key={item.id}
              item={item}
              onPress={handleItemPress}
              currency={getCurrency(item.currency)}
              featured
              style={styles.featuredItem}
            />
          ))}
        </ScrollView>
      </View>
    );
  };

  // Render discounts section
  const renderDiscountsSection = () => {
    if (!showDiscounts || discountedItems.length === 0) return null;

    return (
      <View style={styles.discountsSection}>
        <Text variant="h3" style={styles.sectionTitle}>
          Special Offers
        </Text>

        <ScrollView
          horizontal
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={styles.discountItemsContainer}
        >
          {discountedItems.map(item => (
            <StoreItemCard
              key={item.id}
              item={item}
              onPress={handleItemPress}
              currency={getCurrency(item.currency)}
              style={styles.discountItem}
            />
          ))}
        </ScrollView>
      </View>
    );
  };

  // Render new items section
  const renderNewItemsSection = () => {
    if (!showNew || newItems.length === 0) return null;

    return (
      <View style={styles.newItemsSection}>
        <Text variant="h3" style={styles.sectionTitle}>
          New Arrivals
        </Text>

        <ScrollView
          horizontal
          showsHorizontalScrollIndicator={false}
          contentContainerStyle={styles.newItemsContainer}
        >
          {newItems.map(item => (
            <StoreItemCard
              key={item.id}
              item={item}
              onPress={handleItemPress}
              currency={getCurrency(item.currency)}
              style={styles.newItem}
            />
          ))}
        </ScrollView>
      </View>
    );
  };

  // Render category items grid
  const renderCategoryItems = () => {
    if (filteredItems.length === 0) {
      return (
        <View style={styles.emptyState}>
          <Text variant="body1">{emptyStateMessage}</Text>
        </View>
      );
    }

    // Determine grid columns based on screen width
    const numColumns = isMobile ? 2 : 3;

    return (
      <FlatList
        data={filteredItems}
        renderItem={({ item }) => (
          <StoreItemCard
            item={item}
            onPress={handleItemPress}
            currency={getCurrency(item.currency)}
            style={styles.gridItem}
          />
        )}
        keyExtractor={item => item.id}
        numColumns={numColumns}
        columnWrapperStyle={styles.gridRow}
        contentContainerStyle={styles.gridContainer}
      />
    );
  };

  return (
    <Card
      title={title}
      style={[styles.container, style]}
      {...AccessibilityHelpers.combineA11yProps(`${title}`, 'In-game store for purchasing items')}
    >
      {/* Currency display */}
      {renderCurrencyDisplay()}

      {/* Category tabs */}
      {renderCategoryTabs()}

      <ScrollView style={styles.storeContent}>
        {/* Featured items */}
        {renderFeaturedSection()}

        {/* Discounted items */}
        {renderDiscountsSection()}

        {/* New items */}
        {renderNewItemsSection()}

        {/* Category header */}
        <Text variant="h3" style={styles.categoryTitle}>
          {categories.find(c => c.id === selectedCategory)?.name || 'All Items'}
        </Text>

        {/* Category items */}
        {renderCategoryItems()}
      </ScrollView>

      {/* Item details modal */}
      {selectedItem && (
        <StoreItemDetails
          item={selectedItem}
          currency={getCurrency(selectedItem.currency)}
          visible={isDetailsVisible}
          onClose={handleCloseDetails}
          onPurchase={(quantity) => handlePurchase(selectedItem, quantity)}
        />
      )}
    </Card>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    overflow: 'hidden',
  },
  currencyContainer: {
    flexDirection: 'row',
    padding: 12,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0, 0, 0, 0.1)',
  },
  currencyItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginRight: 16,
  },
  currencyInfo: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  currencyIcon: {
    width: 24,
    height: 24,
    marginRight: 4,
  },
  currencyAmount: {
    fontWeight: 'bold',
  },
  addButton: {
    width: 20,
    height: 20,
    borderRadius: 10,
    alignItems: 'center',
    justifyContent: 'center',
    marginLeft: 4,
  },
  addButtonText: {
    fontSize: 12,
    fontWeight: 'bold',
  },
  categoriesContainer: {
    maxHeight: 50,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(0, 0, 0, 0.1)',
  },
  categoriesContent: {
    paddingHorizontal: 12,
    paddingVertical: 8,
  },
  categoryTab: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 16,
    borderWidth: 1,
    marginRight: 8,
  },
  selectedCategoryTab: {
    borderWidth: 1,
  },
  categoryIcon: {
    width: 16,
    height: 16,
    marginRight: 4,
  },
  storeContent: {
    flex: 1,
    padding: 12,
  },
  featuredSection: {
    marginBottom: 16,
  },
  discountsSection: {
    marginBottom: 16,
  },
  newItemsSection: {
    marginBottom: 16,
  },
  sectionTitle: {
    marginBottom: 8,
  },
  categoryTitle: {
    marginBottom: 12,
  },
  featuredItemsContainer: {
    paddingBottom: 8,
  },
  discountItemsContainer: {
    paddingBottom: 8,
  },
  newItemsContainer: {
    paddingBottom: 8,
  },
  featuredItem: {
    width: 240,
    height: 180,
    marginRight: 12,
  },
  discountItem: {
    width: 200,
    height: 160,
    marginRight: 12,
  },
  newItem: {
    width: 200,
    height: 160,
    marginRight: 12,
  },
  gridContainer: {
    paddingBottom: 16,
  },
  gridRow: {
    justifyContent: 'flex-start',
  },
  gridItem: {
    flex: 1,
    margin: 6,
    maxWidth: Dimensions.get('window').width < 768 ? '48%' : '31%',
  },
  emptyState: {
    padding: 24,
    alignItems: 'center',
    justifyContent: 'center',
  },
});

export default StoreSystem;
</file>

<file path="apps/expo/components/themes/ThemeProvider.tsx">
import React, { useState, useEffect, ReactNode } from 'react';
import { useColorScheme } from 'react-native';
import { ThemeContext, STYLE_THEMES, ThemeStyleType, DEFAULT_THEME } from '../../utils/theme';

interface ThemeProviderProps {
  children: ReactNode;
  initialThemeStyle?: ThemeStyleType;
}

export const ThemeProvider: React.FC<ThemeProviderProps> = ({
  children,
  initialThemeStyle = DEFAULT_THEME
}) => {
  const colorScheme = useColorScheme();
  const [themeStyle, setThemeStyle] = useState<ThemeStyleType>(initialThemeStyle);

  // Get the actual theme object based on the theme style
  const theme = STYLE_THEMES[themeStyle];

  // Update theme when theme style changes
  const handleThemeChange = (newThemeStyle: ThemeStyleType) => {
    setThemeStyle(newThemeStyle);
  };

  // Optional: You can use this to respond to system theme changes
  useEffect(() => {
    // This is just a placeholder for future implementation
    // You could switch between light/dark variants of your game styles
    console.log('System color scheme changed to:', colorScheme);
  }, [colorScheme]);

  return (
    <ThemeContext.Provider
      value={{
        theme,
        setThemeStyle: handleThemeChange,
        themeStyle,
      }}
    >
      {children}
    </ThemeContext.Provider>
  );
};

export default ThemeProvider;
</file>

<file path="apps/expo/eslint.config.mjs">
import baseConfig from "@acme/eslint-config/base";
import reactConfig from "@acme/eslint-config/react";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: [".expo/**", "expo-plugins/**"],
  },

];
</file>

<file path="apps/expo/package.json">
{
  "name": "@acme/expo",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "expo start",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web",
    "lint": "expo lint"
  },
  "dependencies": {
    "@clerk/clerk-expo": "^2.3.9",
    "@expo/vector-icons": "^14.0.2",
    "@react-navigation/bottom-tabs": "^7.0.0",
    "@react-navigation/native": "^7.0.0",
    "@tanstack/react-query": "^5.60.2",
    "@trpc/client": "^11.0.0-rc.633",
    "@trpc/react-query": "11.0.0-rc.633",
    "@trpc/server": "11.0.0-rc.633",
    "expo": "~52.0.6",
    "expo-blur": "~14.0.1",
    "expo-constants": "~17.0.3",
    "expo-font": "~13.0.1",
    "expo-haptics": "~14.0.0",
    "expo-linear-gradient": "^14.0.1",
    "expo-linking": "~7.0.2",
    "expo-network": "latest",
    "expo-router": "~4.0.5",
    "expo-status-bar": "~2.0.0",
    "expo-symbols": "~0.2.0",
    "expo-system-ui": "~4.0.2",
    "expo-web-browser": "~14.0.1",
    "lucide-react-native": "^0.456.0",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.76.1",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.0.0",
    "react-native-web": "~0.19.13",
    "react-native-webview": "13.12.2"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/trpc": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "@babel/core": "^7.26.0",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.3.12",
    "@types/react-test-renderer": "^18.3.0",
    "react-test-renderer": "18.3.1",
    "typescript": "^5.3.3"
  },
  "private": true
}
</file>

<file path="apps/expo/README.md">
# Welcome to your Expo app 👋

This is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).

## Get started

1. Install dependencies

   ```bash
   npm install
   ```

2. Start the app

   ```bash
    npx expo start
   ```

In the output, you'll find options to open the app in a

- [development build](https://docs.expo.dev/develop/development-builds/introduction/)
- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)
- [iOS simulator](https://docs.expo.dev/workflow/ios-simulator/)
- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo

You can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).

## Get a fresh project

When you're ready, run:

```bash
npm run reset-project
```

This command will move the starter code to the **app-example** directory and create a blank **app** directory where you can start developing.

## Learn more

To learn more about developing your project with Expo, look at the following resources:

- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).
- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.

## Join the community

Join our community of developers creating universal apps.

- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.
- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.
</file>

<file path="apps/expo/tsconfig.json">
{
  "compilerOptions": {
    "moduleResolution": "bundler",
    "module": "ESNext",
    "target": "ESNext",
    "allowJs": true,
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "strict": true,
    "noEmit": true,
    "skipLibCheck": true,
    "paths": {
      "@/*": [
        "./*"
      ],
      "@acme/api/*": [
        "../../packages/api/*"
      ]
    },
    "types": [
      "node"
    ],
    "jsx": "react-native",
    "checkJs": false,
    "moduleSuffixes": [
      ".ios",
      ".android",
      ".native",
      ""
    ]
  },
  "include": [
    "expo-router/**/*.{ts,tsx}",
    "utils/**/*",
    "app/**/*",
    "*.{ts,tsx}",
    "*.js"
  ],
  "exclude": [
    "node_modules"
  ],
  "extends": "expo/tsconfig.base"
}
</file>

<file path="apps/expo/turbo.json">
{
  "$schema": "https://turborepo.org/schema.json",
  "extends": ["//"],
  "tasks": {
    "dev": {
      "persistent": true,
      "interactive": true
    }
  }
}
</file>

<file path="apps/expo/utils/api.tsx">
import { createTRPCReact } from '@trpc/react-query';
import { type AppRouter } from '@acme/trpc';

export const api = createTRPCReact<AppRouter>();
</file>

<file path="apps/expo/utils/base-url.tsx">
import Constants from "expo-constants";
import { Platform } from 'react-native';
import * as Network from 'expo-network';

export const getBaseUrl = () => {
  // For iOS, we need to be extra careful about IP resolution
  if (Platform.OS === 'ios') {
    try {
      // Try multiple methods to get the correct local IP
      const debuggerHost = Constants.expoConfig?.hostUri;
      console.log('Debugger Host (iOS):', debuggerHost);

      // Attempt to get the actual network interface IP
      // Prioritize debuggerHost, fall back to network interface

      const host = debuggerHost!.split(':')[0]

      // For iOS, you might need to use the full IP
      const baseUrl = `http://${host}:8787`;
      console.log('Resolved iOS Base URL:', baseUrl);

      return baseUrl;
    } catch (error) {
      console.error('iOS Base URL Detection Error:', error);
      throw new Error('Failed to determine base URL for iOS');
    }
  }

  // Fallback for other platforms
  return 'http://localhost:8787';
};
</file>

<file path="apps/expo/utils/index.ts">
export * from './theme';
export * from './platform';
export * from './api';

// Re-export default exports
export { default as theme } from './theme';
export { default as platform } from './platform';
export { default as api } from './api';
</file>

<file path="apps/expo/utils/platform.ts">
import { Platform, PlatformIOSStatic } from 'react-native';

// Enhanced Platform detection with more specific iOS version checks
interface EnhancedPlatform extends PlatformIOSStatic {
  isIOS: boolean;
  isAndroid: boolean;
  isWeb: boolean;
  isIPhoneX: boolean;
  hasNotch: boolean;
  isMaterial3: boolean;
}

// Check if device is iPhone X or similar models with a notch
const isIPhoneX = (): boolean => {
  const { width, height } = Platform.OS === 'ios'
    ? { width: 0, height: 0 }  // Placeholder values
    : { width: 0, height: 0 }; // This would normally use Dimensions.get('window')

  return (
    Platform.OS === 'ios' &&
    !Platform.isPad &&
    !Platform.isTV &&
    (height >= 812 || width >= 812)
  );
};

// Check if device has a notch
const hasNotch = (): boolean => {
  return isIPhoneX();
};

// Check if Android is using Material 3 (Android 12+)
const isMaterial3 = (): boolean => {
  if (Platform.OS !== 'android') return false;

  const version = Platform.Version as number;
  return version >= 31; // Android 12 (S) is API 31
};

// Export enhanced platform object
export const CustomPlatform: EnhancedPlatform = {
  ...Platform,
  isIOS: Platform.OS === 'ios',
  isAndroid: Platform.OS === 'android',
  isWeb: Platform.OS === 'web',
  isIPhoneX: isIPhoneX(),
  hasNotch: hasNotch(),
  isMaterial3: isMaterial3(),
};

// Platform-specific spacing values (useful for safe areas)
export const PlatformSpacing = {
  // Account for iOS safe areas
  statusBarHeight: CustomPlatform.isIOS
    ? (CustomPlatform.hasNotch ? 44 : 20)
    : 24,
  bottomSafeArea: CustomPlatform.isIOS && CustomPlatform.hasNotch ? 34 : 0,
  topSafeArea: CustomPlatform.isIOS && CustomPlatform.hasNotch ? 44 : 0,
  // Platform-specific spacing scale
  scale: CustomPlatform.isAndroid ? 1.1 : 1, // Android often needs slightly larger touch targets
};

// Platform-specific styling helpers
export const PlatformStyles = {
  // Shadow styles differ significantly between platforms
  shadow: (elevation: number = 4) => ({
    ...CustomPlatform.select({
      ios: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: elevation / 2 },
        shadowOpacity: 0.2,
        shadowRadius: elevation / 2,
      },
      android: {
        elevation,
      },
      default: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: elevation / 2 },
        shadowOpacity: 0.2,
        shadowRadius: elevation / 2,
      },
    }),
  }),

  // Button styling for optimal platform feel
  buttonStyles: {
    // iOS buttons typically have less elevation
    elevation: CustomPlatform.isIOS ? 0 : 2,
    // iOS buttons often have more rounded corners
    borderRadius: CustomPlatform.isIOS ? 8 : 4,
    // Android buttons typically have a material ripple effect
    ripple: CustomPlatform.isAndroid,
    // Android buttons often have uppercase labels
    textTransform: CustomPlatform.isAndroid ? 'uppercase' : 'none',
  },

  // Input styling differences
  inputStyles: {
    // iOS inputs typically have borders, Android uses underlines
    borderType: CustomPlatform.isIOS ? 'border' : 'underline',
    // Android fields often have a floating label animation
    floatingLabel: CustomPlatform.isAndroid,
    // iOS typically uses a different focus indicator
    focusIndicator: CustomPlatform.isIOS ? 'border' : 'highlight',
  },

  // Animation durations (Android animations are often slower)
  animationDurations: {
    short: CustomPlatform.isAndroid ? 200 : 150,
    medium: CustomPlatform.isAndroid ? 300 : 250,
    long: CustomPlatform.isAndroid ? 500 : 400,
  },
};

// Accessibility helpers
export const AccessibilityHelpers = {
  // Combine accessibilityLabel and accessibilityHint
  combineA11yProps: (label: string, hint?: string) => ({
    accessible: true,
    accessibilityLabel: label,
    ...(hint ? { accessibilityHint: hint } : {}),
  }),

  // Convert an icon to be accessible
  iconA11yProps: (label: string) => ({
    accessible: true,
    accessibilityLabel: label,
    accessibilityRole: 'image',
  }),

  // Button accessibilityRole and state
  buttonA11yProps: (label: string, isDisabled: boolean = false) => ({
    accessible: true,
    accessibilityLabel: label,
    accessibilityRole: 'button',
    accessibilityState: {
      disabled: isDisabled,
    },
  }),

  // Header accessibilityRole
  headerA11yProps: (text: string, level: 1 | 2 | 3 | 4 | 5 | 6 = 1) => ({
    accessible: true,
    accessibilityLabel: text,
    accessibilityRole: `heading${level}` as 'heading',
    accessibilityLevel: level,
  }),
};

export default {
  CustomPlatform,
  PlatformSpacing,
  PlatformStyles,
  AccessibilityHelpers,
};
</file>

<file path="apps/expo/utils/theme.ts">
import { Dimensions } from 'react-native';
import { createContext, useContext } from 'react';

// Get screen dimensions
const { width, height } = Dimensions.get('window');
export const SCREEN_WIDTH = width;
export const SCREEN_HEIGHT = height;
export const IS_LANDSCAPE = width > height;

// Common colors
export const COMMON_COLORS = {
  white: '#FFFFFF',
  black: '#000000',
  gray: '#9E9E9E',
  lightGray: '#E0E0E0',
  darkGray: '#424242',
  transparent: 'transparent',
};

// Game UI style themes
export const STYLE_THEMES = {
  // 国风 (Chinese Style)
  chineseStyle: {
    id: 'chineseStyle',
    name: '国风',
    colors: {
      primary: '#CC0000',
      secondary: '#FFD700',
      background: '#1C1C1C',
      surface: '#2A2A2A',
      accent: '#BF9E67',
      text: '#FFFFFF',
      border: '#D4AF37',
    },
    fonts: {
      regular: 'SpaceMono-Regular',
      bold: 'SpaceMono-Regular', // Replace with actual bold font
    },
    shadows: {
      small: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.25,
        shadowRadius: 3.84,
        elevation: 2,
      },
      medium: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.3,
        shadowRadius: 4.65,
        elevation: 6,
      },
      large: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 6 },
        shadowOpacity: 0.37,
        shadowRadius: 7.49,
        elevation: 12,
      },
    },
    borderRadius: {
      small: 4,
      medium: 8,
      large: 16,
    },
    spacing: {
      xs: 4,
      s: 8,
      m: 16,
      l: 24,
      xl: 32,
      xxl: 48,
    },
  },

  // 欧美 (Western Style)
  westernStyle: {
    id: 'westernStyle',
    name: '欧美',
    colors: {
      primary: '#1976D2',
      secondary: '#FF5722',
      background: '#121212',
      surface: '#1E1E1E',
      accent: '#64B5F6',
      text: '#FFFFFF',
      border: '#424242',
    },
    fonts: {
      regular: 'SpaceMono-Regular',
      bold: 'SpaceMono-Regular', // Replace with actual bold font
    },
    shadows: {
      small: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.25,
        shadowRadius: 3.84,
        elevation: 2,
      },
      medium: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.3,
        shadowRadius: 4.65,
        elevation: 6,
      },
      large: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 6 },
        shadowOpacity: 0.37,
        shadowRadius: 7.49,
        elevation: 12,
      },
    },
    borderRadius: {
      small: 4,
      medium: 8,
      large: 16,
    },
    spacing: {
      xs: 4,
      s: 8,
      m: 16,
      l: 24,
      xl: 32,
      xxl: 48,
    },
  },

  // 二次元 (Anime Style)
  animeStyle: {
    id: 'animeStyle',
    name: '二次元',
    colors: {
      primary: '#FF4081',
      secondary: '#FFC107',
      background: '#F9F9F9',
      surface: '#FFFFFF',
      accent: '#7E57C2',
      text: '#212121',
      border: '#BDBDBD',
    },
    fonts: {
      regular: 'SpaceMono-Regular',
      bold: 'SpaceMono-Regular', // Replace with actual bold font
    },
    shadows: {
      small: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 2,
        elevation: 2,
      },
      medium: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.15,
        shadowRadius: 4,
        elevation: 4,
      },
      large: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 8 },
        shadowOpacity: 0.2,
        shadowRadius: 8,
        elevation: 8,
      },
    },
    borderRadius: {
      small: 8,
      medium: 16,
      large: 24,
    },
    spacing: {
      xs: 4,
      s: 8,
      m: 12,
      l: 20,
      xl: 28,
      xxl: 40,
    },
  },

  // 科幻 (Sci-Fi)
  sciFiStyle: {
    id: 'sciFiStyle',
    name: '科幻',
    colors: {
      primary: '#00BCD4',
      secondary: '#7C4DFF',
      background: '#0A0A0A',
      surface: '#1A1A1A',
      accent: '#00E5FF',
      text: '#E0E0E0',
      border: '#303030',
    },
    fonts: {
      regular: 'SpaceMono-Regular',
      bold: 'SpaceMono-Regular', // Replace with actual bold font
    },
    shadows: {
      small: {
        shadowColor: '#00BCD4',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.2,
        shadowRadius: 3,
        elevation: 2,
      },
      medium: {
        shadowColor: '#00BCD4',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.3,
        shadowRadius: 5,
        elevation: 6,
      },
      large: {
        shadowColor: '#00BCD4',
        shadowOffset: { width: 0, height: 6 },
        shadowOpacity: 0.4,
        shadowRadius: 8,
        elevation: 12,
      },
    },
    borderRadius: {
      small: 2,
      medium: 4,
      large: 8,
    },
    spacing: {
      xs: 4,
      s: 8,
      m: 16,
      l: 24,
      xl: 32,
      xxl: 48,
    },
  },

  // Q版卡通 (Q-Style Cartoon)
  qStyleCartoon: {
    id: 'qStyleCartoon',
    name: 'Q版卡通',
    colors: {
      primary: '#FF9800',
      secondary: '#8BC34A',
      background: '#FFFDE7',
      surface: '#FFFFFF',
      accent: '#FF4081',
      text: '#5D4037',
      border: '#FFCC80',
    },
    fonts: {
      regular: 'SpaceMono-Regular',
      bold: 'SpaceMono-Regular', // Replace with actual bold font
    },
    shadows: {
      small: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.1,
        shadowRadius: 2,
        elevation: 2,
      },
      medium: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 4 },
        shadowOpacity: 0.15,
        shadowRadius: 4,
        elevation: 4,
      },
      large: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 6 },
        shadowOpacity: 0.2,
        shadowRadius: 6,
        elevation: 8,
      },
    },
    borderRadius: {
      small: 10,
      medium: 20,
      large: 30,
    },
    spacing: {
      xs: 4,
      s: 8,
      m: 16,
      l: 24,
      xl: 32,
      xxl: 48,
    },
  },

  // 军事 (Military)
  militaryStyle: {
    id: 'militaryStyle',
    name: '军事',
    colors: {
      primary: '#4CAF50',
      secondary: '#795548',
      background: '#263238',
      surface: '#37474F',
      accent: '#FFCA28',
      text: '#ECEFF1',
      border: '#455A64',
    },
    fonts: {
      regular: 'SpaceMono-Regular',
      bold: 'SpaceMono-Regular', // Replace with actual bold font
    },
    shadows: {
      small: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 2 },
        shadowOpacity: 0.3,
        shadowRadius: 2,
        elevation: 3,
      },
      medium: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 3 },
        shadowOpacity: 0.4,
        shadowRadius: 3,
        elevation: 6,
      },
      large: {
        shadowColor: '#000',
        shadowOffset: { width: 0, height: 5 },
        shadowOpacity: 0.5,
        shadowRadius: 5,
        elevation: 10,
      },
    },
    borderRadius: {
      small: 2,
      medium: 4,
      large: 8,
    },
    spacing: {
      xs: 4,
      s: 8,
      m: 16,
      l: 24,
      xl: 32,
      xxl: 48,
    },
  },
};

// Type definitions
export type ThemeType = typeof STYLE_THEMES.chineseStyle;
export type ThemeStyleType = keyof typeof STYLE_THEMES;

// Default theme
export const DEFAULT_THEME: ThemeStyleType = 'chineseStyle';

// Theme context
interface ThemeContextType {
  theme: ThemeType;
  setThemeStyle: (style: ThemeStyleType) => void;
  themeStyle: ThemeStyleType;
}

export const ThemeContext = createContext<ThemeContextType>({
  theme: STYLE_THEMES[DEFAULT_THEME],
  setThemeStyle: () => {},
  themeStyle: DEFAULT_THEME,
});

// Theme hook
export const useTheme = () => useContext(ThemeContext);
</file>

<file path="apps/expo/utils/TRPCProvider.tsx">
import {QueryClient, QueryClientProvider} from '@tanstack/react-query';
import {httpBatchLink} from '@trpc/client';
import React, {useState} from 'react';
import {api} from './api';
import superjson from 'superjson';
import {getBaseUrl} from "@/utils/base-url.tsx";
import {useAuth} from '@clerk/clerk-expo'

export function TRPCProvider({children}: { children: React.ReactNode; }) {
  const { getToken} = useAuth()


  const [queryClient] = useState(() => new QueryClient());
  const [trpcClient] = useState(() =>
    api.createClient({
      links: [
        httpBatchLink({
          transformer: superjson,
          url: `${getBaseUrl()}/trpc`,
          async headers() {
          const token = await getToken()
          return {
            Authorization: token ? `Bearer ${token}` : '',
          }
        },
        }),
      ],
    })
  );

  return (
    <api.Provider client={trpcClient} queryClient={queryClient}>
      <QueryClientProvider client={queryClient}>
        {children}
      </QueryClientProvider>
    </api.Provider>
  );
}
</file>

<file path="apps/workflows/.editorconfig">
# http://editorconfig.org
root = true

[*]
indent_style = tab
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.yml]
indent_style = space
</file>

<file path="apps/workflows/.gitignore">
# Logs

logs
_.log
npm-debug.log_
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)

report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json

# Runtime data

pids
_.pid
_.seed
\*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover

lib-cov

# Coverage directory used by tools like istanbul

coverage
\*.lcov

# nyc test coverage

.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)

.grunt

# Bower dependency directory (https://bower.io/)

bower_components

# node-waf configuration

.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)

build/Release

# Dependency directories

node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)

web_modules/

# TypeScript cache

\*.tsbuildinfo

# Optional npm cache directory

.npm

# Optional eslint cache

.eslintcache

# Optional stylelint cache

.stylelintcache

# Microbundle cache

.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history

.node_repl_history

# Output of 'npm pack'

\*.tgz

# Yarn Integrity file

.yarn-integrity

# dotenv environment variable files

.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)

.cache
.parcel-cache

# Next.js build output

.next
out

# Nuxt.js build / generate output

.nuxt
dist

# Gatsby files

.cache/

# Comment in the public line in if your project uses Gatsby and not Next.js

# https://nextjs.org/blog/next-9-1#public-directory-support

# public

# vuepress build output

.vuepress/dist

# vuepress v2.x temp and cache directory

.temp
.cache

# Docusaurus cache and generated files

.docusaurus

# Serverless directories

.serverless/

# FuseBox cache

.fusebox/

# DynamoDB Local files

.dynamodb/

# TernJS port file

.tern-port

# Stores VSCode versions used for testing VSCode extensions

.vscode-test

# yarn v2

.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.\*

# wrangler project

.dev.vars
.wrangler/

# macOS
.DS_Store
</file>

<file path="apps/workflows/.prettierrc">
{
	"printWidth": 140,
	"singleQuote": true,
	"semi": true,
	"useTabs": true
}
</file>

<file path="apps/workflows/eslint.config.js">
import baseConfig from "@acme/eslint-config/base";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: ["dist/**", "src/workflows/daily-recap.ts"],
  },
  ...baseConfig
];
</file>

<file path="apps/workflows/package.json">
{
	"name": "@acme/workflows",
	"version": "0.0.1",
	"scripts": {
		"deploy": "wrangler deploy",
		"dev": "wrangler dev --test-scheduled --remote",
		"clean": "git clean -xdf .cache .turbo node_modules .wrangler"
	},
	"type": "module",
	"devDependencies": {
		"@acme/db": "workspace:*",
		"@acme/eslint-config": "workspace:*",
		"@acme/tsconfig": "workspace:*",
		"typescript": "^5.3.3",
		"wrangler": "3.93.0"
	}
}
</file>

<file path="apps/workflows/README.md">
# Cloudflare Workflows

This is the starter template for Workflows, a durable execution engine built on top of Cloudflare Workers.

* Clone this repository to get started with Workflows
* Read the [Workflows announcement blog](https://blog.cloudflare.com/building-workflows-durable-execution-on-workers/) to learn more about what Workflows is and how to build durable, multi-step applications using the Workflows model.
* Review the [Workflows developer documentation](https://developers.cloudflare.com/workflows/) to dive deeper into the Workflows API and how it works.

## Usage

**Visit the [get started guide](https://developers.cloudflare.com/workflows/get-started/guide/) for Workflows to create and deploy your first Workflow.**

### Example

You can create a project using this template by using `npm create cloudflare@latest`:

```sh
npm create cloudflare@latest workflows-starter -- --template "cloudflare/workflows-starter"
```

This will automatically clone this repository, install the dependencies, and prompt you to optionally deploy:

```sh
╭ Create an application with Cloudflare Step 1 of 3
│
├ In which directory do you want to create your application?
│ dir ./workflows-tutorial
│
├ What would you like to start with?
│ category Template from a GitHub repo
│
├ What's the url of git repo containing the template you'd like to use?
│ repository cloudflare/workflows-starter
│
├ Cloning template from: cloudflare/workflows-starter
│
├ template cloned and validated
│
├ Copying template files
│ files copied to project directory
│
├ Installing dependencies
│ installed via `npm install`
│
╰ Application created

╭ Configuring your application for Cloudflare Step 2 of 3
│
├ Installing @cloudflare/workers-types
│ installed via npm
│
├ Adding latest types to `tsconfig.json`
│ added @cloudflare/workers-types/2023-07-01
│
├ Do you want to use git for version control?
│ yes git
│
├ Initializing git repo
│ initialized git
│
├ Committing new files
│ git commit
│
╰ Application configured

╭ Deploy with Cloudflare Step 3 of 3
│
├ Do you want to deploy your application?
│ no deploy via `npm run deploy`
│
╰ Done

────────────────────────────────────────────────────────────
🎉  SUCCESS  Application created successfully!
```

The [Workflows documentation](https://developers.cloudflare.com/workflows/) contains examples, the API reference, and architecture guidance.

## License

Copyright 2024, Cloudflare. Apache 2.0 licensed. See the LICENSE file for details.
</file>

<file path="apps/workflows/src/index.ts">
// This file is the entrypoint for this Cloudflare worker, which contains our workflows.
// It exports the workflows and the scheduled function. Which allows us to use workflows defined outside of this file.
// The scheduled function is used to trigger the workflows.

import {DailyRecapWorkflow} from "./workflows/daily-recap";
import { GetUsersForRecapWorkflow } from "./workflows/get-users-for-recap";

export {
	DailyRecapWorkflow,
	GetUsersForRecapWorkflow
}

export default {
	scheduled(event, env: Env, ctx) {
		console.log("cron processed");
		ctx.waitUntil(env.GET_USERS_WORKFLOW.create());
	}
} satisfies ExportedHandler<Env>;
</file>

<file path="apps/workflows/src/workflows/daily-recap.ts">
// Below is an example of a workflow that generates a daily recap for a user.
// It uses the AI to generate a text recap, then uses the AI to generate an image prompt,
// then uses the AI to generate an image, then stores the image in R2, and finally adds the recap to the database.

import {WorkflowEntrypoint  } from "cloudflare:workers";
import type {WorkflowEvent, WorkflowStep} from "cloudflare:workers";
import {getDB, moments, recaps, userMeta} from "@acme/db";
import { and, gte, lte, eq } from 'drizzle-orm';

export type DailyRecapWorkflowParams = {
    userId: string;
    timezone: string;
	dev?: boolean
}

const getPacificTime = (date: Date = new Date()) => {
    return new Date(
        date.toLocaleString('en-US', {
            timeZone: 'America/Los_Angeles'
        })
    );
};

export class DailyRecapWorkflow extends WorkflowEntrypoint<Env, DailyRecapWorkflowParams> {
	async run(event: WorkflowEvent<DailyRecapWorkflowParams>, step: WorkflowStep) {
		const { userId, timezone } = event.payload;

		const userMetadata = await step.do('Get user metadata', async () => {
			const db = getDB(this.env);
			const meta = await db.query.userMeta.findFirst({
				where: eq(userMeta.userId, userId),
			});
			return meta;
		});

		const yesterdaysMoments = await step.do('Get moments', async () => {
			const db = getDB(this.env);
			
			// Calculate date range based on dev flag
			const todayPT = getPacificTime();
			const targetDate = new Date(todayPT);
			
			if (!event.payload.dev) {
				// Normal case - get yesterday's moments
				targetDate.setDate(targetDate.getDate() - 1);
			}
			
			const startOfDay = new Date(targetDate.setHours(0, 0, 0, 0));
			const endOfDay = new Date(targetDate.setHours(23, 59, 59, 999));

			const res = await db.select()
				.from(moments)
				.where(
					and(
						eq(moments.userId, userId),
						gte(moments.createdAt, startOfDay),
						lte(moments.createdAt, endOfDay)
					)
				);
			
			return res;
		});

		const aiGeneratedRecap: string = await step.do('Generate text from AI', async () => {
			console.log('yesterdaysMoments:', yesterdaysMoments);

			const res  = await this.env.AI.run(
				// @ts-ignore
				"@cf/meta/llama-3.3-70b-instruct-fp8-fast", {
					prompt: `
					Heres what happened yesterday, turn it into a quick little story, maybe add some humor, maybe make it profound, but at the very least make it interesting:
					First moment: 
					${yesterdaysMoments.map(m => m.text).join('\n Next moment:\n')}
					`
				}
			)
			console.log('AI generated recap:', res);

			// @ts-ignore
			return res.response
		});

		const imagePrompt: string = await step.do('Generate image prompt', async () => {
			const res = await this.env.AI.run(
				// @ts-ignore
				"@cf/meta/llama-3.3-70b-instruct-fp8-fast", {
					prompt: `
					Create a detailed image generation prompt that captures the essence of this daily recap. 
					The prompt should be vivid and descriptive, but keep it under 100 words.
					Here's the recap:
					${aiGeneratedRecap}
					`
				}
			);
			console.log('Generated image prompt:', res);

			// @ts-ignore
			return res.response;
		});

		const generatedImage = await step.do('Generate image', async () => {
			const artStyle = userMetadata?.artStyle ?? 'classical painting';
			
			const styleModifiers = {
				'classical painting': 'in the style of a classical oil painting, rich colors, dramatic lighting',
				'ethereal animated fairy': 'in an ethereal fairy tale style, magical, dreamy, soft glowing colors',
				'childrens book': 'in a whimsical children\'s book illustration style, colorful, playful',
				'3d animated style': 'in a modern 3D animated style, vibrant, polished, cinematic',
			};

			const styleModifier = styleModifiers[artStyle as keyof typeof styleModifiers];
			
			const enhancedPrompt = `${imagePrompt} ${styleModifier}`;
			console.log('Enhanced prompt with style:', enhancedPrompt);

			const res = await this.env.AI.run(
				// @ts-ignore
				'@cf/black-forest-labs/flux-1-schnell', {
					prompt: enhancedPrompt,
					num_steps: 8
				}
			);
			// @ts-ignore
			return res.image;
		});

		const imageKey = await step.do('Store image in R2', async () => {
			const imageKey = `recap-images/${Date.now()}.jpg`;
			
			// Convert base64 to Uint8Array using Web APIs
			const binaryString = atob(generatedImage);
			const bytes = new Uint8Array(binaryString.length);
			for (let i = 0; i < binaryString.length; i++) {
				bytes[i] = binaryString.charCodeAt(i);
			}
			
			await this.env.IMAGES_BUCKET.put(imageKey, bytes, {
				httpMetadata: {
					contentType: 'image/jpeg',
				},
			});
			
			return imageKey;
		});

		await step.do('Add to database', async () => {
			const db = getDB(this.env);
			await db.insert(recaps).values({ 
				text: aiGeneratedRecap, 
				userId: userId,  // Now using the specific user's ID
				createdAt: new Date(), 
				type: 'daily', 
				imageId: imageKey
			});
		});
	}
}
</file>

<file path="apps/workflows/src/workflows/get-users-for-recap.ts">
// Below is an example of a workflow that gets users for a recap.
// It uses the database to get users who haven't had a recap recently, and then triggers a daily recap workflow for each user.
// This shows how we can use scheduled workflows to trigger other workflows.

import { WorkflowEntrypoint } from "cloudflare:workers";
import type { WorkflowEvent, WorkflowStep } from "cloudflare:workers";
import { getDB, userMeta } from "@acme/db";
import { eq, isNull, or, gt, lt, and } from 'drizzle-orm';

// Type for the workflow parameters
interface GetUsersForRecapParams {
    batchSize?: number;
    lastProcessedUserId?: string;
}

export class GetUsersForRecapWorkflow extends WorkflowEntrypoint<Env, GetUsersForRecapParams> {
    async run(event: WorkflowEvent<GetUsersForRecapParams>, step: WorkflowStep) {
        const batchSize = event.payload.batchSize ?? 100; // Process users in batches
        const lastProcessedUserId = event.payload.lastProcessedUserId;

        // Get users who haven't had a recap recently
        const users = await step.do('Get batch of active users', async () => {
            const db = getDB(this.env);
            const now = new Date();
            const twentyFourHoursAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);

            const baseCondition = or(
                isNull(userMeta.lastRecapAt),
                lt(userMeta.lastRecapAt, twentyFourHoursAgo)
            );
            
            const whereCondition = lastProcessedUserId 
                ? and(baseCondition, gt(userMeta.userId, lastProcessedUserId))
                : baseCondition;

            const query = db.select()
                .from(userMeta)
                .where(whereCondition)
                .limit(batchSize);

            return await query;
        });

        // Process users in parallel, with retry logic
        await step.do(
            'Trigger individual recaps',
            {
                retries: {
                    limit: 5,
                    delay: '1 minute',
                    backoff: 'exponential',
                },
                timeout: '5 minutes',
            },
            async () => {
                // Process users in parallel with Promise.all
                await Promise.all(users.map(async (user) => {
                    try {
                        // Start a new workflow instance for each user
                        await this.env.DAILY_RECAP_WORKFLOW.create({
                            params: {
                                userId: user.userId,
                                timezone: user.timezone
                            }
                        });

                        // Update lastRecapAt to prevent duplicate processing
                        const db = getDB(this.env);
                        await db
                            .update(userMeta)
                            .set({ lastRecapAt: new Date() })
                            .where(eq(userMeta.userId, user.userId));
                    } catch (error) {
                        console.error(`Failed to process user ${user.userId}:`, error);
                        throw error; // Let the retry mechanism handle it
                    }
                }));
            }
        );

        // If we processed a full batch, trigger another workflow for the next batch
        if (users.length === batchSize) {
            const lastUser = users[users.length - 1];
            if (!lastUser) return;
            
            await step.do('Trigger next batch', async () => {
                await this.env.GET_USERS_WORKFLOW.create({
                    params: {
                        batchSize,
                        lastProcessedUserId: lastUser.userId
                    }
                });
            });
        }
    }
}
</file>

<file path="apps/workflows/tsconfig.json">
{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "strict": true,
    "skipLibCheck": true,
    "lib": [
      "ESNext"
    ],
    "types": [
        "@cloudflare/workers-types"
    ],
  },
	"extends": "@acme/tsconfig/base.json"
}
</file>

<file path="apps/workflows/turbo.json">
{
  "$schema": "https://turborepo.org/schema.json",
  "extends": ["//"],
  "tasks": {
    "dev": {
      "persistent": true,
      "interactive": true
    }
  }
}
</file>

<file path="apps/workflows/worker-configuration.d.ts">
// Generated by Wrangler by running `wrangler types`

interface Env {
	IMAGES_BUCKET: R2Bucket;
	DB: D1Database;
	AI: Ai;
	DAILY_RECAP_WORKFLOW: Workflow;
	GET_USERS_WORKFLOW: Workflow;
}
</file>

<file path="apps/workflows/wrangler.toml">
name = "recap-workflows"
main = "src/index.ts"
compatibility_date = "2025-01-02"
compatibility_flags = ["nodejs_compat"]

[observability]
enabled = true

[[workflows]]
name = "daily-recap-workflow"
binding = "DAILY_RECAP_WORKFLOW"
class_name = "DailyRecapWorkflow"

[[r2_buckets]]
bucket_name = "replace-with-yours"
preview_bucket_name = "replace-with-yours"
binding = "IMAGES_BUCKET"

[[d1_databases]]
binding = "DB"
database_name = "replace-with-yours"
database_id = "replace-with-yours"

[ai]
binding = "AI"

[triggers]
crons = [ "0 6 * * *" ]

[dev]
port = 8788

[[workflows]]
name = "get-users-for-recap-workflow"
binding = "GET_USERS_WORKFLOW"
class_name = "GetUsersForRecapWorkflow"
</file>

<file path="docs/analysis-repo.md">
# 新项目代码分析与协作规范文档自动生成 - 优化提示词 v1

## 目标
针对新项目，自动分析代码库、生成结构化协作文档，聚焦新需求快速实现与多人协作冲突规避。


## 一、目录结构扫描与输出
- 递归扫描整个项目文件夹，生成详细的目录结构树（建议输出到 `project-structure.md`）。
- 简要注释每个主要目录和关键文件的用途。

## 二、项目架构文档
- 生成清晰的架构总览（如 `architecture-overview.md`），包括分层设计、核心模块、数据流、主要技术栈说明。
- 重点说明前端、后端、移动端（如有）、数据库/存储、API、插件等各层职责与协作关系。

## 三、新需求实现与协作规范
- 生成新需求实现流程文档（如 `feature-development-guide.md`），涵盖 schema 新增、页面开发、hooks/service 新增与变更的标准步骤。
- 强调如何避免多人协作时的冲突（如 schema/service 变更同步、PR/Issue 说明、文档同步、主导人认领机制等）。
- 规范分层、命名、路径、mock/测试环境降级等团队约定。

## 四、测试流程与用例规范
- 输出测试推进与用例撰写规范文档（如 `testing-and-release-guide.md`），包括测试文件放置、命名、mock 策略、覆盖要求、CI 流程等。
- 明确每个核心模块必须有 smoke/unit/integration 测试，测试推进需自动检测缺失用例并输出清单。

## 五、发布流程与插件管理
- 说明标准的发布流程（如 `release-process.md`），包括测试、构建、真机验证、CI/CD、文档同步 checklist。
- 输出已集成的 Capacitor 插件清单及其用途，详细说明新增插件的标准流程（安装、注册、适配层封装、测试、文档同步等）。

## 六、可选：协作常见问题与处理建议
- 总结常见协作冲突、遗漏、测试覆盖不足等问题的处理建议，鼓励主动沟通与文档同步。

---

### 使用建议
- 以上每一部分都应有结构化的目录、分点说明、操作步骤和协作注意事项，语言简明、对新手友好。
- 所有输出文件均放在 `new-docs` 文件夹，便于团队成员随时查阅与维护。
- 如遇特殊业务场景或团队约定，可在文档末尾补充“常见问题与团队约定”专栏。
</file>

<file path="docs/CONTRIBUTING.md">
# 贡献指南

感谢您对 Cloudflare Turbo Stack 项目的贡献兴趣！本文档提供了参与项目开发的详细指南，帮助您快速上手并遵循项目的最佳实践。

## 目录

- [开发环境设置](#开发环境设置)
- [开发工作流程](#开发工作流程)
- [提交代码](#提交代码)
- [创建新应用或包](#创建新应用或包)
- [常见问题解决](#常见问题解决)

## 开发环境设置

### 前提条件

- Node.js >= 20.16.0
- pnpm >= 9.6.0
- Git

### 初始设置

1. 克隆仓库

```bash
git clone <repository-url>
cd cloudflare-workers-d1-r2-expo-turborepo-trpc-workflows-astro
```

2. 安装依赖

```bash
pnpm install
```

3. 环境变量配置

```bash
cp .env.example .env
# 编辑 .env 文件，填入必要的环境变量
```

## 开发工作流程

### 启动开发服务器

启动所有服务：

```bash
pnpm dev
```

启动特定应用：

```bash
# 例如，仅启动 API 服务
pnpm dev -F @acme/apiservice...
```

### 数据库操作

生成数据库迁移：

```bash
pnpm db:generate
```

应用数据库迁移：

```bash
pnpm -F @acme/db migrate
```

打开数据库管理界面：

```bash
pnpm db:studio
```

### 代码质量检查

运行 ESLint 检查：

```bash
pnpm lint
```

自动修复 ESLint 问题：

```bash
pnpm lint:fix
```

检查代码格式：

```bash
pnpm format
```

自动修复格式问题：

```bash
pnpm format:fix
```

类型检查：

```bash
pnpm typecheck
```

## 提交代码

### 分支创建

从最新的 main 分支创建功能分支：

```bash
git checkout main
git pull
git checkout -b feature/your-feature-name
```

### 提交前检查

在提交代码前，确保：

1. 代码通过所有检查：

```bash
pnpm lint && pnpm format && pnpm typecheck
```

2. 所有应用能正常构建：

```bash
pnpm build
```

### 提交信息格式

遵循约定式提交规范：

```
<类型>(<作用域>): <描述>

[可选的详细描述]

[可选的关闭问题引用]
```

示例：

```
feat(auth): 添加用户注册功能

实现了基于 Clerk 的用户注册流程，包括邮箱验证和初始化用户配置文件。

Closes #123
```

### 创建 Pull Request

1. 推送分支到远程仓库：

```bash
git push -u origin feature/your-feature-name
```

2. 在 GitHub 上创建 Pull Request
3. 填写 PR 描述，包括：
   - 实现的功能或修复的问题
   - 实现方法的简要说明
   - 测试方法
   - 相关的 issue 链接

4. 等待代码审查和 CI 检查通过

## 创建新应用或包

### 创建新应用

1. 在 `apps` 目录下创建新目录
2. 初始化 package.json：

```json
{
  "name": "@acme/your-app-name",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "dev": "your-dev-command",
    "build": "your-build-command",
    "clean": "git clean -xdf .cache .turbo node_modules"
  },
  "dependencies": {
    "@acme/db": "workspace:*"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/tsconfig": "workspace:*"
  }
}
```

3. 创建 `tsconfig.json`，继承基础配置：

```json
{
  "extends": "@acme/tsconfig/base.json",
  "compilerOptions": {
    "tsBuildInfoFile": ".cache/tsbuildinfo.json"
  },
  "include": ["src"],
  "exclude": ["node_modules"]
}
```

4. 创建 `turbo.json` 配置：

```json
{
  "extends": ["//"]
}
```

### 创建新包

1. 在 `packages` 目录下创建新目录
2. 初始化 package.json：

```json
{
  "name": "@acme/your-package-name",
  "version": "0.0.1",
  "private": true,
  "type": "module",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "default": "./src/index.ts"
    }
  },
  "scripts": {
    "build": "tsc",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "dev": "tsc --watch",
    "lint": "eslint",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "typescript": "catalog:"
  }
}
```

3. 创建 `tsconfig.json`，继承基础配置
4. 创建 `src/index.ts` 作为包的入口点

## 常见问题解决

### 依赖问题

如果遇到依赖相关问题，尝试：

```bash
# 清理 node_modules
pnpm clean

# 重新安装依赖
pnpm install
```

### Turborepo 缓存问题

如果遇到构建缓存问题：

```bash
# 清理 Turborepo 缓存
rm -rf .turbo
```

### 环境变量问题

确保所有必要的环境变量都已在 `.env` 文件中设置，并且已在 `turbo.json` 的 `globalEnv` 中声明。

---

如有任何问题或建议，请创建 issue 或联系项目维护者。我们欢迎所有形式的贡献！
</file>

<file path="docs/DEVELOPMENT_GUIDELINES.md">
# Cloudflare Turbo Stack 开发规范

本文档提供了基于 Cloudflare Turbo Stack 项目的开发规范指南，旨在确保多人协作开发时保持一致性和高质量的代码标准。

## 目录

- [项目结构规范](#项目结构规范)
- [技术栈规范](#技术栈规范)
- [代码风格指南](#代码风格指南)
- [Git 工作流规范](#git-工作流规范)
- [依赖管理规范](#依赖管理规范)
- [环境变量管理](#环境变量管理)
- [构建与部署规范](#构建与部署规范)
- [测试规范](#测试规范)
- [文档规范](#文档规范)

## 项目结构规范

### Monorepo 结构

项目采用 Turborepo 管理的 Monorepo 结构，包含以下主要目录：

```
.
├── apps/                # 应用程序
│   ├── apiservice/      # Cloudflare Worker API
│   ├── astro/           # 静态网站/登陆页
│   ├── expo/            # 移动应用
│   └── workflows/       # Cloudflare Workflows
├── packages/            # 共享包
│   ├── db/              # 数据库模式和工具
│   └── trpc/            # tRPC 路由定义
└── tooling/             # 共享开发工具
    ├── eslint/          # ESLint 配置
    ├── github/          # GitHub 工作流配置
    ├── prettier/        # Prettier 配置
    ├── tailwind/        # Tailwind 配置
    └── typescript/      # TypeScript 配置
```

### 新应用/包的添加规则

1. **应用程序**：所有独立应用应放在 `apps/` 目录下
2. **共享包**：可重用的代码库应放在 `packages/` 目录下
3. **工具配置**：共享的开发工具配置应放在 `tooling/` 目录下
4. **命名规范**：
   - 包名使用小写字母，单词间用连字符（-）分隔
   - 内部包名前缀统一为 `@acme/`

## 技术栈规范

项目使用以下技术栈，新功能开发必须遵循这些选择以保持一致性：

- **前端**：React Native (Expo)、Astro
- **后端**：Cloudflare Workers、Workers AI
- **数据库**：Cloudflare D1 (SQLite)
- **存储**：Cloudflare R2
- **认证**：Clerk
- **API**：tRPC
- **构建工具**：Turborepo
- **包管理器**：pnpm

### 技术选择原则

1. 优先使用项目已有的技术和库
2. 添加新依赖前，必须在团队内讨论并获得批准
3. 避免引入功能重叠的库

## 代码风格指南

### TypeScript

- 使用项目提供的 TypeScript 配置（`@acme/tsconfig`）
- 严格模式（`strict: true`）
- 避免使用 `any` 类型，优先使用 `unknown` 或具体类型
- 使用类型推断，但在函数参数和返回值上显式声明类型

### ESLint

项目使用统一的 ESLint 配置，位于 `tooling/eslint/` 目录：

- 遵循基础配置 (`base.js`)
- React 项目使用 React 特定规则 (`react.js`)
- Next.js 项目使用 Next.js 特定规则 (`nextjs.js`)

运行 `pnpm lint` 检查代码，`pnpm lint:fix` 自动修复问题。

### Prettier

使用项目统一的 Prettier 配置（`tooling/prettier/index.js`）：

- 导入排序规则遵循配置中的 `importOrder`
- 使用 Tailwind CSS 插件确保类名排序一致

运行 `pnpm format` 检查格式，`pnpm format:fix` 自动修复格式问题。

### 命名约定

- **文件名**：
  - React 组件使用 PascalCase（如 `Button.tsx`）
  - 工具函数使用 camelCase（如 `formatDate.ts`）
  - 常量文件使用 kebab-case（如 `api-constants.ts`）
- **变量/函数**：使用 camelCase
- **类/接口/类型**：使用 PascalCase
- **常量**：使用 UPPER_SNAKE_CASE

## Git 工作流规范

### 分支策略

- **main**：主分支，保持可部署状态
- **feature/**：功能分支，从 main 分支创建
- **bugfix/**：修复分支，从 main 分支创建
- **release/**：发布分支，用于准备发布

### 提交规范

提交信息应遵循以下格式：

```
<类型>(<作用域>): <描述>

[可选的详细描述]

[可选的关闭问题引用]
```

类型包括：
- **feat**：新功能
- **fix**：错误修复
- **docs**：文档更改
- **style**：不影响代码含义的更改（空格、格式等）
- **refactor**：既不修复错误也不添加功能的代码更改
- **perf**：提高性能的代码更改
- **test**：添加或修正测试
- **chore**：对构建过程或辅助工具的更改

示例：`feat(auth): 添加用户注册功能`

### 代码审查

- 所有代码更改必须通过 Pull Request 提交
- 至少需要一名团队成员的审查和批准
- CI 检查必须通过（类型检查、lint、测试等）

## 依赖管理规范

### 包管理器

- 使用 pnpm 作为唯一的包管理器
- Node.js 版本要求：>=20.16.0
- pnpm 版本要求：^9.6.0

### 工作区依赖

- 工作区内部依赖使用 `workspace:*` 版本说明符
- 共享依赖使用 `catalog:` 版本说明符，确保版本一致性

### 添加依赖

- 添加全局依赖：`pnpm add -w <package>`
- 添加特定工作区依赖：`pnpm add <package> --filter <workspace>`
- 添加开发依赖：`pnpm add -D <package> [--filter <workspace>]`

## 环境变量管理

- 环境变量定义在项目根目录的 `.env` 文件中
- 使用 `.env.example` 作为模板，记录所需的环境变量
- 通过 `turbo.json` 的 `globalEnv` 配置共享环境变量
- 在代码中，使用 `import { env } from '~/env'` 访问环境变量，而不是直接使用 `process.env`

## 构建与部署规范

### 本地开发

- 启动所有服务：`pnpm dev`
- 启动特定应用：`pnpm dev -F @acme/<app-name>...`

### 构建

- 构建所有应用：`pnpm build`
- 构建特定应用：`pnpm build -F @acme/<app-name>...`

### 部署

- Cloudflare Workers 部署：`pnpm deploy -F @acme/<worker-name>`
- 数据库迁移：
  - 生成迁移：`pnpm db:generate`
  - 应用迁移：`pnpm -F @acme/db migrate`

## 测试规范

- 单元测试应放在与被测代码相同目录下的 `__tests__` 目录中
- 集成测试应放在应用的 `tests` 目录中
- 测试文件命名：`<被测文件名>.test.ts` 或 `<被测文件名>.spec.ts`
- 使用 Jest 或 Vitest 作为测试框架

## 文档规范

- 每个应用和包应有自己的 README.md 文件，描述其用途和使用方法
- API 文档应使用 JSDoc 注释
- 复杂功能应有设计文档，放在相关应用/包的 `docs` 目录下
- 项目级文档放在根目录，如本开发规范文档

---

## 前后端交互与 API 扩展规范

### 1. 交互架构说明
- **静态网站（Astro）** 和 **移动应用（Expo）** 通过 tRPC 客户端直接调用 `apiservice`（Cloudflare Worker API），实现无 REST 层的类型安全远程调用。
- tRPC 路由统一在 `packages/trpc` 维护，前端通过 `@acme/trpc` 包自动获得类型推断和 API 路由。
- 数据请求流程：前端页面/功能 → tRPC 客户端 → apiservice（tRPC handler）→ 数据库（Cloudflare D1）或存储（R2）。

### 2. 新增页面/功能时的 API 扩展流程
1. **前端页面增加（Astro/Expo）**：
   - 新建页面或功能组件，按需调用 tRPC 提供的 API。
   - 若需新接口，需同步扩展 tRPC 路由。
2. **API 扩展（apiservice & trpc）**：
   - 在 `packages/trpc/src/router/` 下新增或扩展对应路由文件，定义输入输出类型和业务逻辑。
   - 在 `packages/trpc/src/router/index.ts` 注册新路由。
   - 在 `apps/apiservice/src` 中确保 tRPC handler 正确引入路由。
3. **数据库 schema 联动**：
   - 若 API 涉及新表/字段，先在 `packages/db/src/schema/` 下定义/修改 schema。
   - 运行 `pnpm db:generate` 生成迁移脚本，`pnpm -F @acme/db migrate` 应用迁移。
   - API 层通过 ORM 访问数据库，保持类型一致。
4. **前端调用**：
   - 前端通过 `@acme/trpc` 的 hooks（如 `trpc.useQuery`、`trpc.useMutation`）调用新 API，自动获得类型提示。

### 3. tRPC 路由扩展与类型安全
- 路由定义集中在 `packages/trpc`，所有输入输出类型自动推断。
- 前端无需手动维护接口类型，避免类型漂移。
- 推荐每次扩展 API 时补充 JSDoc 注释，便于自动生成文档。

### 4. 典型开发流程示例
1. Astro/Expo 新增“用户资料”页面 → 发现需获取/更新用户信息
2. 在 `packages/trpc/src/router/user.ts` 新增 `getProfile`、`updateProfile` 方法
3. 在 `packages/db/src/schema/user.ts` 增加字段（如 avatar）并迁移
4. 在前端页面通过 `trpc.user.getProfile.useQuery()` 获取数据，`trpc.user.updateProfile.useMutation()` 更新
5. 代码提交后，CI 自动检查类型、lint、测试

### 5. 注意事项
- 所有 API 变更需同步更新 tRPC 路由和类型
- 数据库 schema 变更需生成并应用迁移，避免手动修改数据库
- 推荐前后端开发协同评审 API 设计，确保接口语义清晰

---

本规范文档应随项目演进而更新。团队成员有责任遵循这些规范，并在发现问题时提出改进建议。

## 数据库 Schema 变更与 tRPC 层同步流程

当数据库 schema 发生变化时，需同步更新 `packages/trpc/src/router` 目录下相关路由和输入/输出类型定义，确保前后端类型一致，保证类型安全。推荐流程如下：

1. **更新数据库 schema**：在 `packages/db` 中完成 schema 变更及迁移。
2. **同步 tRPC 路由与类型**：根据最新 schema，及时更新 `packages/trpc/src/router` 下相关路由的输入、输出类型定义和业务逻辑。
3. **类型检查**：确保 tRPC 路由的输入输出类型与数据库模型保持一致，充分利用 TypeScript 类型推断。
4. **端到端测试**：完成变更后，进行端到端测试，验证接口和数据结构的正确性，确保前端调用无类型错误。
5. **代码审查**：每次数据库 schema 变更，务必同步提交 tRPC 层相关更新，避免类型漂移。

> 建议：每次数据库 schema 变更后，务必检查并同步更新 tRPC 路由和类型定义，保证类型安全和接口一致性。
</file>

<file path="docs/repomix-output.xml">
This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: input/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
.env.example
.gitattributes
.gitattributes copy
.gitignore
.npmrc
.nvmrc
apps/apiservice/eslint.config.js
apps/apiservice/package.json
apps/apiservice/src/index.ts
apps/apiservice/tsconfig.json
apps/apiservice/turbo.json
apps/apiservice/wrangler.toml
apps/astro/.gitignore
apps/astro/astro.config.mjs
apps/astro/components.json
apps/astro/eslint.config.js
apps/astro/functions/[[path]].js
apps/astro/package.json
apps/astro/postcss.config.js
apps/astro/public/favicon.svg
apps/astro/README.md
apps/astro/src/components/react/hero.tsx
apps/astro/src/components/ui/button.tsx
apps/astro/src/components/ui/dialog.tsx
apps/astro/src/components/ui/input.tsx
apps/astro/src/env.d.ts
apps/astro/src/layouts/Layout.astro
apps/astro/src/lib/utils.ts
apps/astro/src/pages/index.astro
apps/astro/src/styles/globals.css
apps/astro/tailwind.config.js
apps/astro/tsconfig.json
apps/astro/turbo.json
apps/astro/wrangler.toml
apps/expo/.env.example
apps/expo/.npmrc
apps/expo/app.json
apps/expo/app/_layout.tsx
apps/expo/app/(auth)/_layout.tsx
apps/expo/app/(auth)/sign-in.tsx
apps/expo/app/(auth)/sign-up.tsx
apps/expo/app/(tabs)/_layout.tsx
apps/expo/app/(tabs)/account.tsx
apps/expo/app/(tabs)/add.tsx
apps/expo/app/(tabs)/lore.tsx
apps/expo/app/index.tsx
apps/expo/babel.config.ts
apps/expo/eslint.config.mjs
apps/expo/package.json
apps/expo/README.md
apps/expo/tsconfig.json
apps/expo/turbo.json
apps/expo/utils/api.tsx
apps/expo/utils/base-url.tsx
apps/expo/utils/TRPCProvider.tsx
apps/workflows/.editorconfig
apps/workflows/.gitignore
apps/workflows/.prettierrc
apps/workflows/eslint.config.js
apps/workflows/package.json
apps/workflows/README.md
apps/workflows/src/index.ts
apps/workflows/src/workflows/daily-recap.ts
apps/workflows/src/workflows/get-users-for-recap.ts
apps/workflows/tsconfig.json
apps/workflows/turbo.json
apps/workflows/worker-configuration.d.ts
apps/workflows/wrangler.toml
CONTRIBUTING.md
DEVELOPMENT_GUIDELINES.md
LICENSE
package.json
packages/db/drizzle.config.ts
packages/db/eslint.config.js
packages/db/migrations/0000_youthful_proudstar.sql
packages/db/migrations/0001_swift_puck.sql
packages/db/migrations/0002_sharp_leech.sql
packages/db/migrations/0003_swift_sunfire.sql
packages/db/migrations/0004_thin_thunderbolt.sql
packages/db/migrations/0005_chunky_rocket_raccoon.sql
packages/db/migrations/0006_pretty_morbius.sql
packages/db/migrations/0007_chief_quentin_quire.sql
packages/db/migrations/meta/_journal.json
packages/db/migrations/meta/0000_snapshot.json
packages/db/migrations/meta/0001_snapshot.json
packages/db/migrations/meta/0002_snapshot.json
packages/db/migrations/meta/0003_snapshot.json
packages/db/migrations/meta/0004_snapshot.json
packages/db/migrations/meta/0005_snapshot.json
packages/db/migrations/meta/0006_snapshot.json
packages/db/migrations/meta/0007_snapshot.json
packages/db/package.json
packages/db/src/client.ts
packages/db/src/index.ts
packages/db/src/schema.ts
packages/db/tsconfig.json
packages/db/wrangler.toml
packages/trpc/eslint.config.js
packages/trpc/package.json
packages/trpc/src/index.ts
packages/trpc/src/root.ts
packages/trpc/src/router/moments.ts
packages/trpc/src/router/post.ts
packages/trpc/src/router/recaps.ts
packages/trpc/src/router/user.ts
packages/trpc/src/trpc.ts
packages/trpc/src/types.ts
packages/trpc/tsconfig.json
pnpm-workspace.yaml
README.md
tooling/eslint/base.js
tooling/eslint/nextjs.js
tooling/eslint/package.json
tooling/eslint/react.js
tooling/eslint/tsconfig.json
tooling/eslint/types.d.ts
tooling/github/package.json
tooling/github/setup/action.yml
tooling/prettier/index.js
tooling/prettier/package.json
tooling/prettier/tsconfig.json
tooling/tailwind/base.ts
tooling/tailwind/eslint.config.js
tooling/tailwind/native.ts
tooling/tailwind/package.json
tooling/tailwind/tsconfig.json
tooling/tailwind/web.ts
tooling/typescript/base.json
tooling/typescript/internal-package.json
tooling/typescript/package.json
turbo.json
turbo/generators/config.ts
turbo/generators/templates/eslint.config.js.hbs
turbo/generators/templates/package.json.hbs
turbo/generators/templates/tsconfig.json.hbs
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".env.example">
INNGEST_EVENT_KEY=
CLOUDFLARE_ACCOUNT_ID=
CLOUDFLARE_DATABASE_ID=
CLOUDFLARE_D1_TOKEN=
</file>

<file path=".gitattributes">
# Auto detect text files and perform LF normalization
* text=auto
</file>

<file path=".gitattributes copy">
# Auto detect text files and perform LF normalization
* text=auto
</file>

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
node_modules
.pnp
.pnp.js

# testing
coverage

# next.js
.next/
out/
next-env.d.ts

# nitro
.nitro/
.output/

# expo
.expo/
expo-env.d.ts
apps/expo/.gitignore
apps/expo/ios
apps/expo/android

# production
build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# local env files
.env
.env*.local

# vercel
.vercel

# typescript
dist/
.cache

# turbo
.turbo
/apps/expo-app/android/app/src/debug/AndroidManifest.xml
/apps/expo-app/android/app/src/main/AndroidManifest.xml
/apps/expo-app/android/app/build.gradle
/apps/expo-app/android/build.gradle
/apps/expo-app/android/app/src/main/res/values/colors.xml
/apps/expo-app/android/app/src/main/res/values-night/colors.xml
/apps/expo-app/android/app/debug.keystore
/apps/expo-app/android/gradle.properties
/apps/expo-app/android/gradle/wrapper/gradle-wrapper.jar
/apps/expo-app/android/gradle/wrapper/gradle-wrapper.properties
/apps/expo-app/android/gradlew
/apps/expo-app/android/gradlew.bat
/apps/expo-app/android/app/src/main/res/mipmap-hdpi/ic_launcher.webp
/apps/expo-app/android/app/src/main/res/mipmap-mdpi/ic_launcher.webp
/apps/expo-app/android/app/src/main/res/mipmap-xhdpi/ic_launcher.webp
/apps/expo-app/android/app/src/main/res/mipmap-xxhdpi/ic_launcher.webp
/apps/expo-app/android/app/src/main/res/mipmap-xxxhdpi/ic_launcher.webp
/apps/expo-app/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher.xml
/apps/expo-app/android/app/src/main/res/drawable/ic_launcher_background.xml
/apps/expo-app/android/app/src/main/res/mipmap-hdpi/ic_launcher_foreground.webp
/apps/expo-app/android/app/src/main/res/mipmap-mdpi/ic_launcher_foreground.webp
/apps/expo-app/android/app/src/main/res/mipmap-xhdpi/ic_launcher_foreground.webp
/apps/expo-app/android/app/src/main/res/mipmap-xxhdpi/ic_launcher_foreground.webp
/apps/expo-app/android/app/src/main/res/mipmap-xxxhdpi/ic_launcher_foreground.webp
/apps/expo-app/android/app/src/main/res/mipmap-hdpi/ic_launcher_round.webp
/apps/expo-app/android/app/src/main/res/mipmap-mdpi/ic_launcher_round.webp
/apps/expo-app/android/app/src/main/res/mipmap-xhdpi/ic_launcher_round.webp
/apps/expo-app/android/app/src/main/res/mipmap-xxhdpi/ic_launcher_round.webp
/apps/expo-app/android/app/src/main/res/mipmap-xxxhdpi/ic_launcher_round.webp
/apps/expo-app/android/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml
/apps/expo-app/android/app/src/main/java/com/anonymous/expoapp/MainActivity.kt
/apps/expo-app/android/app/src/main/java/com/anonymous/expoapp/MainApplication.kt
/apps/expo-app/android/app/proguard-rules.pro
/apps/expo-app/android/app/src/main/res/drawable/rn_edit_text_material.xml
/apps/expo-app/android/settings.gradle
/apps/expo-app/android/app/src/main/res/drawable-hdpi/splashscreen_logo.png
/apps/expo-app/android/app/src/main/res/drawable-mdpi/splashscreen_logo.png
/apps/expo-app/android/app/src/main/res/drawable-xhdpi/splashscreen_logo.png
/apps/expo-app/android/app/src/main/res/drawable-xxhdpi/splashscreen_logo.png
/apps/expo-app/android/app/src/main/res/drawable-xxxhdpi/splashscreen_logo.png
/apps/expo-app/android/app/src/main/res/values/strings.xml
/apps/expo-app/android/app/src/main/res/values/styles.xml
/apps/apiservice/.wrangler/
/packages/db/.wrangler/
/apps/eventsservice/.wrangler/
.dev.vars
</file>

<file path=".npmrc">
node-linker=hoisted
link-workspace-packages=true
</file>

<file path=".nvmrc">
20.16
</file>

<file path="apps/apiservice/eslint.config.js">
import baseConfig from "@acme/eslint-config/base";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: ["dist/**"],
  },
  ...baseConfig
];
</file>

<file path="apps/apiservice/package.json">
{
  "name": "@acme/apiservice",
  "version": "0.0.1",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "wrangler dev --ip 0.0.0.0 --remote",
    "build": "tsc",
    "deploy": "wrangler publish",
    "clean": "git clean -xdf .cache .turbo node_modules .wrangler"
  },
  "dependencies": {
    "@acme/db": "workspace:*",
    "@acme/trpc": "workspace:*",
    "typescript": "catalog:",
    "wrangler": "3.93.0"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "@types/node": "^20.16.11"
  }
}
</file>

<file path="apps/apiservice/src/index.ts">
// apps/apiservice/src/index.ts
import { appRouter, createContext } from '@acme/trpc';
import type { FetchCreateContextFnOptions } from '@trpc/server/adapters/fetch';
import { fetchRequestHandler } from '@trpc/server/adapters/fetch';
import type { D1Database } from '@cloudflare/workers-types';
import { getDB } from "@acme/db";
import type { R2Bucket } from '@cloudflare/workers-types';

interface Env {
  CLERK_PUBLISHABLE_KEY: string;
  CLERK_SECRET_KEY: string;
  DB: D1Database;
  IMAGES_BUCKET: R2Bucket;
}

export default {
  async fetch(request: Request, env: Env): Promise<Response> {
    const db = getDB(env);
    const corsHeaders = {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET,HEAD,POST,OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type',
    };

    // Handle OPTIONS preflight requests
    if (request.method === 'OPTIONS') {
      return new Response(null, {
        headers: corsHeaders
      });
    }

    // Your existing TRPC handler
    return fetchRequestHandler({
      endpoint: '/trpc',
      req: request,
      router: appRouter,
      createContext: (opts: FetchCreateContextFnOptions) => createContext({
        ...opts,
        clerkPublicKey: env.CLERK_PUBLISHABLE_KEY,
        clerkSecretKey: env.CLERK_SECRET_KEY,
        db,
        imagesBucket: env.IMAGES_BUCKET
      }),
    });
  },
};
</file>

<file path="apps/apiservice/tsconfig.json">
{
  "extends": "@acme/tsconfig/base.json",
  "exclude": ["node_modules"]
}
</file>

<file path="apps/apiservice/turbo.json">
{
  "$schema": "https://turborepo.org/schema.json",
  "extends": ["//"],
  "tasks": {
    "dev": {
      "persistent": true,
      "interactive": true
    }
  }
}
</file>

<file path="apps/apiservice/wrangler.toml">
name = ""
compatibility_date = "2024-09-23"
compatibility_flags = ["nodejs_compat"]

main = "src/index.ts"

[build]
command = "pnpm run build"

[[r2_buckets]]
bucket_name = ""
preview_bucket_name = ""
binding = ""

[[d1_databases]]
binding = "DB"
database_name = ""
database_id = ""


# You definitely want to make anything secret an actual secret key using wrangler, so in a production app do that instead of setting here
[vars]
WRANGLER_BUILD_CONDITIONS=""
WRANGLER_BUILD_PLATFORM="node"
CLERK_PUBLISHABLE_KEY = ""
CLERK_SECRET_KEY = ""

[dev]
port = 8787
</file>

<file path="apps/astro/.gitignore">
# build output
dist/
# generated types
.astro/

# dependencies
node_modules/

# logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

.wrangler/

# environment variables
.env
.env.production

# macOS-specific files
.DS_Store

# jetbrains setting folder
.idea/
</file>

<file path="apps/astro/astro.config.mjs">
import { defineConfig } from 'astro/config';

import react from '@astrojs/react';

import tailwind from '@astrojs/tailwind';

import cloudflare from '@astrojs/cloudflare';

// https://astro.build/config
export default defineConfig({
  output: 'server',
  adapter: cloudflare({
    mode: 'directory'
  }),
  integrations: [react(), tailwind({applyBaseStyles: false,})]
});
</file>

<file path="apps/astro/components.json">
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/styles/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}
</file>

<file path="apps/astro/eslint.config.js">
import baseConfig, { restrictEnvAccess } from "@acme/eslint-config/base";
import nextjsConfig from "@acme/eslint-config/nextjs";
import reactConfig from "@acme/eslint-config/react";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: [".astro/**"],
  },
  ...baseConfig,
  ...reactConfig,
  ...nextjsConfig,
  ...restrictEnvAccess,
];
</file>

<file path="apps/astro/functions/[[path]].js">
globalThis.process = {
								argv: [],
								env: {},
							};
var ru=Object.create;var mn=Object.defineProperty;var nu=Object.getOwnPropertyDescriptor;var ou=Object.getOwnPropertyNames;var su=Object.getPrototypeOf,iu=Object.prototype.hasOwnProperty;var j=(e,t)=>()=>(e&&(t=e(e=0)),t);var pe=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports),ut=(e,t)=>{for(var r in t)mn(e,r,{get:t[r],enumerable:!0})},au=(e,t,r,n)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of ou(t))!iu.call(e,o)&&o!==r&&mn(e,o,{get:()=>t[o],enumerable:!(n=nu(t,o))||n.enumerable});return e};var Qe=(e,t,r)=>(r=e!=null?ru(su(e)):{},au(t||!e||!e.__esModule?mn(r,"default",{value:e,enumerable:!0}):r,e));var js=pe(I=>{"use strict";var pt=Symbol.for("react.element"),lu=Symbol.for("react.portal"),cu=Symbol.for("react.fragment"),uu=Symbol.for("react.strict_mode"),pu=Symbol.for("react.profiler"),du=Symbol.for("react.provider"),fu=Symbol.for("react.context"),hu=Symbol.for("react.forward_ref"),Au=Symbol.for("react.suspense"),mu=Symbol.for("react.memo"),gu=Symbol.for("react.lazy"),Qs=Symbol.iterator;function yu(e){return e===null||typeof e!="object"?null:(e=Qs&&e[Qs]||e["@@iterator"],typeof e=="function"?e:null)}var Ds={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},Ts=Object.assign,Ns={};function qe(e,t,r){this.props=e,this.context=t,this.refs=Ns,this.updater=r||Ds}qe.prototype.isReactComponent={};qe.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")};qe.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};function Ls(){}Ls.prototype=qe.prototype;function yn(e,t,r){this.props=e,this.context=t,this.refs=Ns,this.updater=r||Ds}var wn=yn.prototype=new Ls;wn.constructor=yn;Ts(wn,qe.prototype);wn.isPureReactComponent=!0;var ks=Array.isArray,Ps=Object.prototype.hasOwnProperty,En={current:null},_s={key:!0,ref:!0,__self:!0,__source:!0};function Fs(e,t,r){var n,o={},s=null,i=null;if(t!=null)for(n in t.ref!==void 0&&(i=t.ref),t.key!==void 0&&(s=""+t.key),t)Ps.call(t,n)&&!_s.hasOwnProperty(n)&&(o[n]=t[n]);var a=arguments.length-2;if(a===1)o.children=r;else if(1<a){for(var l=Array(a),u=0;u<a;u++)l[u]=arguments[u+2];o.children=l}if(e&&e.defaultProps)for(n in a=e.defaultProps,a)o[n]===void 0&&(o[n]=a[n]);return{$$typeof:pt,type:e,key:s,ref:i,props:o,_owner:En.current}}function wu(e,t){return{$$typeof:pt,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}function Cn(e){return typeof e=="object"&&e!==null&&e.$$typeof===pt}function Eu(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,function(r){return t[r]})}var Rs=/\/+/g;function gn(e,t){return typeof e=="object"&&e!==null&&e.key!=null?Eu(""+e.key):t.toString(36)}function Ht(e,t,r,n,o){var s=typeof e;(s==="undefined"||s==="boolean")&&(e=null);var i=!1;if(e===null)i=!0;else switch(s){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case pt:case lu:i=!0}}if(i)return i=e,o=o(i),e=n===""?"."+gn(i,0):n,ks(o)?(r="",e!=null&&(r=e.replace(Rs,"$&/")+"/"),Ht(o,t,r,"",function(u){return u})):o!=null&&(Cn(o)&&(o=wu(o,r+(!o.key||i&&i.key===o.key?"":(""+o.key).replace(Rs,"$&/")+"/")+e)),t.push(o)),1;if(i=0,n=n===""?".":n+":",ks(e))for(var a=0;a<e.length;a++){s=e[a];var l=n+gn(s,a);i+=Ht(s,t,r,l,o)}else if(l=yu(e),typeof l=="function")for(e=l.call(e),a=0;!(s=e.next()).done;)s=s.value,l=n+gn(s,a++),i+=Ht(s,t,r,l,o);else if(s==="object")throw t=String(e),Error("Objects are not valid as a React child (found: "+(t==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return i}function Ot(e,t,r){if(e==null)return e;var n=[],o=0;return Ht(e,n,"","",function(s){return t.call(r,s,o++)}),n}function Cu(e){if(e._status===-1){var t=e._result;t=t(),t.then(function(r){(e._status===0||e._status===-1)&&(e._status=1,e._result=r)},function(r){(e._status===0||e._status===-1)&&(e._status=2,e._result=r)}),e._status===-1&&(e._status=0,e._result=t)}if(e._status===1)return e._result.default;throw e._result}var K={current:null},Kt={transition:null},vu={ReactCurrentDispatcher:K,ReactCurrentBatchConfig:Kt,ReactCurrentOwner:En};function Ms(){throw Error("act(...) is not supported in production builds of React.")}I.Children={map:Ot,forEach:function(e,t,r){Ot(e,function(){t.apply(this,arguments)},r)},count:function(e){var t=0;return Ot(e,function(){t++}),t},toArray:function(e){return Ot(e,function(t){return t})||[]},only:function(e){if(!Cn(e))throw Error("React.Children.only expected to receive a single React element child.");return e}};I.Component=qe;I.Fragment=cu;I.Profiler=pu;I.PureComponent=yn;I.StrictMode=uu;I.Suspense=Au;I.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=vu;I.act=Ms;I.cloneElement=function(e,t,r){if(e==null)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var n=Ts({},e.props),o=e.key,s=e.ref,i=e._owner;if(t!=null){if(t.ref!==void 0&&(s=t.ref,i=En.current),t.key!==void 0&&(o=""+t.key),e.type&&e.type.defaultProps)var a=e.type.defaultProps;for(l in t)Ps.call(t,l)&&!_s.hasOwnProperty(l)&&(n[l]=t[l]===void 0&&a!==void 0?a[l]:t[l])}var l=arguments.length-2;if(l===1)n.children=r;else if(1<l){a=Array(l);for(var u=0;u<l;u++)a[u]=arguments[u+2];n.children=a}return{$$typeof:pt,type:e.type,key:o,ref:s,props:n,_owner:i}};I.createContext=function(e){return e={$$typeof:fu,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null},e.Provider={$$typeof:du,_context:e},e.Consumer=e};I.createElement=Fs;I.createFactory=function(e){var t=Fs.bind(null,e);return t.type=e,t};I.createRef=function(){return{current:null}};I.forwardRef=function(e){return{$$typeof:hu,render:e}};I.isValidElement=Cn;I.lazy=function(e){return{$$typeof:gu,_payload:{_status:-1,_result:e},_init:Cu}};I.memo=function(e,t){return{$$typeof:mu,type:e,compare:t===void 0?null:t}};I.startTransition=function(e){var t=Kt.transition;Kt.transition={};try{e()}finally{Kt.transition=t}};I.unstable_act=Ms;I.useCallback=function(e,t){return K.current.useCallback(e,t)};I.useContext=function(e){return K.current.useContext(e)};I.useDebugValue=function(){};I.useDeferredValue=function(e){return K.current.useDeferredValue(e)};I.useEffect=function(e,t){return K.current.useEffect(e,t)};I.useId=function(){return K.current.useId()};I.useImperativeHandle=function(e,t,r){return K.current.useImperativeHandle(e,t,r)};I.useInsertionEffect=function(e,t){return K.current.useInsertionEffect(e,t)};I.useLayoutEffect=function(e,t){return K.current.useLayoutEffect(e,t)};I.useMemo=function(e,t){return K.current.useMemo(e,t)};I.useReducer=function(e,t,r){return K.current.useReducer(e,t,r)};I.useRef=function(e){return K.current.useRef(e)};I.useState=function(e){return K.current.useState(e)};I.useSyncExternalStore=function(e,t,r){return K.current.useSyncExternalStore(e,t,r)};I.useTransition=function(){return K.current.useTransition()};I.version="18.3.1"});var Je=pe((ry,$s)=>{"use strict";$s.exports=js()});var Di=pe(Ge=>{"use strict";var ai=Je();function x(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var Y=Object.prototype.hasOwnProperty,xu=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Us={},Os={};function li(e){return Y.call(Os,e)?!0:Y.call(Us,e)?!1:xu.test(e)?Os[e]=!0:(Us[e]=!0,!1)}function J(e,t,r,n,o,s,i){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=s,this.removeEmptyString=i}var $={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){$[e]=new J(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];$[t]=new J(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){$[e]=new J(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){$[e]=new J(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){$[e]=new J(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){$[e]=new J(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){$[e]=new J(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){$[e]=new J(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){$[e]=new J(e,5,!1,e.toLowerCase(),null,!1,!1)});var Rn=/[\-:]([a-z])/g;function Dn(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(Rn,Dn);$[t]=new J(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(Rn,Dn);$[t]=new J(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(Rn,Dn);$[t]=new J(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){$[e]=new J(e,1,!1,e.toLowerCase(),null,!1,!1)});$.xlinkHref=new J("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){$[e]=new J(e,1,!1,e.toLowerCase(),null,!0,!0)});var Gt={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Su=["Webkit","ms","Moz","O"];Object.keys(Gt).forEach(function(e){Su.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Gt[t]=Gt[e]})});var Bu=/["'&<>]/;function q(e){if(typeof e=="boolean"||typeof e=="number")return""+e;e=""+e;var t=Bu.exec(e);if(t){var r="",n,o=0;for(n=t.index;n<e.length;n++){switch(e.charCodeAt(n)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#x27;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}o!==n&&(r+=e.substring(o,n)),o=n+1,r+=t}e=o!==n?r+e.substring(o,n):r}return e}var Iu=/([A-Z])/g,bu=/^ms-/,Bn=Array.isArray;function de(e,t){return{insertionMode:e,selectedValue:t}}function Qu(e,t,r){switch(t){case"select":return de(1,r.value!=null?r.value:r.defaultValue);case"svg":return de(2,null);case"math":return de(3,null);case"foreignObject":return de(1,null);case"table":return de(4,null);case"thead":case"tbody":case"tfoot":return de(5,null);case"colgroup":return de(7,null);case"tr":return de(6,null)}return 4<=e.insertionMode||e.insertionMode===0?de(1,null):e}var Hs=new Map;function ci(e,t,r){if(typeof r!="object")throw Error(x(62));t=!0;for(var n in r)if(Y.call(r,n)){var o=r[n];if(o!=null&&typeof o!="boolean"&&o!==""){if(n.indexOf("--")===0){var s=q(n);o=q((""+o).trim())}else{s=n;var i=Hs.get(s);i!==void 0||(i=q(s.replace(Iu,"-$1").toLowerCase().replace(bu,"-ms-")),Hs.set(s,i)),s=i,o=typeof o=="number"?o===0||Y.call(Gt,n)?""+o:o+"px":q((""+o).trim())}t?(t=!1,e.push(' style="',s,":",o)):e.push(";",s,":",o)}}t||e.push('"')}function Z(e,t,r,n){switch(r){case"style":ci(e,t,n);return;case"defaultValue":case"defaultChecked":case"innerHTML":case"suppressContentEditableWarning":case"suppressHydrationWarning":return}if(!(2<r.length)||r[0]!=="o"&&r[0]!=="O"||r[1]!=="n"&&r[1]!=="N"){if(t=$.hasOwnProperty(r)?$[r]:null,t!==null){switch(typeof n){case"function":case"symbol":return;case"boolean":if(!t.acceptsBooleans)return}switch(r=t.attributeName,t.type){case 3:n&&e.push(" ",r,'=""');break;case 4:n===!0?e.push(" ",r,'=""'):n!==!1&&e.push(" ",r,'="',q(n),'"');break;case 5:isNaN(n)||e.push(" ",r,'="',q(n),'"');break;case 6:!isNaN(n)&&1<=n&&e.push(" ",r,'="',q(n),'"');break;default:t.sanitizeURL&&(n=""+n),e.push(" ",r,'="',q(n),'"')}}else if(li(r)){switch(typeof n){case"function":case"symbol":return;case"boolean":if(t=r.toLowerCase().slice(0,5),t!=="data-"&&t!=="aria-")return}e.push(" ",r,'="',q(n),'"')}}}function Vt(e,t,r){if(t!=null){if(r!=null)throw Error(x(60));if(typeof t!="object"||!("__html"in t))throw Error(x(61));t=t.__html,t!=null&&e.push(""+t)}}function ku(e){var t="";return ai.Children.forEach(e,function(r){r!=null&&(t+=r)}),t}function vn(e,t,r,n){e.push(le(r));var o=r=null,s;for(s in t)if(Y.call(t,s)){var i=t[s];if(i!=null)switch(s){case"children":r=i;break;case"dangerouslySetInnerHTML":o=i;break;default:Z(e,n,s,i)}}return e.push(">"),Vt(e,o,r),typeof r=="string"?(e.push(q(r)),null):r}var Ru=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,Ks=new Map;function le(e){var t=Ks.get(e);if(t===void 0){if(!Ru.test(e))throw Error(x(65,e));t="<"+e,Ks.set(e,t)}return t}function Du(e,t,r,n,o){switch(t){case"select":e.push(le("select"));var s=null,i=null;for(c in r)if(Y.call(r,c)){var a=r[c];if(a!=null)switch(c){case"children":s=a;break;case"dangerouslySetInnerHTML":i=a;break;case"defaultValue":case"value":break;default:Z(e,n,c,a)}}return e.push(">"),Vt(e,i,s),s;case"option":i=o.selectedValue,e.push(le("option"));var l=a=null,u=null,c=null;for(s in r)if(Y.call(r,s)){var p=r[s];if(p!=null)switch(s){case"children":a=p;break;case"selected":u=p;break;case"dangerouslySetInnerHTML":c=p;break;case"value":l=p;default:Z(e,n,s,p)}}if(i!=null)if(r=l!==null?""+l:ku(a),Bn(i)){for(n=0;n<i.length;n++)if(""+i[n]===r){e.push(' selected=""');break}}else""+i===r&&e.push(' selected=""');else u&&e.push(' selected=""');return e.push(">"),Vt(e,c,a),a;case"textarea":e.push(le("textarea")),c=i=s=null;for(a in r)if(Y.call(r,a)&&(l=r[a],l!=null))switch(a){case"children":c=l;break;case"value":s=l;break;case"defaultValue":i=l;break;case"dangerouslySetInnerHTML":throw Error(x(91));default:Z(e,n,a,l)}if(s===null&&i!==null&&(s=i),e.push(">"),c!=null){if(s!=null)throw Error(x(92));if(Bn(c)&&1<c.length)throw Error(x(93));s=""+c}return typeof s=="string"&&s[0]===`
`&&e.push(`
`),s!==null&&e.push(q(""+s)),null;case"input":e.push(le("input")),l=c=a=s=null;for(i in r)if(Y.call(r,i)&&(u=r[i],u!=null))switch(i){case"children":case"dangerouslySetInnerHTML":throw Error(x(399,"input"));case"defaultChecked":l=u;break;case"defaultValue":a=u;break;case"checked":c=u;break;case"value":s=u;break;default:Z(e,n,i,u)}return c!==null?Z(e,n,"checked",c):l!==null&&Z(e,n,"checked",l),s!==null?Z(e,n,"value",s):a!==null&&Z(e,n,"value",a),e.push("/>"),null;case"menuitem":e.push(le("menuitem"));for(var d in r)if(Y.call(r,d)&&(s=r[d],s!=null))switch(d){case"children":case"dangerouslySetInnerHTML":throw Error(x(400));default:Z(e,n,d,s)}return e.push(">"),null;case"title":e.push(le("title")),s=null;for(p in r)if(Y.call(r,p)&&(i=r[p],i!=null))switch(p){case"children":s=i;break;case"dangerouslySetInnerHTML":throw Error(x(434));default:Z(e,n,p,i)}return e.push(">"),s;case"listing":case"pre":e.push(le(t)),i=s=null;for(l in r)if(Y.call(r,l)&&(a=r[l],a!=null))switch(l){case"children":s=a;break;case"dangerouslySetInnerHTML":i=a;break;default:Z(e,n,l,a)}if(e.push(">"),i!=null){if(s!=null)throw Error(x(60));if(typeof i!="object"||!("__html"in i))throw Error(x(61));r=i.__html,r!=null&&(typeof r=="string"&&0<r.length&&r[0]===`
`?e.push(`
`,r):e.push(""+r))}return typeof s=="string"&&s[0]===`
`&&e.push(`
`),s;case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":e.push(le(t));for(var f in r)if(Y.call(r,f)&&(s=r[f],s!=null))switch(f){case"children":case"dangerouslySetInnerHTML":throw Error(x(399,t));default:Z(e,n,f,s)}return e.push("/>"),null;case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return vn(e,r,t,n);case"html":return o.insertionMode===0&&e.push("<!DOCTYPE html>"),vn(e,r,t,n);default:if(t.indexOf("-")===-1&&typeof r.is!="string")return vn(e,r,t,n);e.push(le(t)),i=s=null;for(u in r)if(Y.call(r,u)&&(a=r[u],a!=null))switch(u){case"children":s=a;break;case"dangerouslySetInnerHTML":i=a;break;case"style":ci(e,n,a);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":break;default:li(u)&&typeof a!="function"&&typeof a!="symbol"&&e.push(" ",u,'="',q(a),'"')}return e.push(">"),Vt(e,i,s),s}}function qs(e,t,r){if(e.push('<!--$?--><template id="'),r===null)throw Error(x(395));return e.push(r),e.push('"></template>')}function Tu(e,t,r,n){switch(r.insertionMode){case 0:case 1:return e.push('<div hidden id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');case 2:return e.push('<svg aria-hidden="true" style="display:none" id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');case 3:return e.push('<math aria-hidden="true" style="display:none" id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');case 4:return e.push('<table hidden id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');case 5:return e.push('<table hidden><tbody id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');case 6:return e.push('<table hidden><tr id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');case 7:return e.push('<table hidden><colgroup id="'),e.push(t.segmentPrefix),t=n.toString(16),e.push(t),e.push('">');default:throw Error(x(397))}}function Nu(e,t){switch(t.insertionMode){case 0:case 1:return e.push("</div>");case 2:return e.push("</svg>");case 3:return e.push("</math>");case 4:return e.push("</table>");case 5:return e.push("</tbody></table>");case 6:return e.push("</tr></table>");case 7:return e.push("</colgroup></table>");default:throw Error(x(397))}}var Lu=/[<\u2028\u2029]/g;function xn(e){return JSON.stringify(e).replace(Lu,function(t){switch(t){case"<":return"\\u003c";case"\u2028":return"\\u2028";case"\u2029":return"\\u2029";default:throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React")}})}function Pu(e,t){return t=t===void 0?"":t,{bootstrapChunks:[],startInlineScript:"<script>",placeholderPrefix:t+"P:",segmentPrefix:t+"S:",boundaryPrefix:t+"B:",idPrefix:t,nextSuspenseID:0,sentCompleteSegmentFunction:!1,sentCompleteBoundaryFunction:!1,sentClientRenderFunction:!1,generateStaticMarkup:e}}function Js(e,t,r,n){return r.generateStaticMarkup?(e.push(q(t)),!1):(t===""?e=n:(n&&e.push("<!-- -->"),e.push(q(t)),e=!0),e)}var ht=Object.assign,_u=Symbol.for("react.element"),ui=Symbol.for("react.portal"),pi=Symbol.for("react.fragment"),di=Symbol.for("react.strict_mode"),fi=Symbol.for("react.profiler"),hi=Symbol.for("react.provider"),Ai=Symbol.for("react.context"),mi=Symbol.for("react.forward_ref"),gi=Symbol.for("react.suspense"),yi=Symbol.for("react.suspense_list"),wi=Symbol.for("react.memo"),Tn=Symbol.for("react.lazy"),Fu=Symbol.for("react.scope"),Mu=Symbol.for("react.debug_trace_mode"),ju=Symbol.for("react.legacy_hidden"),$u=Symbol.for("react.default_value"),Gs=Symbol.iterator;function In(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case pi:return"Fragment";case ui:return"Portal";case fi:return"Profiler";case di:return"StrictMode";case gi:return"Suspense";case yi:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case Ai:return(e.displayName||"Context")+".Consumer";case hi:return(e._context.displayName||"Context")+".Provider";case mi:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case wi:return t=e.displayName||null,t!==null?t:In(e.type)||"Memo";case Tn:t=e._payload,e=e._init;try{return In(e(t))}catch{}}return null}var Ei={};function Vs(e,t){if(e=e.contextTypes,!e)return Ei;var r={},n;for(n in e)r[n]=t[n];return r}var Re=null;function nr(e,t){if(e!==t){e.context._currentValue2=e.parentValue,e=e.parent;var r=t.parent;if(e===null){if(r!==null)throw Error(x(401))}else{if(r===null)throw Error(x(401));nr(e,r)}t.context._currentValue2=t.value}}function Ci(e){e.context._currentValue2=e.parentValue,e=e.parent,e!==null&&Ci(e)}function vi(e){var t=e.parent;t!==null&&vi(t),e.context._currentValue2=e.value}function xi(e,t){if(e.context._currentValue2=e.parentValue,e=e.parent,e===null)throw Error(x(402));e.depth===t.depth?nr(e,t):xi(e,t)}function Si(e,t){var r=t.parent;if(r===null)throw Error(x(402));e.depth===r.depth?nr(e,r):Si(e,r),t.context._currentValue2=t.value}function Xt(e){var t=Re;t!==e&&(t===null?vi(e):e===null?Ci(t):t.depth===e.depth?nr(t,e):t.depth>e.depth?xi(t,e):Si(t,e),Re=e)}var zs={isMounted:function(){return!1},enqueueSetState:function(e,t){e=e._reactInternals,e.queue!==null&&e.queue.push(t)},enqueueReplaceState:function(e,t){e=e._reactInternals,e.replace=!0,e.queue=[t]},enqueueForceUpdate:function(){}};function Ys(e,t,r,n){var o=e.state!==void 0?e.state:null;e.updater=zs,e.props=r,e.state=o;var s={queue:[],replace:!1};e._reactInternals=s;var i=t.contextType;if(e.context=typeof i=="object"&&i!==null?i._currentValue2:n,i=t.getDerivedStateFromProps,typeof i=="function"&&(i=i(r,o),o=i==null?o:ht({},o,i),e.state=o),typeof t.getDerivedStateFromProps!="function"&&typeof e.getSnapshotBeforeUpdate!="function"&&(typeof e.UNSAFE_componentWillMount=="function"||typeof e.componentWillMount=="function"))if(t=e.state,typeof e.componentWillMount=="function"&&e.componentWillMount(),typeof e.UNSAFE_componentWillMount=="function"&&e.UNSAFE_componentWillMount(),t!==e.state&&zs.enqueueReplaceState(e,e.state,null),s.queue!==null&&0<s.queue.length)if(t=s.queue,i=s.replace,s.queue=null,s.replace=!1,i&&t.length===1)e.state=t[0];else{for(s=i?t[0]:e.state,o=!0,i=i?1:0;i<t.length;i++){var a=t[i];a=typeof a=="function"?a.call(e,s,r,n):a,a!=null&&(o?(o=!1,s=ht({},s,a)):ht(s,a))}e.state=s}else s.queue=null}var Uu={id:1,overflow:""};function bn(e,t,r){var n=e.id;e=e.overflow;var o=32-zt(n)-1;n&=~(1<<o),r+=1;var s=32-zt(t)+o;if(30<s){var i=o-o%5;return s=(n&(1<<i)-1).toString(32),n>>=i,o-=i,{id:1<<32-zt(t)+o|r<<o|n,overflow:s+e}}return{id:1<<s|r<<o|n,overflow:e}}var zt=Math.clz32?Math.clz32:Ku,Ou=Math.log,Hu=Math.LN2;function Ku(e){return e>>>=0,e===0?32:31-(Ou(e)/Hu|0)|0}function qu(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Ju=typeof Object.is=="function"?Object.is:qu,fe=null,Nn=null,Yt=null,R=null,dt=!1,Zt=!1,At=0,ge=null,or=0;function ke(){if(fe===null)throw Error(x(321));return fe}function Ws(){if(0<or)throw Error(x(312));return{memoizedState:null,queue:null,next:null}}function Ln(){return R===null?Yt===null?(dt=!1,Yt=R=Ws()):(dt=!0,R=Yt):R.next===null?(dt=!1,R=R.next=Ws()):(dt=!0,R=R.next),R}function Pn(){Nn=fe=null,Zt=!1,Yt=null,or=0,R=ge=null}function Bi(e,t){return typeof t=="function"?t(e):t}function Xs(e,t,r){if(fe=ke(),R=Ln(),dt){var n=R.queue;if(t=n.dispatch,ge!==null&&(r=ge.get(n),r!==void 0)){ge.delete(n),n=R.memoizedState;do n=e(n,r.action),r=r.next;while(r!==null);return R.memoizedState=n,[n,t]}return[R.memoizedState,t]}return e=e===Bi?typeof t=="function"?t():t:r!==void 0?r(t):t,R.memoizedState=e,e=R.queue={last:null,dispatch:null},e=e.dispatch=Gu.bind(null,fe,e),[R.memoizedState,e]}function Zs(e,t){if(fe=ke(),R=Ln(),t=t===void 0?null:t,R!==null){var r=R.memoizedState;if(r!==null&&t!==null){var n=r[1];e:if(n===null)n=!1;else{for(var o=0;o<n.length&&o<t.length;o++)if(!Ju(t[o],n[o])){n=!1;break e}n=!0}if(n)return r[0]}}return e=e(),R.memoizedState=[e,t],e}function Gu(e,t,r){if(25<=or)throw Error(x(301));if(e===fe)if(Zt=!0,e={action:r,next:null},ge===null&&(ge=new Map),r=ge.get(t),r===void 0)ge.set(t,e);else{for(t=r;t.next!==null;)t=t.next;t.next=e}}function Vu(){throw Error(x(394))}function qt(){}var ei={readContext:function(e){return e._currentValue2},useContext:function(e){return ke(),e._currentValue2},useMemo:Zs,useReducer:Xs,useRef:function(e){fe=ke(),R=Ln();var t=R.memoizedState;return t===null?(e={current:e},R.memoizedState=e):t},useState:function(e){return Xs(Bi,e)},useInsertionEffect:qt,useLayoutEffect:function(){},useCallback:function(e,t){return Zs(function(){return e},t)},useImperativeHandle:qt,useEffect:qt,useDebugValue:qt,useDeferredValue:function(e){return ke(),e},useTransition:function(){return ke(),[!1,Vu]},useId:function(){var e=Nn.treeContext,t=e.overflow;e=e.id,e=(e&~(1<<32-zt(e)-1)).toString(32)+t;var r=Wt;if(r===null)throw Error(x(404));return t=At++,e=":"+r.idPrefix+"R"+e,0<t&&(e+="H"+t.toString(32)),e+":"},useMutableSource:function(e,t){return ke(),t(e._source)},useSyncExternalStore:function(e,t,r){if(r===void 0)throw Error(x(407));return r()}},Wt=null,Sn=ai.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;function zu(e){return console.error(e),null}function ft(){}function Yu(e,t,r,n,o,s,i,a,l){var u=[],c=new Set;return t={destination:null,responseState:t,progressiveChunkSize:n===void 0?12800:n,status:0,fatalError:null,nextSegmentId:0,allPendingTasks:0,pendingRootTasks:0,completedRootSegment:null,abortableTasks:c,pingedTasks:u,clientRenderedBoundaries:[],completedBoundaries:[],partialBoundaries:[],onError:o===void 0?zu:o,onAllReady:s===void 0?ft:s,onShellReady:i===void 0?ft:i,onShellError:a===void 0?ft:a,onFatalError:l===void 0?ft:l},r=er(t,0,null,r,!1,!1),r.parentFlushed=!0,e=_n(t,e,null,r,c,Ei,null,Uu),u.push(e),t}function _n(e,t,r,n,o,s,i,a){e.allPendingTasks++,r===null?e.pendingRootTasks++:r.pendingTasks++;var l={node:t,ping:function(){var u=e.pingedTasks;u.push(l),u.length===1&&Qi(e)},blockedBoundary:r,blockedSegment:n,abortSet:o,legacyContext:s,context:i,treeContext:a};return o.add(l),l}function er(e,t,r,n,o,s){return{status:0,id:-1,index:t,parentFlushed:!1,chunks:[],children:[],formatContext:n,boundary:r,lastPushedText:o,textEmbedded:s}}function mt(e,t){if(e=e.onError(t),e!=null&&typeof e!="string")throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "'+typeof e+'" instead');return e}function tr(e,t){var r=e.onShellError;r(t),r=e.onFatalError,r(t),e.destination!==null?(e.status=2,e.destination.destroy(t)):(e.status=1,e.fatalError=t)}function ti(e,t,r,n,o){for(fe={},Nn=t,At=0,e=r(n,o);Zt;)Zt=!1,At=0,or+=1,R=null,e=r(n,o);return Pn(),e}function ri(e,t,r,n){var o=r.render(),s=n.childContextTypes;if(s!=null){var i=t.legacyContext;if(typeof r.getChildContext!="function")n=i;else{r=r.getChildContext();for(var a in r)if(!(a in s))throw Error(x(108,In(n)||"Unknown",a));n=ht({},i,r)}t.legacyContext=n,ee(e,t,o),t.legacyContext=i}else ee(e,t,o)}function ni(e,t){if(e&&e.defaultProps){t=ht({},t),e=e.defaultProps;for(var r in e)t[r]===void 0&&(t[r]=e[r]);return t}return t}function Qn(e,t,r,n,o){if(typeof r=="function")if(r.prototype&&r.prototype.isReactComponent){o=Vs(r,t.legacyContext);var s=r.contextType;s=new r(n,typeof s=="object"&&s!==null?s._currentValue2:o),Ys(s,r,n,o),ri(e,t,s,r)}else{s=Vs(r,t.legacyContext),o=ti(e,t,r,n,s);var i=At!==0;if(typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0)Ys(o,r,n,s),ri(e,t,o,r);else if(i){n=t.treeContext,t.treeContext=bn(n,1,0);try{ee(e,t,o)}finally{t.treeContext=n}}else ee(e,t,o)}else if(typeof r=="string"){switch(o=t.blockedSegment,s=Du(o.chunks,r,n,e.responseState,o.formatContext),o.lastPushedText=!1,i=o.formatContext,o.formatContext=Qu(i,r,n),kn(e,t,s),o.formatContext=i,r){case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"input":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":break;default:o.chunks.push("</",r,">")}o.lastPushedText=!1}else{switch(r){case ju:case Mu:case di:case fi:case pi:ee(e,t,n.children);return;case yi:ee(e,t,n.children);return;case Fu:throw Error(x(343));case gi:e:{r=t.blockedBoundary,o=t.blockedSegment,s=n.fallback,n=n.children,i=new Set;var a={id:null,rootSegmentID:-1,parentFlushed:!1,pendingTasks:0,forceClientRender:!1,completedSegments:[],byteSize:0,fallbackAbortableTasks:i,errorDigest:null},l=er(e,o.chunks.length,a,o.formatContext,!1,!1);o.children.push(l),o.lastPushedText=!1;var u=er(e,0,null,o.formatContext,!1,!1);u.parentFlushed=!0,t.blockedBoundary=a,t.blockedSegment=u;try{if(kn(e,t,n),e.responseState.generateStaticMarkup||u.lastPushedText&&u.textEmbedded&&u.chunks.push("<!-- -->"),u.status=1,rr(a,u),a.pendingTasks===0)break e}catch(c){u.status=4,a.forceClientRender=!0,a.errorDigest=mt(e,c)}finally{t.blockedBoundary=r,t.blockedSegment=o}t=_n(e,s,r,l,i,t.legacyContext,t.context,t.treeContext),e.pingedTasks.push(t)}return}if(typeof r=="object"&&r!==null)switch(r.$$typeof){case mi:if(n=ti(e,t,r.render,n,o),At!==0){r=t.treeContext,t.treeContext=bn(r,1,0);try{ee(e,t,n)}finally{t.treeContext=r}}else ee(e,t,n);return;case wi:r=r.type,n=ni(r,n),Qn(e,t,r,n,o);return;case hi:if(o=n.children,r=r._context,n=n.value,s=r._currentValue2,r._currentValue2=n,i=Re,Re=n={parent:i,depth:i===null?0:i.depth+1,context:r,parentValue:s,value:n},t.context=n,ee(e,t,o),e=Re,e===null)throw Error(x(403));n=e.parentValue,e.context._currentValue2=n===$u?e.context._defaultValue:n,e=Re=e.parent,t.context=e;return;case Ai:n=n.children,n=n(r._currentValue2),ee(e,t,n);return;case Tn:o=r._init,r=o(r._payload),n=ni(r,n),Qn(e,t,r,n,void 0);return}throw Error(x(130,r==null?r:typeof r,""))}}function ee(e,t,r){if(t.node=r,typeof r=="object"&&r!==null){switch(r.$$typeof){case _u:Qn(e,t,r.type,r.props,r.ref);return;case ui:throw Error(x(257));case Tn:var n=r._init;r=n(r._payload),ee(e,t,r);return}if(Bn(r)){oi(e,t,r);return}if(r===null||typeof r!="object"?n=null:(n=Gs&&r[Gs]||r["@@iterator"],n=typeof n=="function"?n:null),n&&(n=n.call(r))){if(r=n.next(),!r.done){var o=[];do o.push(r.value),r=n.next();while(!r.done);oi(e,t,o)}return}throw e=Object.prototype.toString.call(r),Error(x(31,e==="[object Object]"?"object with keys {"+Object.keys(r).join(", ")+"}":e))}typeof r=="string"?(n=t.blockedSegment,n.lastPushedText=Js(t.blockedSegment.chunks,r,e.responseState,n.lastPushedText)):typeof r=="number"&&(n=t.blockedSegment,n.lastPushedText=Js(t.blockedSegment.chunks,""+r,e.responseState,n.lastPushedText))}function oi(e,t,r){for(var n=r.length,o=0;o<n;o++){var s=t.treeContext;t.treeContext=bn(s,n,o);try{kn(e,t,r[o])}finally{t.treeContext=s}}}function kn(e,t,r){var n=t.blockedSegment.formatContext,o=t.legacyContext,s=t.context;try{return ee(e,t,r)}catch(l){if(Pn(),typeof l=="object"&&l!==null&&typeof l.then=="function"){r=l;var i=t.blockedSegment,a=er(e,i.chunks.length,null,i.formatContext,i.lastPushedText,!0);i.children.push(a),i.lastPushedText=!1,e=_n(e,t.node,t.blockedBoundary,a,t.abortSet,t.legacyContext,t.context,t.treeContext).ping,r.then(e,e),t.blockedSegment.formatContext=n,t.legacyContext=o,t.context=s,Xt(s)}else throw t.blockedSegment.formatContext=n,t.legacyContext=o,t.context=s,Xt(s),l}}function Wu(e){var t=e.blockedBoundary;e=e.blockedSegment,e.status=3,bi(this,t,e)}function Ii(e,t,r){var n=e.blockedBoundary;e.blockedSegment.status=3,n===null?(t.allPendingTasks--,t.status!==2&&(t.status=2,t.destination!==null&&t.destination.push(null))):(n.pendingTasks--,n.forceClientRender||(n.forceClientRender=!0,e=r===void 0?Error(x(432)):r,n.errorDigest=t.onError(e),n.parentFlushed&&t.clientRenderedBoundaries.push(n)),n.fallbackAbortableTasks.forEach(function(o){return Ii(o,t,r)}),n.fallbackAbortableTasks.clear(),t.allPendingTasks--,t.allPendingTasks===0&&(n=t.onAllReady,n()))}function rr(e,t){if(t.chunks.length===0&&t.children.length===1&&t.children[0].boundary===null){var r=t.children[0];r.id=t.id,r.parentFlushed=!0,r.status===1&&rr(e,r)}else e.completedSegments.push(t)}function bi(e,t,r){if(t===null){if(r.parentFlushed){if(e.completedRootSegment!==null)throw Error(x(389));e.completedRootSegment=r}e.pendingRootTasks--,e.pendingRootTasks===0&&(e.onShellError=ft,t=e.onShellReady,t())}else t.pendingTasks--,t.forceClientRender||(t.pendingTasks===0?(r.parentFlushed&&r.status===1&&rr(t,r),t.parentFlushed&&e.completedBoundaries.push(t),t.fallbackAbortableTasks.forEach(Wu,e),t.fallbackAbortableTasks.clear()):r.parentFlushed&&r.status===1&&(rr(t,r),t.completedSegments.length===1&&t.parentFlushed&&e.partialBoundaries.push(t)));e.allPendingTasks--,e.allPendingTasks===0&&(e=e.onAllReady,e())}function Qi(e){if(e.status!==2){var t=Re,r=Sn.current;Sn.current=ei;var n=Wt;Wt=e.responseState;try{var o=e.pingedTasks,s;for(s=0;s<o.length;s++){var i=o[s],a=e,l=i.blockedSegment;if(l.status===0){Xt(i.context);try{ee(a,i,i.node),a.responseState.generateStaticMarkup||l.lastPushedText&&l.textEmbedded&&l.chunks.push("<!-- -->"),i.abortSet.delete(i),l.status=1,bi(a,i.blockedBoundary,l)}catch(h){if(Pn(),typeof h=="object"&&h!==null&&typeof h.then=="function"){var u=i.ping;h.then(u,u)}else{i.abortSet.delete(i),l.status=4;var c=i.blockedBoundary,p=h,d=mt(a,p);if(c===null?tr(a,p):(c.pendingTasks--,c.forceClientRender||(c.forceClientRender=!0,c.errorDigest=d,c.parentFlushed&&a.clientRenderedBoundaries.push(c))),a.allPendingTasks--,a.allPendingTasks===0){var f=a.onAllReady;f()}}}finally{}}}o.splice(0,s),e.destination!==null&&Fn(e,e.destination)}catch(h){mt(e,h),tr(e,h)}finally{Wt=n,Sn.current=r,r===ei&&Xt(t)}}}function Jt(e,t,r){switch(r.parentFlushed=!0,r.status){case 0:var n=r.id=e.nextSegmentId++;return r.lastPushedText=!1,r.textEmbedded=!1,e=e.responseState,t.push('<template id="'),t.push(e.placeholderPrefix),e=n.toString(16),t.push(e),t.push('"></template>');case 1:r.status=2;var o=!0;n=r.chunks;var s=0;r=r.children;for(var i=0;i<r.length;i++){for(o=r[i];s<o.index;s++)t.push(n[s]);o=sr(e,t,o)}for(;s<n.length-1;s++)t.push(n[s]);return s<n.length&&(o=t.push(n[s])),o;default:throw Error(x(390))}}function sr(e,t,r){var n=r.boundary;if(n===null)return Jt(e,t,r);if(n.parentFlushed=!0,n.forceClientRender)return e.responseState.generateStaticMarkup||(n=n.errorDigest,t.push("<!--$!-->"),t.push("<template"),n&&(t.push(' data-dgst="'),n=q(n),t.push(n),t.push('"')),t.push("></template>")),Jt(e,t,r),e=e.responseState.generateStaticMarkup?!0:t.push("<!--/$-->"),e;if(0<n.pendingTasks){n.rootSegmentID=e.nextSegmentId++,0<n.completedSegments.length&&e.partialBoundaries.push(n);var o=e.responseState,s=o.nextSuspenseID++;return o=o.boundaryPrefix+s.toString(16),n=n.id=o,qs(t,e.responseState,n),Jt(e,t,r),t.push("<!--/$-->")}if(n.byteSize>e.progressiveChunkSize)return n.rootSegmentID=e.nextSegmentId++,e.completedBoundaries.push(n),qs(t,e.responseState,n.id),Jt(e,t,r),t.push("<!--/$-->");if(e.responseState.generateStaticMarkup||t.push("<!--$-->"),r=n.completedSegments,r.length!==1)throw Error(x(391));return sr(e,t,r[0]),e=e.responseState.generateStaticMarkup?!0:t.push("<!--/$-->"),e}function si(e,t,r){return Tu(t,e.responseState,r.formatContext,r.id),sr(e,t,r),Nu(t,r.formatContext)}function ii(e,t,r){for(var n=r.completedSegments,o=0;o<n.length;o++)ki(e,t,r,n[o]);if(n.length=0,e=e.responseState,n=r.id,r=r.rootSegmentID,t.push(e.startInlineScript),e.sentCompleteBoundaryFunction?t.push('$RC("'):(e.sentCompleteBoundaryFunction=!0,t.push('function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("')),n===null)throw Error(x(395));return r=r.toString(16),t.push(n),t.push('","'),t.push(e.segmentPrefix),t.push(r),t.push('")<\/script>')}function ki(e,t,r,n){if(n.status===2)return!0;var o=n.id;if(o===-1){if((n.id=r.rootSegmentID)===-1)throw Error(x(392));return si(e,t,n)}return si(e,t,n),e=e.responseState,t.push(e.startInlineScript),e.sentCompleteSegmentFunction?t.push('$RS("'):(e.sentCompleteSegmentFunction=!0,t.push('function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("')),t.push(e.segmentPrefix),o=o.toString(16),t.push(o),t.push('","'),t.push(e.placeholderPrefix),t.push(o),t.push('")<\/script>')}function Fn(e,t){try{var r=e.completedRootSegment;if(r!==null&&e.pendingRootTasks===0){sr(e,t,r),e.completedRootSegment=null;var n=e.responseState.bootstrapChunks;for(r=0;r<n.length-1;r++)t.push(n[r]);r<n.length&&t.push(n[r])}var o=e.clientRenderedBoundaries,s;for(s=0;s<o.length;s++){var i=o[s];n=t;var a=e.responseState,l=i.id,u=i.errorDigest,c=i.errorMessage,p=i.errorComponentStack;if(n.push(a.startInlineScript),a.sentClientRenderFunction?n.push('$RX("'):(a.sentClientRenderFunction=!0,n.push('function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};$RX("')),l===null)throw Error(x(395));if(n.push(l),n.push('"'),u||c||p){n.push(",");var d=xn(u||"");n.push(d)}if(c||p){n.push(",");var f=xn(c||"");n.push(f)}if(p){n.push(",");var h=xn(p);n.push(h)}if(!n.push(")<\/script>")){e.destination=null,s++,o.splice(0,s);return}}o.splice(0,s);var A=e.completedBoundaries;for(s=0;s<A.length;s++)if(!ii(e,t,A[s])){e.destination=null,s++,A.splice(0,s);return}A.splice(0,s);var E=e.partialBoundaries;for(s=0;s<E.length;s++){var C=E[s];e:{o=e,i=t;var w=C.completedSegments;for(a=0;a<w.length;a++)if(!ki(o,i,C,w[a])){a++,w.splice(0,a);var k=!1;break e}w.splice(0,a),k=!0}if(!k){e.destination=null,s++,E.splice(0,s);return}}E.splice(0,s);var P=e.completedBoundaries;for(s=0;s<P.length;s++)if(!ii(e,t,P[s])){e.destination=null,s++,P.splice(0,s);return}P.splice(0,s)}finally{e.allPendingTasks===0&&e.pingedTasks.length===0&&e.clientRenderedBoundaries.length===0&&e.completedBoundaries.length===0&&t.push(null)}}function Xu(e,t){try{var r=e.abortableTasks;r.forEach(function(n){return Ii(n,e,t)}),r.clear(),e.destination!==null&&Fn(e,e.destination)}catch(n){mt(e,n),tr(e,n)}}function Zu(){}function Ri(e,t,r,n){var o=!1,s=null,i="",a={push:function(u){return u!==null&&(i+=u),!0},destroy:function(u){o=!0,s=u}},l=!1;if(e=Yu(e,Pu(r,t?t.identifierPrefix:void 0),{insertionMode:1,selectedValue:null},1/0,Zu,void 0,function(){l=!0},void 0,void 0),Qi(e),Xu(e,n),e.status===1)e.status=2,a.destroy(e.fatalError);else if(e.status!==2&&e.destination===null){e.destination=a;try{Fn(e,a)}catch(u){mt(e,u),tr(e,u)}}if(o)throw s;if(!l)throw Error(x(426));return i}Ge.renderToNodeStream=function(){throw Error(x(207))};Ge.renderToStaticMarkup=function(e,t){return Ri(e,t,!0,'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server')};Ge.renderToStaticNodeStream=function(){throw Error(x(208))};Ge.renderToString=function(e,t){return Ri(e,t,!1,'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server')};Ge.version="18.3.1"});var ka=pe(oo=>{"use strict";var oa=Je();function S(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var re=null,ne=0;function y(e,t){if(t.length!==0)if(512<t.length)0<ne&&(e.enqueue(new Uint8Array(re.buffer,0,ne)),re=new Uint8Array(512),ne=0),e.enqueue(t);else{var r=re.length-ne;r<t.length&&(r===0?e.enqueue(re):(re.set(t.subarray(0,r),ne),e.enqueue(re),t=t.subarray(r)),re=new Uint8Array(512),ne=0),re.set(t,ne),ne+=t.length}}function N(e,t){return y(e,t),!0}function Ti(e){re&&0<ne&&(e.enqueue(new Uint8Array(re.buffer,0,ne)),re=null,ne=0)}var sa=new TextEncoder;function B(e){return sa.encode(e)}function m(e){return sa.encode(e)}function ia(e,t){typeof e.error=="function"?e.error(t):e.close()}var W=Object.prototype.hasOwnProperty,ep=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Ni={},Li={};function aa(e){return W.call(Li,e)?!0:W.call(Ni,e)?!1:ep.test(e)?Li[e]=!0:(Ni[e]=!0,!1)}function G(e,t,r,n,o,s,i){this.acceptsBooleans=t===2||t===3||t===4,this.attributeName=n,this.attributeNamespace=o,this.mustUseProperty=r,this.propertyName=e,this.type=t,this.sanitizeURL=s,this.removeEmptyString=i}var O={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){O[e]=new G(e,0,!1,e,null,!1,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];O[t]=new G(t,1,!1,e[1],null,!1,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(e){O[e]=new G(e,2,!1,e.toLowerCase(),null,!1,!1)});["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){O[e]=new G(e,2,!1,e,null,!1,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){O[e]=new G(e,3,!1,e.toLowerCase(),null,!1,!1)});["checked","multiple","muted","selected"].forEach(function(e){O[e]=new G(e,3,!0,e,null,!1,!1)});["capture","download"].forEach(function(e){O[e]=new G(e,4,!1,e,null,!1,!1)});["cols","rows","size","span"].forEach(function(e){O[e]=new G(e,6,!1,e,null,!1,!1)});["rowSpan","start"].forEach(function(e){O[e]=new G(e,5,!1,e.toLowerCase(),null,!1,!1)});var zn=/[\-:]([a-z])/g;function Yn(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(zn,Yn);O[t]=new G(t,1,!1,e,null,!1,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(zn,Yn);O[t]=new G(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)});["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(zn,Yn);O[t]=new G(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)});["tabIndex","crossOrigin"].forEach(function(e){O[e]=new G(e,1,!1,e.toLowerCase(),null,!1,!1)});O.xlinkHref=new G("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1);["src","href","action","formAction"].forEach(function(e){O[e]=new G(e,1,!1,e.toLowerCase(),null,!0,!0)});var lr={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},tp=["Webkit","ms","Moz","O"];Object.keys(lr).forEach(function(e){tp.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),lr[t]=lr[e]})});var rp=/["'&<>]/;function U(e){if(typeof e=="boolean"||typeof e=="number")return""+e;e=""+e;var t=rp.exec(e);if(t){var r="",n,o=0;for(n=t.index;n<e.length;n++){switch(e.charCodeAt(n)){case 34:t="&quot;";break;case 38:t="&amp;";break;case 39:t="&#x27;";break;case 60:t="&lt;";break;case 62:t="&gt;";break;default:continue}o!==n&&(r+=e.substring(o,n)),o=n+1,r+=t}e=o!==n?r+e.substring(o,n):r}return e}var np=/([A-Z])/g,op=/^ms-/,Kn=Array.isArray,sp=m("<script>"),ip=m("<\/script>"),ap=m('<script src="'),lp=m('<script type="module" src="'),Pi=m('" async=""><\/script>'),cp=/(<\/|<)(s)(cript)/gi;function up(e,t,r,n){return""+t+(r==="s"?"\\u0073":"\\u0053")+n}function pp(e,t,r,n,o){e=e===void 0?"":e,t=t===void 0?sp:m('<script nonce="'+U(t)+'">');var s=[];if(r!==void 0&&s.push(t,B((""+r).replace(cp,up)),ip),n!==void 0)for(r=0;r<n.length;r++)s.push(ap,B(U(n[r])),Pi);if(o!==void 0)for(n=0;n<o.length;n++)s.push(lp,B(U(o[n])),Pi);return{bootstrapChunks:s,startInlineScript:t,placeholderPrefix:m(e+"P:"),segmentPrefix:m(e+"S:"),boundaryPrefix:e+"B:",idPrefix:e,nextSuspenseID:0,sentCompleteSegmentFunction:!1,sentCompleteBoundaryFunction:!1,sentClientRenderFunction:!1}}function ce(e,t){return{insertionMode:e,selectedValue:t}}function dp(e){return ce(e==="http://www.w3.org/2000/svg"?2:e==="http://www.w3.org/1998/Math/MathML"?3:0,null)}function fp(e,t,r){switch(t){case"select":return ce(1,r.value!=null?r.value:r.defaultValue);case"svg":return ce(2,null);case"math":return ce(3,null);case"foreignObject":return ce(1,null);case"table":return ce(4,null);case"thead":case"tbody":case"tfoot":return ce(5,null);case"colgroup":return ce(7,null);case"tr":return ce(6,null)}return 4<=e.insertionMode||e.insertionMode===0?ce(1,null):e}var Wn=m("<!-- -->");function _i(e,t,r,n){return t===""?n:(n&&e.push(Wn),e.push(B(U(t))),!0)}var Fi=new Map,hp=m(' style="'),Mi=m(":"),Ap=m(";");function la(e,t,r){if(typeof r!="object")throw Error(S(62));t=!0;for(var n in r)if(W.call(r,n)){var o=r[n];if(o!=null&&typeof o!="boolean"&&o!==""){if(n.indexOf("--")===0){var s=B(U(n));o=B(U((""+o).trim()))}else{s=n;var i=Fi.get(s);i!==void 0||(i=m(U(s.replace(np,"-$1").toLowerCase().replace(op,"-ms-"))),Fi.set(s,i)),s=i,o=typeof o=="number"?o===0||W.call(lr,n)?B(""+o):B(o+"px"):B(U((""+o).trim()))}t?(t=!1,e.push(hp,s,Mi,o)):e.push(Ap,s,Mi,o)}}t||e.push(De)}var ye=m(" "),Ve=m('="'),De=m('"'),ji=m('=""');function te(e,t,r,n){switch(r){case"style":la(e,t,n);return;case"defaultValue":case"defaultChecked":case"innerHTML":case"suppressContentEditableWarning":case"suppressHydrationWarning":return}if(!(2<r.length)||r[0]!=="o"&&r[0]!=="O"||r[1]!=="n"&&r[1]!=="N"){if(t=O.hasOwnProperty(r)?O[r]:null,t!==null){switch(typeof n){case"function":case"symbol":return;case"boolean":if(!t.acceptsBooleans)return}switch(r=B(t.attributeName),t.type){case 3:n&&e.push(ye,r,ji);break;case 4:n===!0?e.push(ye,r,ji):n!==!1&&e.push(ye,r,Ve,B(U(n)),De);break;case 5:isNaN(n)||e.push(ye,r,Ve,B(U(n)),De);break;case 6:!isNaN(n)&&1<=n&&e.push(ye,r,Ve,B(U(n)),De);break;default:t.sanitizeURL&&(n=""+n),e.push(ye,r,Ve,B(U(n)),De)}}else if(aa(r)){switch(typeof n){case"function":case"symbol":return;case"boolean":if(t=r.toLowerCase().slice(0,5),t!=="data-"&&t!=="aria-")return}e.push(ye,B(r),Ve,B(U(n)),De)}}}var we=m(">"),$i=m("/>");function cr(e,t,r){if(t!=null){if(r!=null)throw Error(S(60));if(typeof t!="object"||!("__html"in t))throw Error(S(61));t=t.__html,t!=null&&e.push(B(""+t))}}function mp(e){var t="";return oa.Children.forEach(e,function(r){r!=null&&(t+=r)}),t}var Mn=m(' selected=""');function jn(e,t,r,n){e.push(ue(r));var o=r=null,s;for(s in t)if(W.call(t,s)){var i=t[s];if(i!=null)switch(s){case"children":r=i;break;case"dangerouslySetInnerHTML":o=i;break;default:te(e,n,s,i)}}return e.push(we),cr(e,o,r),typeof r=="string"?(e.push(B(U(r))),null):r}var $n=m(`
`),gp=/^[a-zA-Z][a-zA-Z:_\.\-\d]*$/,Ui=new Map;function ue(e){var t=Ui.get(e);if(t===void 0){if(!gp.test(e))throw Error(S(65,e));t=m("<"+e),Ui.set(e,t)}return t}var yp=m("<!DOCTYPE html>");function wp(e,t,r,n,o){switch(t){case"select":e.push(ue("select"));var s=null,i=null;for(c in r)if(W.call(r,c)){var a=r[c];if(a!=null)switch(c){case"children":s=a;break;case"dangerouslySetInnerHTML":i=a;break;case"defaultValue":case"value":break;default:te(e,n,c,a)}}return e.push(we),cr(e,i,s),s;case"option":i=o.selectedValue,e.push(ue("option"));var l=a=null,u=null,c=null;for(s in r)if(W.call(r,s)){var p=r[s];if(p!=null)switch(s){case"children":a=p;break;case"selected":u=p;break;case"dangerouslySetInnerHTML":c=p;break;case"value":l=p;default:te(e,n,s,p)}}if(i!=null)if(r=l!==null?""+l:mp(a),Kn(i)){for(n=0;n<i.length;n++)if(""+i[n]===r){e.push(Mn);break}}else""+i===r&&e.push(Mn);else u&&e.push(Mn);return e.push(we),cr(e,c,a),a;case"textarea":e.push(ue("textarea")),c=i=s=null;for(a in r)if(W.call(r,a)&&(l=r[a],l!=null))switch(a){case"children":c=l;break;case"value":s=l;break;case"defaultValue":i=l;break;case"dangerouslySetInnerHTML":throw Error(S(91));default:te(e,n,a,l)}if(s===null&&i!==null&&(s=i),e.push(we),c!=null){if(s!=null)throw Error(S(92));if(Kn(c)&&1<c.length)throw Error(S(93));s=""+c}return typeof s=="string"&&s[0]===`
`&&e.push($n),s!==null&&e.push(B(U(""+s))),null;case"input":e.push(ue("input")),l=c=a=s=null;for(i in r)if(W.call(r,i)&&(u=r[i],u!=null))switch(i){case"children":case"dangerouslySetInnerHTML":throw Error(S(399,"input"));case"defaultChecked":l=u;break;case"defaultValue":a=u;break;case"checked":c=u;break;case"value":s=u;break;default:te(e,n,i,u)}return c!==null?te(e,n,"checked",c):l!==null&&te(e,n,"checked",l),s!==null?te(e,n,"value",s):a!==null&&te(e,n,"value",a),e.push($i),null;case"menuitem":e.push(ue("menuitem"));for(var d in r)if(W.call(r,d)&&(s=r[d],s!=null))switch(d){case"children":case"dangerouslySetInnerHTML":throw Error(S(400));default:te(e,n,d,s)}return e.push(we),null;case"title":e.push(ue("title")),s=null;for(p in r)if(W.call(r,p)&&(i=r[p],i!=null))switch(p){case"children":s=i;break;case"dangerouslySetInnerHTML":throw Error(S(434));default:te(e,n,p,i)}return e.push(we),s;case"listing":case"pre":e.push(ue(t)),i=s=null;for(l in r)if(W.call(r,l)&&(a=r[l],a!=null))switch(l){case"children":s=a;break;case"dangerouslySetInnerHTML":i=a;break;default:te(e,n,l,a)}if(e.push(we),i!=null){if(s!=null)throw Error(S(60));if(typeof i!="object"||!("__html"in i))throw Error(S(61));r=i.__html,r!=null&&(typeof r=="string"&&0<r.length&&r[0]===`
`?e.push($n,B(r)):e.push(B(""+r)))}return typeof s=="string"&&s[0]===`
`&&e.push($n),s;case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":e.push(ue(t));for(var f in r)if(W.call(r,f)&&(s=r[f],s!=null))switch(f){case"children":case"dangerouslySetInnerHTML":throw Error(S(399,t));default:te(e,n,f,s)}return e.push($i),null;case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return jn(e,r,t,n);case"html":return o.insertionMode===0&&e.push(yp),jn(e,r,t,n);default:if(t.indexOf("-")===-1&&typeof r.is!="string")return jn(e,r,t,n);e.push(ue(t)),i=s=null;for(u in r)if(W.call(r,u)&&(a=r[u],a!=null))switch(u){case"children":s=a;break;case"dangerouslySetInnerHTML":i=a;break;case"style":la(e,n,a);break;case"suppressContentEditableWarning":case"suppressHydrationWarning":break;default:aa(u)&&typeof a!="function"&&typeof a!="symbol"&&e.push(ye,B(u),Ve,B(U(a)),De)}return e.push(we),cr(e,i,s),s}}var Ep=m("</"),Cp=m(">"),vp=m('<template id="'),xp=m('"></template>'),Sp=m("<!--$-->"),Bp=m('<!--$?--><template id="'),Ip=m('"></template>'),bp=m("<!--$!-->"),Qp=m("<!--/$-->"),kp=m("<template"),Rp=m('"'),Dp=m(' data-dgst="');m(' data-msg="');m(' data-stck="');var Tp=m("></template>");function Oi(e,t,r){if(y(e,Bp),r===null)throw Error(S(395));return y(e,r),N(e,Ip)}var Np=m('<div hidden id="'),Lp=m('">'),Pp=m("</div>"),_p=m('<svg aria-hidden="true" style="display:none" id="'),Fp=m('">'),Mp=m("</svg>"),jp=m('<math aria-hidden="true" style="display:none" id="'),$p=m('">'),Up=m("</math>"),Op=m('<table hidden id="'),Hp=m('">'),Kp=m("</table>"),qp=m('<table hidden><tbody id="'),Jp=m('">'),Gp=m("</tbody></table>"),Vp=m('<table hidden><tr id="'),zp=m('">'),Yp=m("</tr></table>"),Wp=m('<table hidden><colgroup id="'),Xp=m('">'),Zp=m("</colgroup></table>");function ed(e,t,r,n){switch(r.insertionMode){case 0:case 1:return y(e,Np),y(e,t.segmentPrefix),y(e,B(n.toString(16))),N(e,Lp);case 2:return y(e,_p),y(e,t.segmentPrefix),y(e,B(n.toString(16))),N(e,Fp);case 3:return y(e,jp),y(e,t.segmentPrefix),y(e,B(n.toString(16))),N(e,$p);case 4:return y(e,Op),y(e,t.segmentPrefix),y(e,B(n.toString(16))),N(e,Hp);case 5:return y(e,qp),y(e,t.segmentPrefix),y(e,B(n.toString(16))),N(e,Jp);case 6:return y(e,Vp),y(e,t.segmentPrefix),y(e,B(n.toString(16))),N(e,zp);case 7:return y(e,Wp),y(e,t.segmentPrefix),y(e,B(n.toString(16))),N(e,Xp);default:throw Error(S(397))}}function td(e,t){switch(t.insertionMode){case 0:case 1:return N(e,Pp);case 2:return N(e,Mp);case 3:return N(e,Up);case 4:return N(e,Kp);case 5:return N(e,Gp);case 6:return N(e,Yp);case 7:return N(e,Zp);default:throw Error(S(397))}}var rd=m('function $RS(a,b){a=document.getElementById(a);b=document.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("'),nd=m('$RS("'),od=m('","'),sd=m('")<\/script>'),id=m('function $RC(a,b){a=document.getElementById(a);b=document.getElementById(b);b.parentNode.removeChild(b);if(a){a=a.previousSibling;var f=a.parentNode,c=a.nextSibling,e=0;do{if(c&&8===c.nodeType){var d=c.data;if("/$"===d)if(0===e)break;else e--;else"$"!==d&&"$?"!==d&&"$!"!==d||e++}d=c.nextSibling;f.removeChild(c);c=d}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data="$";a._reactRetry&&a._reactRetry()}};$RC("'),ad=m('$RC("'),ld=m('","'),cd=m('")<\/script>'),ud=m('function $RX(b,c,d,e){var a=document.getElementById(b);a&&(b=a.previousSibling,b.data="$!",a=a.dataset,c&&(a.dgst=c),d&&(a.msg=d),e&&(a.stck=e),b._reactRetry&&b._reactRetry())};$RX("'),pd=m('$RX("'),dd=m('"'),fd=m(")<\/script>"),Un=m(","),hd=/[<\u2028\u2029]/g;function On(e){return JSON.stringify(e).replace(hd,function(t){switch(t){case"<":return"\\u003c";case"\u2028":return"\\u2028";case"\u2029":return"\\u2029";default:throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React")}})}var wt=Object.assign,Ad=Symbol.for("react.element"),ca=Symbol.for("react.portal"),ua=Symbol.for("react.fragment"),pa=Symbol.for("react.strict_mode"),da=Symbol.for("react.profiler"),fa=Symbol.for("react.provider"),ha=Symbol.for("react.context"),Aa=Symbol.for("react.forward_ref"),ma=Symbol.for("react.suspense"),ga=Symbol.for("react.suspense_list"),ya=Symbol.for("react.memo"),Xn=Symbol.for("react.lazy"),md=Symbol.for("react.scope"),gd=Symbol.for("react.debug_trace_mode"),yd=Symbol.for("react.legacy_hidden"),wd=Symbol.for("react.default_value"),Hi=Symbol.iterator;function qn(e){if(e==null)return null;if(typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case ua:return"Fragment";case ca:return"Portal";case da:return"Profiler";case pa:return"StrictMode";case ma:return"Suspense";case ga:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case ha:return(e.displayName||"Context")+".Consumer";case fa:return(e._context.displayName||"Context")+".Provider";case Aa:var t=e.render;return e=e.displayName,e||(e=t.displayName||t.name||"",e=e!==""?"ForwardRef("+e+")":"ForwardRef"),e;case ya:return t=e.displayName||null,t!==null?t:qn(e.type)||"Memo";case Xn:t=e._payload,e=e._init;try{return qn(e(t))}catch{}}return null}var wa={};function Ki(e,t){if(e=e.contextTypes,!e)return wa;var r={},n;for(n in e)r[n]=t[n];return r}var Ne=null;function yr(e,t){if(e!==t){e.context._currentValue=e.parentValue,e=e.parent;var r=t.parent;if(e===null){if(r!==null)throw Error(S(401))}else{if(r===null)throw Error(S(401));yr(e,r)}t.context._currentValue=t.value}}function Ea(e){e.context._currentValue=e.parentValue,e=e.parent,e!==null&&Ea(e)}function Ca(e){var t=e.parent;t!==null&&Ca(t),e.context._currentValue=e.value}function va(e,t){if(e.context._currentValue=e.parentValue,e=e.parent,e===null)throw Error(S(402));e.depth===t.depth?yr(e,t):va(e,t)}function xa(e,t){var r=t.parent;if(r===null)throw Error(S(402));e.depth===r.depth?yr(e,r):xa(e,r),t.context._currentValue=t.value}function fr(e){var t=Ne;t!==e&&(t===null?Ca(e):e===null?Ea(t):t.depth===e.depth?yr(t,e):t.depth>e.depth?va(t,e):xa(t,e),Ne=e)}var qi={isMounted:function(){return!1},enqueueSetState:function(e,t){e=e._reactInternals,e.queue!==null&&e.queue.push(t)},enqueueReplaceState:function(e,t){e=e._reactInternals,e.replace=!0,e.queue=[t]},enqueueForceUpdate:function(){}};function Ji(e,t,r,n){var o=e.state!==void 0?e.state:null;e.updater=qi,e.props=r,e.state=o;var s={queue:[],replace:!1};e._reactInternals=s;var i=t.contextType;if(e.context=typeof i=="object"&&i!==null?i._currentValue:n,i=t.getDerivedStateFromProps,typeof i=="function"&&(i=i(r,o),o=i==null?o:wt({},o,i),e.state=o),typeof t.getDerivedStateFromProps!="function"&&typeof e.getSnapshotBeforeUpdate!="function"&&(typeof e.UNSAFE_componentWillMount=="function"||typeof e.componentWillMount=="function"))if(t=e.state,typeof e.componentWillMount=="function"&&e.componentWillMount(),typeof e.UNSAFE_componentWillMount=="function"&&e.UNSAFE_componentWillMount(),t!==e.state&&qi.enqueueReplaceState(e,e.state,null),s.queue!==null&&0<s.queue.length)if(t=s.queue,i=s.replace,s.queue=null,s.replace=!1,i&&t.length===1)e.state=t[0];else{for(s=i?t[0]:e.state,o=!0,i=i?1:0;i<t.length;i++){var a=t[i];a=typeof a=="function"?a.call(e,s,r,n):a,a!=null&&(o?(o=!1,s=wt({},s,a)):wt(s,a))}e.state=s}else s.queue=null}var Ed={id:1,overflow:""};function Jn(e,t,r){var n=e.id;e=e.overflow;var o=32-ur(n)-1;n&=~(1<<o),r+=1;var s=32-ur(t)+o;if(30<s){var i=o-o%5;return s=(n&(1<<i)-1).toString(32),n>>=i,o-=i,{id:1<<32-ur(t)+o|r<<o|n,overflow:s+e}}return{id:1<<s|r<<o|n,overflow:e}}var ur=Math.clz32?Math.clz32:xd,Cd=Math.log,vd=Math.LN2;function xd(e){return e>>>=0,e===0?32:31-(Cd(e)/vd|0)|0}function Sd(e,t){return e===t&&(e!==0||1/e===1/t)||e!==e&&t!==t}var Bd=typeof Object.is=="function"?Object.is:Sd,he=null,Zn=null,pr=null,D=null,gt=!1,hr=!1,Et=0,Ee=null,wr=0;function Te(){if(he===null)throw Error(S(321));return he}function Gi(){if(0<wr)throw Error(S(312));return{memoizedState:null,queue:null,next:null}}function eo(){return D===null?pr===null?(gt=!1,pr=D=Gi()):(gt=!0,D=pr):D.next===null?(gt=!1,D=D.next=Gi()):(gt=!0,D=D.next),D}function to(){Zn=he=null,hr=!1,pr=null,wr=0,D=Ee=null}function Sa(e,t){return typeof t=="function"?t(e):t}function Vi(e,t,r){if(he=Te(),D=eo(),gt){var n=D.queue;if(t=n.dispatch,Ee!==null&&(r=Ee.get(n),r!==void 0)){Ee.delete(n),n=D.memoizedState;do n=e(n,r.action),r=r.next;while(r!==null);return D.memoizedState=n,[n,t]}return[D.memoizedState,t]}return e=e===Sa?typeof t=="function"?t():t:r!==void 0?r(t):t,D.memoizedState=e,e=D.queue={last:null,dispatch:null},e=e.dispatch=Id.bind(null,he,e),[D.memoizedState,e]}function zi(e,t){if(he=Te(),D=eo(),t=t===void 0?null:t,D!==null){var r=D.memoizedState;if(r!==null&&t!==null){var n=r[1];e:if(n===null)n=!1;else{for(var o=0;o<n.length&&o<t.length;o++)if(!Bd(t[o],n[o])){n=!1;break e}n=!0}if(n)return r[0]}}return e=e(),D.memoizedState=[e,t],e}function Id(e,t,r){if(25<=wr)throw Error(S(301));if(e===he)if(hr=!0,e={action:r,next:null},Ee===null&&(Ee=new Map),r=Ee.get(t),r===void 0)Ee.set(t,e);else{for(t=r;t.next!==null;)t=t.next;t.next=e}}function bd(){throw Error(S(394))}function ir(){}var Yi={readContext:function(e){return e._currentValue},useContext:function(e){return Te(),e._currentValue},useMemo:zi,useReducer:Vi,useRef:function(e){he=Te(),D=eo();var t=D.memoizedState;return t===null?(e={current:e},D.memoizedState=e):t},useState:function(e){return Vi(Sa,e)},useInsertionEffect:ir,useLayoutEffect:function(){},useCallback:function(e,t){return zi(function(){return e},t)},useImperativeHandle:ir,useEffect:ir,useDebugValue:ir,useDeferredValue:function(e){return Te(),e},useTransition:function(){return Te(),[!1,bd]},useId:function(){var e=Zn.treeContext,t=e.overflow;e=e.id,e=(e&~(1<<32-ur(e)-1)).toString(32)+t;var r=dr;if(r===null)throw Error(S(404));return t=Et++,e=":"+r.idPrefix+"R"+e,0<t&&(e+="H"+t.toString(32)),e+":"},useMutableSource:function(e,t){return Te(),t(e._source)},useSyncExternalStore:function(e,t,r){if(r===void 0)throw Error(S(407));return r()}},dr=null,Hn=oa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentDispatcher;function Qd(e){return console.error(e),null}function yt(){}function kd(e,t,r,n,o,s,i,a,l){var u=[],c=new Set;return t={destination:null,responseState:t,progressiveChunkSize:n===void 0?12800:n,status:0,fatalError:null,nextSegmentId:0,allPendingTasks:0,pendingRootTasks:0,completedRootSegment:null,abortableTasks:c,pingedTasks:u,clientRenderedBoundaries:[],completedBoundaries:[],partialBoundaries:[],onError:o===void 0?Qd:o,onAllReady:s===void 0?yt:s,onShellReady:i===void 0?yt:i,onShellError:a===void 0?yt:a,onFatalError:l===void 0?yt:l},r=Ar(t,0,null,r,!1,!1),r.parentFlushed=!0,e=ro(t,e,null,r,c,wa,null,Ed),u.push(e),t}function ro(e,t,r,n,o,s,i,a){e.allPendingTasks++,r===null?e.pendingRootTasks++:r.pendingTasks++;var l={node:t,ping:function(){var u=e.pingedTasks;u.push(l),u.length===1&&ba(e)},blockedBoundary:r,blockedSegment:n,abortSet:o,legacyContext:s,context:i,treeContext:a};return o.add(l),l}function Ar(e,t,r,n,o,s){return{status:0,id:-1,index:t,parentFlushed:!1,chunks:[],children:[],formatContext:n,boundary:r,lastPushedText:o,textEmbedded:s}}function Ct(e,t){if(e=e.onError(t),e!=null&&typeof e!="string")throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "'+typeof e+'" instead');return e}function mr(e,t){var r=e.onShellError;r(t),r=e.onFatalError,r(t),e.destination!==null?(e.status=2,ia(e.destination,t)):(e.status=1,e.fatalError=t)}function Wi(e,t,r,n,o){for(he={},Zn=t,Et=0,e=r(n,o);hr;)hr=!1,Et=0,wr+=1,D=null,e=r(n,o);return to(),e}function Xi(e,t,r,n){var o=r.render(),s=n.childContextTypes;if(s!=null){var i=t.legacyContext;if(typeof r.getChildContext!="function")n=i;else{r=r.getChildContext();for(var a in r)if(!(a in s))throw Error(S(108,qn(n)||"Unknown",a));n=wt({},i,r)}t.legacyContext=n,oe(e,t,o),t.legacyContext=i}else oe(e,t,o)}function Zi(e,t){if(e&&e.defaultProps){t=wt({},t),e=e.defaultProps;for(var r in e)t[r]===void 0&&(t[r]=e[r]);return t}return t}function Gn(e,t,r,n,o){if(typeof r=="function")if(r.prototype&&r.prototype.isReactComponent){o=Ki(r,t.legacyContext);var s=r.contextType;s=new r(n,typeof s=="object"&&s!==null?s._currentValue:o),Ji(s,r,n,o),Xi(e,t,s,r)}else{s=Ki(r,t.legacyContext),o=Wi(e,t,r,n,s);var i=Et!==0;if(typeof o=="object"&&o!==null&&typeof o.render=="function"&&o.$$typeof===void 0)Ji(o,r,n,s),Xi(e,t,o,r);else if(i){n=t.treeContext,t.treeContext=Jn(n,1,0);try{oe(e,t,o)}finally{t.treeContext=n}}else oe(e,t,o)}else if(typeof r=="string"){switch(o=t.blockedSegment,s=wp(o.chunks,r,n,e.responseState,o.formatContext),o.lastPushedText=!1,i=o.formatContext,o.formatContext=fp(i,r,n),Vn(e,t,s),o.formatContext=i,r){case"area":case"base":case"br":case"col":case"embed":case"hr":case"img":case"input":case"keygen":case"link":case"meta":case"param":case"source":case"track":case"wbr":break;default:o.chunks.push(Ep,B(r),Cp)}o.lastPushedText=!1}else{switch(r){case yd:case gd:case pa:case da:case ua:oe(e,t,n.children);return;case ga:oe(e,t,n.children);return;case md:throw Error(S(343));case ma:e:{r=t.blockedBoundary,o=t.blockedSegment,s=n.fallback,n=n.children,i=new Set;var a={id:null,rootSegmentID:-1,parentFlushed:!1,pendingTasks:0,forceClientRender:!1,completedSegments:[],byteSize:0,fallbackAbortableTasks:i,errorDigest:null},l=Ar(e,o.chunks.length,a,o.formatContext,!1,!1);o.children.push(l),o.lastPushedText=!1;var u=Ar(e,0,null,o.formatContext,!1,!1);u.parentFlushed=!0,t.blockedBoundary=a,t.blockedSegment=u;try{if(Vn(e,t,n),u.lastPushedText&&u.textEmbedded&&u.chunks.push(Wn),u.status=1,gr(a,u),a.pendingTasks===0)break e}catch(c){u.status=4,a.forceClientRender=!0,a.errorDigest=Ct(e,c)}finally{t.blockedBoundary=r,t.blockedSegment=o}t=ro(e,s,r,l,i,t.legacyContext,t.context,t.treeContext),e.pingedTasks.push(t)}return}if(typeof r=="object"&&r!==null)switch(r.$$typeof){case Aa:if(n=Wi(e,t,r.render,n,o),Et!==0){r=t.treeContext,t.treeContext=Jn(r,1,0);try{oe(e,t,n)}finally{t.treeContext=r}}else oe(e,t,n);return;case ya:r=r.type,n=Zi(r,n),Gn(e,t,r,n,o);return;case fa:if(o=n.children,r=r._context,n=n.value,s=r._currentValue,r._currentValue=n,i=Ne,Ne=n={parent:i,depth:i===null?0:i.depth+1,context:r,parentValue:s,value:n},t.context=n,oe(e,t,o),e=Ne,e===null)throw Error(S(403));n=e.parentValue,e.context._currentValue=n===wd?e.context._defaultValue:n,e=Ne=e.parent,t.context=e;return;case ha:n=n.children,n=n(r._currentValue),oe(e,t,n);return;case Xn:o=r._init,r=o(r._payload),n=Zi(r,n),Gn(e,t,r,n,void 0);return}throw Error(S(130,r==null?r:typeof r,""))}}function oe(e,t,r){if(t.node=r,typeof r=="object"&&r!==null){switch(r.$$typeof){case Ad:Gn(e,t,r.type,r.props,r.ref);return;case ca:throw Error(S(257));case Xn:var n=r._init;r=n(r._payload),oe(e,t,r);return}if(Kn(r)){ea(e,t,r);return}if(r===null||typeof r!="object"?n=null:(n=Hi&&r[Hi]||r["@@iterator"],n=typeof n=="function"?n:null),n&&(n=n.call(r))){if(r=n.next(),!r.done){var o=[];do o.push(r.value),r=n.next();while(!r.done);ea(e,t,o)}return}throw e=Object.prototype.toString.call(r),Error(S(31,e==="[object Object]"?"object with keys {"+Object.keys(r).join(", ")+"}":e))}typeof r=="string"?(n=t.blockedSegment,n.lastPushedText=_i(t.blockedSegment.chunks,r,e.responseState,n.lastPushedText)):typeof r=="number"&&(n=t.blockedSegment,n.lastPushedText=_i(t.blockedSegment.chunks,""+r,e.responseState,n.lastPushedText))}function ea(e,t,r){for(var n=r.length,o=0;o<n;o++){var s=t.treeContext;t.treeContext=Jn(s,n,o);try{Vn(e,t,r[o])}finally{t.treeContext=s}}}function Vn(e,t,r){var n=t.blockedSegment.formatContext,o=t.legacyContext,s=t.context;try{return oe(e,t,r)}catch(l){if(to(),typeof l=="object"&&l!==null&&typeof l.then=="function"){r=l;var i=t.blockedSegment,a=Ar(e,i.chunks.length,null,i.formatContext,i.lastPushedText,!0);i.children.push(a),i.lastPushedText=!1,e=ro(e,t.node,t.blockedBoundary,a,t.abortSet,t.legacyContext,t.context,t.treeContext).ping,r.then(e,e),t.blockedSegment.formatContext=n,t.legacyContext=o,t.context=s,fr(s)}else throw t.blockedSegment.formatContext=n,t.legacyContext=o,t.context=s,fr(s),l}}function Rd(e){var t=e.blockedBoundary;e=e.blockedSegment,e.status=3,Ia(this,t,e)}function Ba(e,t,r){var n=e.blockedBoundary;e.blockedSegment.status=3,n===null?(t.allPendingTasks--,t.status!==2&&(t.status=2,t.destination!==null&&t.destination.close())):(n.pendingTasks--,n.forceClientRender||(n.forceClientRender=!0,e=r===void 0?Error(S(432)):r,n.errorDigest=t.onError(e),n.parentFlushed&&t.clientRenderedBoundaries.push(n)),n.fallbackAbortableTasks.forEach(function(o){return Ba(o,t,r)}),n.fallbackAbortableTasks.clear(),t.allPendingTasks--,t.allPendingTasks===0&&(n=t.onAllReady,n()))}function gr(e,t){if(t.chunks.length===0&&t.children.length===1&&t.children[0].boundary===null){var r=t.children[0];r.id=t.id,r.parentFlushed=!0,r.status===1&&gr(e,r)}else e.completedSegments.push(t)}function Ia(e,t,r){if(t===null){if(r.parentFlushed){if(e.completedRootSegment!==null)throw Error(S(389));e.completedRootSegment=r}e.pendingRootTasks--,e.pendingRootTasks===0&&(e.onShellError=yt,t=e.onShellReady,t())}else t.pendingTasks--,t.forceClientRender||(t.pendingTasks===0?(r.parentFlushed&&r.status===1&&gr(t,r),t.parentFlushed&&e.completedBoundaries.push(t),t.fallbackAbortableTasks.forEach(Rd,e),t.fallbackAbortableTasks.clear()):r.parentFlushed&&r.status===1&&(gr(t,r),t.completedSegments.length===1&&t.parentFlushed&&e.partialBoundaries.push(t)));e.allPendingTasks--,e.allPendingTasks===0&&(e=e.onAllReady,e())}function ba(e){if(e.status!==2){var t=Ne,r=Hn.current;Hn.current=Yi;var n=dr;dr=e.responseState;try{var o=e.pingedTasks,s;for(s=0;s<o.length;s++){var i=o[s],a=e,l=i.blockedSegment;if(l.status===0){fr(i.context);try{oe(a,i,i.node),l.lastPushedText&&l.textEmbedded&&l.chunks.push(Wn),i.abortSet.delete(i),l.status=1,Ia(a,i.blockedBoundary,l)}catch(h){if(to(),typeof h=="object"&&h!==null&&typeof h.then=="function"){var u=i.ping;h.then(u,u)}else{i.abortSet.delete(i),l.status=4;var c=i.blockedBoundary,p=h,d=Ct(a,p);if(c===null?mr(a,p):(c.pendingTasks--,c.forceClientRender||(c.forceClientRender=!0,c.errorDigest=d,c.parentFlushed&&a.clientRenderedBoundaries.push(c))),a.allPendingTasks--,a.allPendingTasks===0){var f=a.onAllReady;f()}}}finally{}}}o.splice(0,s),e.destination!==null&&no(e,e.destination)}catch(h){Ct(e,h),mr(e,h)}finally{dr=n,Hn.current=r,r===Yi&&fr(t)}}}function ar(e,t,r){switch(r.parentFlushed=!0,r.status){case 0:var n=r.id=e.nextSegmentId++;return r.lastPushedText=!1,r.textEmbedded=!1,e=e.responseState,y(t,vp),y(t,e.placeholderPrefix),e=B(n.toString(16)),y(t,e),N(t,xp);case 1:r.status=2;var o=!0;n=r.chunks;var s=0;r=r.children;for(var i=0;i<r.length;i++){for(o=r[i];s<o.index;s++)y(t,n[s]);o=Er(e,t,o)}for(;s<n.length-1;s++)y(t,n[s]);return s<n.length&&(o=N(t,n[s])),o;default:throw Error(S(390))}}function Er(e,t,r){var n=r.boundary;if(n===null)return ar(e,t,r);if(n.parentFlushed=!0,n.forceClientRender)n=n.errorDigest,N(t,bp),y(t,kp),n&&(y(t,Dp),y(t,B(U(n))),y(t,Rp)),N(t,Tp),ar(e,t,r);else if(0<n.pendingTasks){n.rootSegmentID=e.nextSegmentId++,0<n.completedSegments.length&&e.partialBoundaries.push(n);var o=e.responseState,s=o.nextSuspenseID++;o=m(o.boundaryPrefix+s.toString(16)),n=n.id=o,Oi(t,e.responseState,n),ar(e,t,r)}else if(n.byteSize>e.progressiveChunkSize)n.rootSegmentID=e.nextSegmentId++,e.completedBoundaries.push(n),Oi(t,e.responseState,n.id),ar(e,t,r);else{if(N(t,Sp),r=n.completedSegments,r.length!==1)throw Error(S(391));Er(e,t,r[0])}return N(t,Qp)}function ta(e,t,r){return ed(t,e.responseState,r.formatContext,r.id),Er(e,t,r),td(t,r.formatContext)}function ra(e,t,r){for(var n=r.completedSegments,o=0;o<n.length;o++)Qa(e,t,r,n[o]);if(n.length=0,e=e.responseState,n=r.id,r=r.rootSegmentID,y(t,e.startInlineScript),e.sentCompleteBoundaryFunction?y(t,ad):(e.sentCompleteBoundaryFunction=!0,y(t,id)),n===null)throw Error(S(395));return r=B(r.toString(16)),y(t,n),y(t,ld),y(t,e.segmentPrefix),y(t,r),N(t,cd)}function Qa(e,t,r,n){if(n.status===2)return!0;var o=n.id;if(o===-1){if((n.id=r.rootSegmentID)===-1)throw Error(S(392));return ta(e,t,n)}return ta(e,t,n),e=e.responseState,y(t,e.startInlineScript),e.sentCompleteSegmentFunction?y(t,nd):(e.sentCompleteSegmentFunction=!0,y(t,rd)),y(t,e.segmentPrefix),o=B(o.toString(16)),y(t,o),y(t,od),y(t,e.placeholderPrefix),y(t,o),N(t,sd)}function no(e,t){re=new Uint8Array(512),ne=0;try{var r=e.completedRootSegment;if(r!==null&&e.pendingRootTasks===0){Er(e,t,r),e.completedRootSegment=null;var n=e.responseState.bootstrapChunks;for(r=0;r<n.length-1;r++)y(t,n[r]);r<n.length&&N(t,n[r])}var o=e.clientRenderedBoundaries,s;for(s=0;s<o.length;s++){var i=o[s];n=t;var a=e.responseState,l=i.id,u=i.errorDigest,c=i.errorMessage,p=i.errorComponentStack;if(y(n,a.startInlineScript),a.sentClientRenderFunction?y(n,pd):(a.sentClientRenderFunction=!0,y(n,ud)),l===null)throw Error(S(395));if(y(n,l),y(n,dd),(u||c||p)&&(y(n,Un),y(n,B(On(u||"")))),(c||p)&&(y(n,Un),y(n,B(On(c||"")))),p&&(y(n,Un),y(n,B(On(p)))),!N(n,fd)){e.destination=null,s++,o.splice(0,s);return}}o.splice(0,s);var d=e.completedBoundaries;for(s=0;s<d.length;s++)if(!ra(e,t,d[s])){e.destination=null,s++,d.splice(0,s);return}d.splice(0,s),Ti(t),re=new Uint8Array(512),ne=0;var f=e.partialBoundaries;for(s=0;s<f.length;s++){var h=f[s];e:{o=e,i=t;var A=h.completedSegments;for(a=0;a<A.length;a++)if(!Qa(o,i,h,A[a])){a++,A.splice(0,a);var E=!1;break e}A.splice(0,a),E=!0}if(!E){e.destination=null,s++,f.splice(0,s);return}}f.splice(0,s);var C=e.completedBoundaries;for(s=0;s<C.length;s++)if(!ra(e,t,C[s])){e.destination=null,s++,C.splice(0,s);return}C.splice(0,s)}finally{Ti(t),e.allPendingTasks===0&&e.pingedTasks.length===0&&e.clientRenderedBoundaries.length===0&&e.completedBoundaries.length===0&&t.close()}}function na(e,t){try{var r=e.abortableTasks;r.forEach(function(n){return Ba(n,e,t)}),r.clear(),e.destination!==null&&no(e,e.destination)}catch(n){Ct(e,n),mr(e,n)}}oo.renderToReadableStream=function(e,t){return new Promise(function(r,n){var o,s,i=new Promise(function(c,p){s=c,o=p}),a=kd(e,pp(t?t.identifierPrefix:void 0,t?t.nonce:void 0,t?t.bootstrapScriptContent:void 0,t?t.bootstrapScripts:void 0,t?t.bootstrapModules:void 0),dp(t?t.namespaceURI:void 0),t?t.progressiveChunkSize:void 0,t?t.onError:void 0,s,function(){var c=new ReadableStream({type:"bytes",pull:function(p){if(a.status===1)a.status=2,ia(p,a.fatalError);else if(a.status!==2&&a.destination===null){a.destination=p;try{no(a,p)}catch(d){Ct(a,d),mr(a,d)}}},cancel:function(){na(a)}},{highWaterMark:0});c.allReady=i,r(c)},function(c){i.catch(function(){}),n(c)},o);if(t&&t.signal){var l=t.signal,u=function(){na(a,l.reason),l.removeEventListener("abort",u)};l.addEventListener("abort",u)}ba(a)})};oo.version="18.3.1"});var Da=pe(Le=>{"use strict";var ze,Ra;ze=Di(),Ra=ka();Le.version=ze.version;Le.renderToString=ze.renderToString;Le.renderToStaticMarkup=ze.renderToStaticMarkup;Le.renderToNodeStream=ze.renderToNodeStream;Le.renderToStaticNodeStream=ze.renderToStaticNodeStream;Le.renderToReadableStream=Ra.renderToReadableStream});function Td(e){let t={},r;if(e)for(Ta.lastIndex=0,e=" "+(e||"")+" ";r=Ta.exec(e);)r[0]!==" "&&(t[r[1]]=r[3]);return t}function _a(e){let t=typeof e=="string"?e:e.value,r,n,o,s,i,a,l,u,c,p=[];M.lastIndex=0,n=r={type:0,children:[]};let d=0;function f(){s=t.substring(d,M.lastIndex-o[0].length),s&&n.children.push({type:2,value:s,parent:n})}for(;o=M.exec(t);){if(a=o[5]||o[8],l=o[6]||o[9],u=o[7]||o[10],so.has(n.name)&&o[2]!==n.name){i=M.lastIndex-o[0].length,n.children.length>0&&(n.children[0].value+=o[0]);continue}else if(a==="<!--"){if(i=M.lastIndex-o[0].length,so.has(n.name))continue;c={type:3,value:l,parent:n,loc:[{start:i,end:i+a.length},{start:M.lastIndex-u.length,end:M.lastIndex}]},p.push(c),c.parent.children.push(c)}else if(a==="<!")i=M.lastIndex-o[0].length,c={type:4,value:l,parent:n,loc:[{start:i,end:i+a.length},{start:M.lastIndex-u.length,end:M.lastIndex}]},p.push(c),c.parent.children.push(c);else if(o[1]!=="/")if(f(),so.has(n.name)){d=M.lastIndex,f();continue}else c={type:1,name:o[2]+"",attributes:Td(o[3]),parent:n,children:[],loc:[{start:M.lastIndex-o[0].length,end:M.lastIndex}]},p.push(c),c.parent.children.push(c),o[4]&&o[4].indexOf("/")>-1||Dd.has(c.name)?(c.loc[1]=c.loc[0],c.isSelfClosingTag=!0):n=c;else f(),o[2]+""===n.name?(c=n,n=c.parent,c.loc.push({start:M.lastIndex-o[0].length,end:M.lastIndex}),s=t.substring(c.loc[0].end,c.loc[1].start),c.children.length===0&&c.children.push({type:2,value:s,parent:n})):o[2]+""===p[p.length-1].name&&p[p.length-1].isSelfClosingTag===!0&&(c=p[p.length-1],c.loc.push({start:M.lastIndex-o[0].length,end:M.lastIndex}));d=M.lastIndex}return s=t.slice(d),n.children.push({type:2,value:s,parent:n}),r}var Na,La,Pa,iy,Dd,so,Ta,M,ay,ly,cy,Fa=j(()=>{Na=0,La=1,Pa=2,iy=Symbol("Fragment"),Dd=new Set(["area","base","br","col","embed","hr","img","input","keygen","link","meta","param","source","track","wbr"]),so=new Set(["script","style"]),Ta=/([\@\.a-z0-9_\:\-]*)\s*?=?\s*?(['"]?)([\s\S]*?)\2\s+/gim,M=/(?:<(\/?)([a-zA-Z][a-zA-Z0-9\:-]*)(?:\s([^>]*?))?((?:\s*\/)?)>|(<\!\-\-)([\s\S]*?)(\-\->)|(<\!)([\s\S]*?)(>))/gm;ay=Symbol("HTMLString"),ly=Symbol("AttrString"),cy=Symbol("RenderFn")});var Ma={};ut(Ma,{default:()=>Ld});function Ld(e){let t=_a(e.toString().trim()),r=Nd++,n=0;function o(i){let a=Array.isArray(i.children)&&i.children.length?i.children.map(l=>o(l)).filter(Boolean):void 0;if(i.type===Na)return(0,vt.createElement)(vt.Fragment,{},a);if(i.type===La){let{class:l,...u}=i.attributes;return(0,vt.createElement)(i.name,{...u,className:l,key:`${r}-${n++}`},a)}else if(i.type===Pa)return i.value.trim()?i.value:void 0}return o(t).props.children}var vt,Nd,ja=j(()=>{vt=Qe(Je(),1);Fa();Nd=0});function Fd(e){if(io.has(e))return io.get(e);let t={currentIndex:0,get id(){return _d+this.currentIndex.toString()}};return io.set(e,t),t}function Md(e){let t=Fd(e),r=t.id;return t.currentIndex++,r}async function Ud(e,t,r){if(typeof e=="object")return e.$$typeof.toString().slice(7).startsWith("react");if(typeof e!="function"||e.name==="QwikComponent"||typeof e=="function"&&e.$$typeof===Symbol.for("react.forward_ref"))return!1;if(e.prototype!=null&&typeof e.prototype.render=="function")return Ae.default.Component.isPrototypeOf(e)||Ae.default.PureComponent.isPrototypeOf(e);let n=!1;function o(...s){try{let i=e(...s);i&&i.$$typeof===$d&&(n=!0)}catch{}return Ae.default.createElement("div")}return await Ua(o,t,r,{}),n}async function Od(){let e="node:stream",{Writable:t}=await import(e);return t}function $a(e){return e.astroStaticSlot?!!e.hydrate:!0}async function Ua(e,t,{default:r,...n},o){let s;this&&this.result&&(s=Md(this.result));let i={prefix:s};delete t.class;let a={};for(let[h,A]of Object.entries(n)){let E=jd(h);a[E]=Ae.default.createElement(ao,{hydrate:$a(o),value:A,name:E})}let l={...t,...a},u=r??t.children;if(r&&Pd.experimentalReactChildren){i["data-react-children"]=!0;let h=await Promise.resolve().then(()=>(ja(),Ma)).then(A=>A.default);l.children=h(r)}else u!=null&&(l.children=Ae.default.createElement(ao,{hydrate:$a(o),value:u}));let c=this?await Hd(this):void 0;c&&(i["data-action-result"]=JSON.stringify(c[0]),i["data-action-key"]=c[1],i["data-action-name"]=c[2]);let p=Ae.default.createElement(e,l),d={identifierPrefix:s,formState:c},f;return"renderToReadableStream"in Cr.default?f=await Jd(p,d):f=await Kd(p,d),{html:f,attrs:i}}async function Hd({result:e}){let{request:t,actionResult:r}=e;if(!r||!Vd(t.headers.get("content-type")))return;let{searchParams:n}=new URL(t.url),o=await t.clone().formData(),s=o.get("$ACTION_KEY")?.toString(),i=n.get("_astroAction")??o.get("_astroAction")?.toString();if(!(!s||!i))return[r,s,i]}async function Kd(e,t){let r=await Od(),n="";return new Promise((o,s)=>{let i,a=Cr.default.renderToPipeableStream(e,{...t,onError(l){i=l,s(i)},onAllReady(){a.pipe(new r({write(l,u,c){n+=l.toString("utf-8"),c()},destroy(){o(n)}}))}})})}async function qd(e){let t=e.getReader(),r="",n=new TextDecoder("utf-8");for(;;){let{done:o,value:s}=await t.read();if(o)return s?r+=n.decode(s):n.decode(new Uint8Array),r;r+=n.decode(s,{stream:!0})}}async function Jd(e,t){return await qd(await Cr.default.renderToReadableStream(e,t))}function Vd(e){let t=e?.split(";")[0].toLowerCase();return Gd.some(r=>t===r)}var Ae,Cr,Pd,io,_d,ao,jd,$d,Gd,zd,Ye,vr=j(()=>{Ae=Qe(Je(),1),Cr=Qe(Da(),1),Pd={experimentalReactChildren:!1},io=new WeakMap,_d="r";ao=({value:e,name:t,hydrate:r=!0})=>e?(0,Ae.createElement)(r?"astro-slot":"astro-static-slot",{name:t,suppressHydrationWarning:!0,dangerouslySetInnerHTML:{__html:e}}):null;ao.shouldComponentUpdate=()=>!1;jd=e=>e.trim().replace(/[-_]([a-z])/g,(t,r)=>r.toUpperCase()),$d=Symbol.for("react.element");Gd=["application/x-www-form-urlencoded","multipart/form-data"];zd={name:"@astrojs/react",check:Ud,renderToStaticMarkup:Ua,supportsAstroStaticSlot:!0},Ye=[Object.assign({name:"@astrojs/react",clientEntrypoint:"@astrojs/react/client.js",serverEntrypoint:"@astrojs/react/server.js"},{ssr:zd})]});function xr(e){return e.endsWith("/")?e:e+"/"}function xt(e){return e[0]==="/"?e:"/"+e}function St(e){return e.endsWith("/")?e.slice(0,e.length-1):e}function Yd(e){return e.startsWith("/")?e.substring(1):e}function lo(e){return e.replace(/^\/|\/$/g,"")}function Wd(e){return typeof e=="string"||e instanceof String}function Ce(...e){return e.filter(Wd).map((t,r)=>r===0?St(t):r===e.length-1?Yd(t):lo(t)).join("/")}function We(e){return/^(?:http|ftp|https|ws):?\/\//.test(e)||e.startsWith("data:")}function co(e){return e.replace(/\\/g,"/")}function Oa(e){let t=e.split(".").pop();return t!==e?`.${t}`:""}var Bt=j(()=>{});function T(e,t){let r=new RegExp(`\\x1b\\[${t}m`,"g"),n=`\x1B[${e}m`,o=`\x1B[${t}m`;return function(s){return!Xd.enabled||s==null?s:n+(~(""+s).indexOf(o)?s.replace(r,o+n):s)+o}}var uo,Ha,Ka,qa,Ja,Xd,hy,Sr,po,Ay,my,gy,yy,wy,Ey,Ga,Cy,Va,za,vy,xy,Sy,By,Iy,by,Qy,ky,Ry,Dy,Ty,Ny,Ly,It=j(()=>{Ja=!0;typeof process<"u"&&({FORCE_COLOR:uo,NODE_DISABLE_COLORS:Ha,NO_COLOR:Ka,TERM:qa}=process.env||{},Ja=process.stdout&&process.stdout.isTTY);Xd={enabled:!Ha&&Ka==null&&qa!=="dumb"&&(uo!=null&&uo!=="0"||Ja)};hy=T(0,0),Sr=T(1,22),po=T(2,22),Ay=T(3,23),my=T(4,24),gy=T(7,27),yy=T(8,28),wy=T(9,29),Ey=T(30,39),Ga=T(31,39),Cy=T(32,39),Va=T(33,39),za=T(34,39),vy=T(35,39),xy=T(36,39),Sy=T(37,39),By=T(90,39),Iy=T(90,39),by=T(40,49),Qy=T(41,49),ky=T(42,49),Ry=T(43,49),Dy=T(44,49),Ty=T(45,49),Ny=T(46,49),Ly=T(47,49)});var nl={};ut(nl,{A:()=>g,B:()=>So,C:()=>fo,D:()=>$r,E:()=>Co,F:()=>Pr,G:()=>go,H:()=>Br,I:()=>Tr,J:()=>vo,K:()=>pf,L:()=>Fr,M:()=>Ao,N:()=>Dr,O:()=>Ze,P:()=>Nr,R:()=>Pe,S:()=>ho,a:()=>Mr,b:()=>jr,c:()=>ve,d:()=>Qt,e:()=>Ir,f:()=>xe,g:()=>_r,h:()=>Xe,i:()=>wo,j:()=>Ur,k:()=>me,l:()=>Bo,m:()=>yo,n:()=>Lr,o:()=>Hr,p:()=>xo,q:()=>Eo,r:()=>Or,s:()=>Rt,t:()=>Qr,u:()=>br,v:()=>mo,w:()=>kr,x:()=>bt,y:()=>kt,z:()=>Rr});function tf(e){return e.replace(/\r\n|\r(?!\n)|\n/g,`
`)}function rf(e,t){if(!t||t.line===void 0||t.column===void 0)return"";let r=tf(e).split(`
`).map(i=>i.replace(/\t/g,"  ")),n=[];for(let i=-2;i<=2;i++)r[t.line+i]&&n.push(t.line+i);let o=0;for(let i of n){let a=`> ${i}`;a.length>o&&(o=a.length)}let s="";for(let i of n){let a=i===t.line-1;s+=a?"> ":"  ",s+=`${i+1} | ${r[i]}
`,a&&(s+=`${Array.from({length:o}).join(" ")}  | ${Array.from({length:t.column}).join(" ")}^
`)}return s}function me(e){return typeof e=="object"}function Ur(e){return typeof e=="string"}async function Or(e){return typeof e=="object"&&"then"in e?(await e).default??await e:e}function nf(e,t){return sf(e,t.protocol)&&rl(e,t.hostname,!0)&&of(e,t.port)&&af(e,t.pathname)}function of(e,t){return!t||t===e.port}function sf(e,t){return!t||t===e.protocol.slice(0,-1)}function rl(e,t,r){if(t){if(!r||!t.startsWith("*"))return t===e.hostname;if(t.startsWith("**.")){let n=t.slice(2);return n!==e.hostname&&e.hostname.endsWith(n)}else if(t.startsWith("*.")){let n=t.slice(1);return e.hostname.replace(n,"").split(".").filter(Boolean).length===1}}else return!0;return!1}function af(e,t,r){if(t)if(t.endsWith("*")){if(t.endsWith("/**")){let n=t.slice(0,-2);return n!==e.pathname&&e.pathname.startsWith(n)}else if(t.endsWith("/*")){let n=t.slice(0,-1);return e.pathname.replace(n,"").split("/").filter(Boolean).length===1}}else return t===e.pathname;else return!0;return!1}function Hr(e,{domains:t=[],remotePatterns:r=[]}){if(!We(e))return!1;let n=new URL(e);return t.some(o=>rl(n,o))||r.some(o=>nf(n,o))}function Bo(e){return e?"transform"in e:!1}function tl(e){let t=e.width,r=e.height;if(me(e.src)){let n=e.src.width/e.src.height;r&&!t?t=Math.round(r*n):t&&!r?r=Math.round(t/n):!t&&!r&&(t=e.src.width,r=e.src.height)}return{targetWidth:t,targetHeight:r}}var Br,fo,ho,bt,Ze,Ao,ve,Ir,Qt,br,Qr,mo,kr,go,Rr,Dr,Tr,Nr,Lr,yo,Ya,Pr,Wa,Zd,kt,Xe,_r,wo,ef,xe,Pe,Eo,Rt,Co,Fr,vo,Xa,Mr,jr,xo,So,g,Za,el,$r,lf,cf,uf,pf,Dt=j(()=>{Bt();Br={name:"ClientAddressNotAvailable",title:"`Astro.clientAddress` is not available in current adapter.",message:e=>`\`Astro.clientAddress\` is not available in the \`${e}\` adapter. File an issue with the adapter to add support.`},fo={name:"PrerenderClientAddressNotAvailable",title:"`Astro.clientAddress` cannot be used inside prerendered routes.",message:"`Astro.clientAddress` cannot be used inside prerendered routes"},ho={name:"StaticClientAddressNotAvailable",title:"`Astro.clientAddress` is not available in static mode.",message:"`Astro.clientAddress` is only available when using `output: 'server'` or `output: 'hybrid'`. Update your Astro config if you need SSR features.",hint:"See https://docs.astro.build/en/guides/server-side-rendering/ for more information on how to enable SSR."},bt={name:"NoMatchingStaticPathFound",title:"No static path found for requested path.",message:e=>`A \`getStaticPaths()\` route pattern was matched, but no matching static path was found for requested path \`${e}\`.`,hint:e=>`Possible dynamic routes being matched: ${e.join(", ")}.`},Ze={name:"OnlyResponseCanBeReturned",title:"Invalid type returned by Astro page.",message:(e,t)=>`Route \`${e||""}\` returned a \`${t}\`. Only a [Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) can be returned from Astro files.`,hint:"See https://docs.astro.build/en/guides/server-side-rendering/#response for more information."},Ao={name:"MissingMediaQueryDirective",title:"Missing value for `client:media` directive.",message:'Media query not provided for `client:media` directive. A media query similar to `client:media="(max-width: 600px)"` must be provided'},ve={name:"NoMatchingRenderer",title:"No matching renderer found.",message:(e,t,r,n)=>`Unable to render \`${e}\`.

${n>0?`There ${r?"are":"is"} ${n} renderer${r?"s":""} configured in your \`astro.config.mjs\` file,
but ${r?"none were":"it was not"} able to server-side render \`${e}\`.`:`No valid renderer was found ${t?`for the \`.${t}\` file extension.`:"for this file extension."}`}`,hint:e=>`Did you mean to enable the ${e} integration?

See https://docs.astro.build/en/guides/framework-components/ for more information on how to install and configure integrations.`},Ir={name:"NoClientEntrypoint",title:"No client entrypoint specified in renderer.",message:(e,t,r)=>`\`${e}\` component has a \`client:${t}\` directive, but no client entrypoint was provided by \`${r}\`.`,hint:"See https://docs.astro.build/en/reference/integrations-reference/#addrenderer-option for more information on how to configure your renderer."},Qt={name:"NoClientOnlyHint",title:"Missing hint on client:only directive.",message:e=>`Unable to render \`${e}\`. When using the \`client:only\` hydration strategy, Astro needs a hint to use the correct renderer.`,hint:e=>`Did you mean to pass \`client:only="${e}"\`? See https://docs.astro.build/en/reference/directives-reference/#clientonly for more information on client:only`},br={name:"InvalidGetStaticPathsEntry",title:"Invalid entry inside getStaticPath's return value",message:e=>`Invalid entry returned by getStaticPaths. Expected an object, got \`${e}\``,hint:"If you're using a `.map` call, you might be looking for `.flatMap()` instead. See https://docs.astro.build/en/reference/api-reference/#getstaticpaths for more information on getStaticPaths."},Qr={name:"InvalidGetStaticPathsReturn",title:"Invalid value returned by getStaticPaths.",message:e=>`Invalid type returned by \`getStaticPaths\`. Expected an \`array\`, got \`${e}\``,hint:"See https://docs.astro.build/en/reference/api-reference/#getstaticpaths for more information on getStaticPaths."},mo={name:"GetStaticPathsExpectedParams",title:"Missing params property on `getStaticPaths` route.",message:"Missing or empty required `params` property on `getStaticPaths` route.",hint:"See https://docs.astro.build/en/reference/api-reference/#getstaticpaths for more information on getStaticPaths."},kr={name:"GetStaticPathsInvalidRouteParam",title:"Invalid value for `getStaticPaths` route parameter.",message:(e,t,r)=>`Invalid getStaticPaths route parameter for \`${e}\`. Expected undefined, a string or a number, received \`${r}\` (\`${t}\`)`,hint:"See https://docs.astro.build/en/reference/api-reference/#getstaticpaths for more information on getStaticPaths."},go={name:"GetStaticPathsRequired",title:"`getStaticPaths()` function required for dynamic routes.",message:"`getStaticPaths()` function is required for dynamic routes. Make sure that you `export` a `getStaticPaths` function from your dynamic route.",hint:'See https://docs.astro.build/en/guides/routing/#dynamic-routes for more information on dynamic routes.\n\nAlternatively, set `output: "server"` or `output: "hybrid"` in your Astro config file to switch to a non-static server build. This error can also occur if using `export const prerender = true;`.\nSee https://docs.astro.build/en/guides/server-side-rendering/ for more information on non-static rendering.'},Rr={name:"ReservedSlotName",title:"Invalid slot name.",message:e=>`Unable to create a slot named \`${e}\`. \`${e}\` is a reserved slot name. Please update the name of this slot.`},Dr={name:"NoMatchingImport",title:"No import found for component.",message:e=>`Could not render \`${e}\`. No matching import has been found for \`${e}\`.`,hint:"Please make sure the component is properly imported."},Tr={name:"InvalidComponentArgs",title:"Invalid component arguments.",message:e=>`Invalid arguments passed to${e?` <${e}>`:""} component.`,hint:"Astro components cannot be rendered directly via function call, such as `Component()` or `{items.map(Component)}`."},Nr={name:"PageNumberParamNotFound",title:"Page number param not found.",message:e=>`[paginate()] page number param \`${e}\` not found in your filepath.`,hint:"Rename your file to `[page].astro` or `[...page].astro`."},Lr={name:"ImageMissingAlt",title:'Image missing required "alt" property.',message:'Image missing "alt" property. "alt" text is required to describe important images on the page.',hint:'Use an empty string ("") for decorative images.'},yo={name:"InvalidImageService",title:"Error while loading image service.",message:"There was an error loading the configured image service. Please see the stack trace for more information."},Ya={name:"MissingImageDimension",title:"Missing image dimensions",message:(e,t)=>`Missing ${e==="both"?"width and height attributes":`${e} attribute`} for ${t}. When using remote images, both dimensions are required in order to avoid CLS.`,hint:"If your image is inside your `src` folder, you probably meant to import it instead. See [the Imports guide for more information](https://docs.astro.build/en/guides/imports/#other-assets). You can also use `inferSize={true}` for remote images to get the original dimensions."},Pr={name:"FailedToFetchRemoteImageDimensions",title:"Failed to retrieve remote image dimensions",message:e=>`Failed to get the dimensions for ${e}.`,hint:"Verify your remote image URL is accurate, and that you are not using `inferSize` with a file located in your `public/` folder."},Wa={name:"UnsupportedImageFormat",title:"Unsupported image format",message:(e,t,r)=>`Received unsupported format \`${e}\` from \`${t}\`. Currently only ${r.join(", ")} are supported by our image services.`,hint:"Using an `img` tag directly instead of the `Image` component might be what you're looking for."},Zd={name:"UnsupportedImageConversion",title:"Unsupported image conversion",message:"Converting between vector (such as SVGs) and raster (such as PNGs and JPEGs) images is not currently supported."},kt={name:"PrerenderDynamicEndpointPathCollide",title:"Prerendered dynamic endpoint has path collision.",message:e=>`Could not render \`${e}\` with an \`undefined\` param as the generated path will collide during prerendering. Prevent passing \`undefined\` as \`params\` for the endpoint's \`getStaticPaths()\` function, or add an additional extension to the endpoint's filename.`,hint:e=>`Rename \`${e}\` to \`${e.replace(/\.(?:js|ts)/,t=>".json"+t)}\``},Xe={name:"ExpectedImage",title:"Expected src to be an image.",message:(e,t,r)=>`Expected \`src\` property for \`getImage\` or \`<Image />\` to be either an ESM imported image or a string with the path of a remote image. Received \`${e}\` (type: \`${t}\`).

Full serialized options received: \`${r}\`.`,hint:"This error can often happen because of a wrong path. Make sure the path to your image is correct. If you're passing an async function, make sure to call and await it."},_r={name:"ExpectedImageOptions",title:"Expected image options.",message:e=>`Expected getImage() parameter to be an object. Received \`${e}\`.`},wo={name:"ExpectedNotESMImage",title:"Expected image options, not an ESM-imported image.",message:"An ESM-imported image cannot be passed directly to `getImage()`. Instead, pass an object with the image in the `src` property.",hint:"Try changing `getImage(myImage)` to `getImage({ src: myImage })`"},ef={name:"IncompatibleDescriptorOptions",title:"Cannot set both `densities` and `widths`",message:"Only one of `densities` or `widths` can be specified. In most cases, you'll probably want to use only `widths` if you require specific widths.",hint:"Those attributes are used to construct a `srcset` attribute, which cannot have both `x` and `w` descriptors."},xe={name:"NoImageMetadata",title:"Could not process image metadata.",message:e=>`Could not process image metadata${e?` for \`${e}\``:""}.`,hint:"This is often caused by a corrupted or malformed image. Re-exporting the image from your image editor may fix this issue."},Pe={name:"ResponseSentError",title:"Unable to set response.",message:"The response has already been sent to the browser and cannot be altered."},Eo={name:"MiddlewareNoDataOrNextCalled",title:"The middleware didn't return a `Response`.",message:"Make sure your middleware returns a `Response` object, either directly or by returning the `Response` from calling the `next` function."},Rt={name:"MiddlewareNotAResponse",title:"The middleware returned something that is not a `Response` object.",message:"Any data returned from middleware must be a valid `Response` object."},Co={name:"EndpointDidNotReturnAResponse",title:"The endpoint did not return a `Response`.",message:"An endpoint must return either a `Response`, or a `Promise` that resolves with a `Response`."},Fr={name:"LocalsNotAnObject",title:"Value assigned to `locals` is not accepted.",message:"`locals` can only be assigned to an object. Other values like numbers, strings, etc. are not accepted.",hint:"If you tried to remove some information from the `locals` object, try to use `delete` or set the property to `undefined`."},vo={name:"AstroResponseHeadersReassigned",title:"`Astro.response.headers` must not be reassigned.",message:"Individual headers can be added to and removed from `Astro.response.headers`, but it must not be replaced with another instance of `Headers` altogether.",hint:"Consider using `Astro.response.headers.add()`, and `Astro.response.headers.delete()`."},Xa={name:"LocalImageUsedWrongly",title:"Local images must be imported.",message:e=>`\`Image\`'s and \`getImage\`'s \`src\` parameter must be an imported image or an URL, it cannot be a string filepath. Received \`${e}\`.`,hint:"If you want to use an image from your `src` folder, you need to either import it or if the image is coming from a content collection, use the [image() schema helper](https://docs.astro.build/en/guides/images/#images-in-content-collections). See https://docs.astro.build/en/guides/images/#src-required for more information on the `src` property."},Mr={name:"AstroGlobUsedOutside",title:"Astro.glob() used outside of an Astro file.",message:e=>`\`Astro.glob(${e})\` can only be used in \`.astro\` files. \`import.meta.glob(${e})\` can be used instead to achieve a similar result.`,hint:"See Vite's documentation on `import.meta.glob` for more information: https://vite.dev/guide/features.html#glob-import"},jr={name:"AstroGlobNoMatch",title:"Astro.glob() did not match any files.",message:e=>`\`Astro.glob(${e})\` did not return any matching files.`,hint:"Check the pattern for typos."},xo={name:"i18nNoLocaleFoundInPath",title:"The path doesn't contain any locale",message:"You tried to use an i18n utility on a path that doesn't contain any locale. You can use `pathHasLocale` first to determine if the path has a locale."},So={name:"RewriteWithBodyUsed",title:"Cannot use Astro.rewrite after the request body has been read",message:"Astro.rewrite() cannot be used if the request body has already been read. If you need to read the body, first clone the request."};g=class extends Error{loc;title;hint;frame;type="AstroError";constructor(t,r){let{name:n,title:o,message:s,stack:i,location:a,hint:l,frame:u}=t;super(s,r),this.title=o,this.name=n,s&&(this.message=s),this.stack=i||this.stack,this.loc=a,this.hint=l,this.frame=u}setLocation(t){this.loc=t}setName(t){this.name=t}setMessage(t){this.message=t}setHint(t){this.hint=t}setFrame(t,r){this.frame=rf(t,r)}static is(t){return t.type==="AstroError"}},Za=["jpeg","jpg","png","tiff","webp","gif","svg","avif"],el="webp",$r=["src","width","height","format","quality"];lf={propertiesToHash:$r,validateOptions(e){if(!e.src||typeof e.src!="string"&&typeof e.src!="object")throw new g({...Xe,message:Xe.message(JSON.stringify(e.src),typeof e.src,JSON.stringify(e,(t,r)=>r===void 0?null:r))});if(me(e.src)){if(!Za.includes(e.src.format))throw new g({...Wa,message:Wa.message(e.src.format,e.src.src,Za)});if(e.widths&&e.densities)throw new g(ef);if(e.src.format==="svg"&&(e.format="svg"),e.src.format==="svg"&&e.format!=="svg"||e.src.format!=="svg"&&e.format==="svg")throw new g(Zd)}else{if(e.src.startsWith("/@fs/")||!We(e.src)&&!e.src.startsWith("/"))throw new g({...Xa,message:Xa.message(e.src)});let t;if(!e.width&&!e.height?t="both":!e.width&&e.height?t="width":e.width&&!e.height&&(t="height"),t)throw new g({...Ya,message:Ya.message(t,e.src)})}return e.format||(e.format=el),e.width&&(e.width=Math.round(e.width)),e.height&&(e.height=Math.round(e.height)),e},getHTMLAttributes(e){let{targetWidth:t,targetHeight:r}=tl(e),{src:n,width:o,height:s,format:i,quality:a,densities:l,widths:u,formats:c,...p}=e;return{...p,width:t,height:r,loading:p.loading??"lazy",decoding:p.decoding??"async"}},getSrcSet(e){let t=[],{targetWidth:r}=tl(e),{widths:n,densities:o}=e,s=e.format??el,i=e.width,a=1/0;me(e.src)&&(i=e.src.width,a=i);let{width:l,height:u,...c}=e,p=[];if(o){let d=o.map(h=>typeof h=="number"?h:parseFloat(h)),f=d.sort().map(h=>Math.round(r*h));p.push(...f.map((h,A)=>({maxTargetWidth:Math.min(h,a),descriptor:`${d[A]}x`})))}else n&&p.push(...n.map(d=>({maxTargetWidth:Math.min(d,a),descriptor:`${d}w`})));for(let{maxTargetWidth:d,descriptor:f}of p){let h={...c};d!==i?h.width=d:e.width&&e.height&&(h.width=e.width,h.height=e.height),t.push({transform:h,descriptor:f,attributes:{type:`image/${s}`}})}return t},getURL(e,t){let r=new URLSearchParams;if(me(e.src))r.append("href",e.src.src);else if(Hr(e.src,t))r.append("href",e.src);else return e.src;return Object.entries({w:"width",h:"height",q:"quality",f:"format"}).forEach(([s,i])=>{e[i]&&r.append(s,e[i].toString())}),`${Ce("/","/_image")}?${r}`},parseURL(e){let t=e.searchParams;return t.has("href")?{src:t.get("href"),width:t.has("w")?parseInt(t.get("w")):void 0,height:t.has("h")?parseInt(t.get("h")):void 0,format:t.get("f"),quality:t.get("q")}:void 0}};cf={...lf,propertiesToHash:["src"],async transform(e,t){return{data:e,format:t.format}}},uf=cf,pf=Object.freeze(Object.defineProperty({__proto__:null,default:uf},Symbol.toStringTag,{value:"Module"}))});function ol(e){var t,r,n="";if(typeof e=="string"||typeof e=="number")n+=e;else if(typeof e=="object")if(Array.isArray(e)){var o=e.length;for(t=0;t<o;t++)e[t]&&(r=ol(e[t]))&&(n&&(n+=" "),n+=r)}else for(r in e)e[r]&&(n&&(n+=" "),n+=r);return n}function Io(){for(var e,t,r=0,n="",o=arguments.length;r<o;r++)(e=arguments[r])&&(t=ol(e))&&(n&&(n+=" "),n+=t);return n}var et=j(()=>{});var df,ff,hf,Af,Kr,bo=j(()=>{({replace:df}=""),ff=/[&<>'"]/g,hf={"&":"&amp;","<":"&lt;",">":"&gt;","'":"&#39;",'"':"&quot;"},Af=e=>hf[e],Kr=e=>df.call(e,ff,Af)});function Qo(e){let t="";for(let r=0;r<e.length;r++)t+=sl[e[r]>>4],t+=sl[e[r]&15];return t}function ko(e){if(e.length%2!==0)throw new Error("Invalid hex string");let t=new Uint8Array(e.length/2);for(let r=0;r<e.length;r+=2){if(!(e[r]in qr))throw new Error("Invalid character");if(!(e[r+1]in qr))throw new Error("Invalid character");t[r/2]|=qr[e[r]]<<4,t[r/2]|=qr[e[r+1]]}return t}var sl,qr,il=j(()=>{sl="0123456789ABCDEF",qr={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,a:10,A:10,b:11,B:11,c:12,C:12,d:13,D:13,e:14,E:14,f:15,F:15}});var al,ll,cl=j(()=>{(function(e){e[e.Include=0]="Include",e[e.None=1]="None"})(al||(al={}));(function(e){e[e.Required=0]="Required",e[e.Ignore=1]="Ignore"})(ll||(ll={}))});function Ro(e){return mf(e,gf,Jr.Include)}function mf(e,t,r){let n="";for(let o=0;o<e.byteLength;o+=3){let s=0,i=0;for(let a=0;a<3&&o+a<e.byteLength;a++)s=s<<8|e[o+a],i+=8;for(let a=0;a<4;a++)i>=6?(n+=t[s>>i-6&63],i-=6):i>0?(n+=t[s<<6-i&63],i=0):r===Jr.Include&&(n+="=")}return n}function Gr(e){return yf(e,wf,Tt.Required)}function yf(e,t,r){let n=new Uint8Array(Math.ceil(e.length/4)*3),o=0;for(let s=0;s<e.length;s+=4){let i=0,a=0;for(let u=0;u<4;u++)if(!(r===Tt.Required&&e[s+u]==="=")&&!(r===Tt.Ignore&&(s+u>=e.length||e[s+u]==="="))){if(u>0&&e[s+u-1]==="=")throw new Error("Invalid padding");if(!(e[s+u]in t))throw new Error("Invalid character");i|=t[e[s+u]]<<(3-u)*6,a+=6}if(a<24){let u;if(a===12)u=i&65535;else if(a===18)u=i&255;else throw new Error("Invalid padding");if(u!==0)throw new Error("Invalid padding")}let l=Math.floor(a/8);for(let u=0;u<l;u++)n[o]=i>>16-u*8&255,o++}return n.slice(0,o)}var gf,Jr,Tt,wf,ul=j(()=>{gf="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";(function(e){e[e.Include=0]="Include",e[e.None=1]="None"})(Jr||(Jr={}));(function(e){e[e.Required=0]="Required",e[e.Ignore=1]="Ignore"})(Tt||(Tt={}));wf={0:52,1:53,2:54,3:55,4:56,5:57,6:58,7:59,8:60,9:61,A:0,B:1,C:2,D:3,E:4,F:5,G:6,H:7,I:8,J:9,K:10,L:11,M:12,N:13,O:14,P:15,Q:16,R:17,S:18,T:19,U:20,V:21,W:22,X:23,Y:24,Z:25,a:26,b:27,c:28,d:29,e:30,f:31,g:32,h:33,i:34,j:35,k:36,l:37,m:38,n:39,o:40,p:41,q:42,r:43,s:44,t:45,u:46,v:47,w:48,x:49,y:50,z:51,"+":62,"/":63}});var pl=j(()=>{il();cl();ul()});var fl=pe((a0,dl)=>{"use strict";var Ef={},Cf=Ef.hasOwnProperty,vf=function(t,r){if(!t)return r;var n={};for(var o in r)n[o]=Cf.call(t,o)?t[o]:r[o];return n},xf=/[ -,\.\/:-@\[-\^`\{-~]/,Sf=/[ -,\.\/:-@\[\]\^`\{-~]/,Bf=/(^|\\+)?(\\[A-F0-9]{1,6})\x20(?![a-fA-F0-9\x20])/g,Do=function e(t,r){r=vf(r,e.options),r.quotes!="single"&&r.quotes!="double"&&(r.quotes="single");for(var n=r.quotes=="double"?'"':"'",o=r.isIdentifier,s=t.charAt(0),i="",a=0,l=t.length;a<l;){var u=t.charAt(a++),c=u.charCodeAt(),p=void 0;if(c<32||c>126){if(c>=55296&&c<=56319&&a<l){var d=t.charCodeAt(a++);(d&64512)==56320?c=((c&1023)<<10)+(d&1023)+65536:a--}p="\\"+c.toString(16).toUpperCase()+" "}else r.escapeEverything?xf.test(u)?p="\\"+u:p="\\"+c.toString(16).toUpperCase()+" ":/[\t\n\f\r\x0B]/.test(u)?p="\\"+c.toString(16).toUpperCase()+" ":u=="\\"||!o&&(u=='"'&&n==u||u=="'"&&n==u)||o&&Sf.test(u)?p="\\"+u:p=u;i+=p}return o&&(/^-[-\d]/.test(i)?i="\\-"+i.slice(1):/\d/.test(s)&&(i="\\3"+s+" "+i.slice(1))),i=i.replace(Bf,function(f,h,A){return h&&h.length%2?f:(h||"")+A}),!o&&r.wrap?n+i+n:i};Do.options={escapeEverything:!1,isIdentifier:!1,quotes:"single",wrap:!1};Do.version="3.0.0";dl.exports=Do});async function Il(e,t,r,n){let{request:o,url:s}=t,i=o.method.toUpperCase(),a=e[i]??e.ALL;if(!r&&r===!1&&i!=="GET"&&n.warn("router",`${s.pathname} ${Sr(i)} requests are not available for a static site. Update your config to \`output: 'server'\` or \`output: 'hybrid'\` to enable.`),a===void 0)return n.warn("router",`No API Route handler exists for the method "${i}" for the route "${s.pathname}".
Found handlers: ${Object.keys(e).map(u=>JSON.stringify(u)).join(", ")}
`+("all"in e?`One of the exported handlers is "all" (lowercase), did you mean to export 'ALL'?
`:"")),new Response(null,{status:404});if(typeof a!="function")return n.error("router",`The route "${s.pathname}" exports a value for the method "${i}", but it is of the type ${typeof a} instead of a function.`),new Response(null,{status:500});let l=await a.call(e,t);if(!l||!(l instanceof Response))throw new g(Co);if(Vo.includes(l.status))try{l.headers.set(ie,"no")}catch(u){if(u.message?.includes("immutable"))l=new Response(l.body,l),l.headers.set(ie,"no");else throw u}return l}function If(e){return!(e.length!==3||!e[0]||typeof e[0]!="object")}function bl(e,t,r){let n=t?.split("/").pop()?.replace(".astro","")??"",o=(...s)=>{if(!If(s))throw new g({...Tr,message:Tr.message(n)});return e(...s)};return Object.defineProperty(o,"name",{value:n,writable:!1}),o.isAstroComponentFactory=!0,o.moduleId=t,o.propagation=r,o}function bf(e){return bl(e.factory,e.moduleId,e.propagation)}function ot(e,t,r){return typeof e=="function"?bl(e,t,r):bf(e)}function Qf(){return t=>{if(typeof t=="string")throw new g({...Mr,message:Mr.message(JSON.stringify(t))});let r=[...Object.values(t)];if(r.length===0)throw new g({...jr,message:jr.message(JSON.stringify(t))});return Promise.all(r.map(n=>n()))}}function Mt(e){return{site:void 0,generator:`Astro v${Go}`,glob:Qf()}}function Zr(e){return!!e&&typeof e=="object"&&"then"in e&&typeof e.then=="function"}async function*kf(e){let t=e.getReader();try{for(;;){let{done:r,value:n}=await t.read();if(r)return;yield n}}finally{t.releaseLock()}}function Rf(e){return Object.prototype.toString.call(e)==="[object HTMLString]"}function Df(e){return new zr(e)}function Ql(e){return typeof e.getReader=="function"}async function*hl(e){if(Ql(e))for await(let t of kf(e))yield Pt(t);else for await(let t of e)yield Pt(t)}function*Tf(e){for(let t of e)yield Pt(t)}function Pt(e){if(e&&typeof e=="object"){if(e instanceof Uint8Array)return Df(e);if(e instanceof Response&&e.body){let t=e.body;return hl(t)}else{if(typeof e.then=="function")return Promise.resolve(e).then(t=>Pt(t));if(e[Symbol.for("astro:slot-string")])return e;if(Symbol.iterator in e)return Tf(e);if(Symbol.asyncIterator in e||Ql(e))return hl(e)}}return Q(e)}function Al(e){return e&&typeof e=="object"&&e[kl]}function Yr(e){return Object.defineProperty(e,Rl,{value:!0})}function Yo(e){return e&&typeof e=="object"&&e[Rl]}function To(e,t={},r=new WeakSet){if(r.has(e))throw new Error(`Cyclic reference detected while serializing props for <${t.displayName} client:${t.hydrate}>!

Cyclic references cannot be safely serialized for client-side usage. Please remove the cyclic reference.`);r.add(e);let n=e.map(o=>Tl(o,t,r));return r.delete(e),n}function Dl(e,t={},r=new WeakSet){if(r.has(e))throw new Error(`Cyclic reference detected while serializing props for <${t.displayName} client:${t.hydrate}>!

Cyclic references cannot be safely serialized for client-side usage. Please remove the cyclic reference.`);r.add(e);let n=Object.fromEntries(Object.entries(e).map(([o,s])=>[o,Tl(s,t,r)]));return r.delete(e),n}function Tl(e,t={},r=new WeakSet){switch(Object.prototype.toString.call(e)){case"[object Date]":return[V.Date,e.toISOString()];case"[object RegExp]":return[V.RegExp,e.source];case"[object Map]":return[V.Map,To(Array.from(e),t,r)];case"[object Set]":return[V.Set,To(Array.from(e),t,r)];case"[object BigInt]":return[V.BigInt,e.toString()];case"[object URL]":return[V.URL,e.toString()];case"[object Array]":return[V.JSON,To(e,t,r)];case"[object Uint8Array]":return[V.Uint8Array,Array.from(e)];case"[object Uint16Array]":return[V.Uint16Array,Array.from(e)];case"[object Uint32Array]":return[V.Uint32Array,Array.from(e)];default:return e!==null&&typeof e=="object"?[V.Value,Dl(e,t,r)]:e===1/0?[V.Infinity,1]:e===-1/0?[V.Infinity,-1]:e===void 0?[V.Value]:[V.Value,e]}}function Nl(e,t){return JSON.stringify(Dl(e,t))}function Nf(e,t){let r={isPage:!1,hydration:null,props:{},propsWithoutTransitionAttributes:{}};for(let[n,o]of Object.entries(e))if(n.startsWith("server:")&&n==="server:root"&&(r.isPage=!0),n.startsWith("client:"))switch(r.hydration||(r.hydration={directive:"",value:"",componentUrl:"",componentExport:{value:""}}),n){case"client:component-path":{r.hydration.componentUrl=o;break}case"client:component-export":{r.hydration.componentExport.value=o;break}case"client:component-hydration":break;case"client:display-name":break;default:{if(r.hydration.directive=n.split(":")[1],r.hydration.value=o,!t.has(r.hydration.directive)){let s=Array.from(t.keys()).map(i=>`client:${i}`).join(", ");throw new Error(`Error: invalid hydration directive "${n}". Supported hydration methods: ${s}`)}if(r.hydration.directive==="media"&&typeof r.hydration.value!="string")throw new g(Ao);break}}else r.props[n]=o,Ll.includes(n)||(r.propsWithoutTransitionAttributes[n]=o);for(let n of Object.getOwnPropertySymbols(e))r.props[n]=e[n],r.propsWithoutTransitionAttributes[n]=e[n];return r}async function Lf(e,t){let{renderer:r,result:n,astroId:o,props:s,attrs:i}=e,{hydrate:a,componentUrl:l,componentExport:u}=t;if(!u.value)throw new g({...Dr,message:Dr.message(t.displayName)});let c={children:"",props:{uid:o}};if(i)for(let[d,f]of Object.entries(i))c.props[d]=Lt(f);c.props["component-url"]=await n.resolve(decodeURI(l)),r.clientEntrypoint&&(c.props["component-export"]=u.value,c.props["renderer-url"]=await n.resolve(decodeURI(r.clientEntrypoint)),c.props.props=Lt(Nl(s,t))),c.props.ssr="",c.props.client=a;let p=await n.resolve("astro:scripts/before-hydration.js");return p.length&&(c.props["before-hydration-url"]=p),c.props.opts=Lt(JSON.stringify({name:t.displayName,value:t.hydrateArgs||""})),Ll.forEach(d=>{typeof s[d]<"u"&&(c.props[d]=s[d])}),c}function Pf(e){let t=0;if(e.length===0)return t;for(let r=0;r<e.length;r++){let n=e.charCodeAt(r);t=(t<<5)-t+n,t=t&t}return t}function _f(e){let t,r="",n=Pf(e),o=n<0?"Z":"";for(n=Math.abs(n);n>=No;)t=n%No,n=Math.floor(n/No),r=Mo[t]+r;return n>0&&(r=Mo[n]+r),o+r}function Pl(e){return e==null?!1:e.isAstroComponentFactory===!0}function Ff(e,t){let r=t.propagation||"none";return t.moduleId&&e.componentMetadata.has(t.moduleId)&&r==="none"&&(r=e.componentMetadata.get(t.moduleId).propagation),r==="in-tree"||r==="self"}function Wo(e){return typeof e=="object"&&e!==null&&!!e[Mf]}function Uf(e){return e._metadata.hasHydrationScript?!1:e._metadata.hasHydrationScript=!0}function Of(e,t){return e._metadata.hasDirectives.has(t)?!1:(e._metadata.hasDirectives.add(t),!0)}function ml(e,t){let n=e.clientDirectives.get(t);if(!n)throw new Error(`Unknown directive: ${t}`);return n}function Hf(e,t,r){switch(t){case"both":return`${$f}<script>${ml(e,r)};${jf}<\/script>`;case"directive":return`<script>${ml(e,r)}<\/script>`}return""}function Xf(e){let t="";for(let[r,n]of Object.entries(e))t+=`const ${Yf(r)} = ${JSON.stringify(n)?.replace(/<\/script>/g,"\\x3C/script>")};
`;return Q(t)}function Lo(e){return e.length===1?e[0]:`${e.slice(0,-1).join(", ")} or ${e[e.length-1]}`}function je(e,t,r=!0){if(e==null)return"";if(e===!1)return qf.test(t)||Jf.test(t)?Q(` ${t}="false"`):"";if(zf.has(t))return console.warn(`[astro] The "${t}" directive cannot be applied dynamically at runtime. It will not be rendered as an attribute.

Make sure to use the static attribute syntax (\`${t}={value}\`) instead of the dynamic spread syntax (\`{...{ "${t}": value }}\`).`),"";if(t==="class:list"){let n=_e(Io(e),r);return n===""?"":Q(` ${t.slice(0,-5)}="${n}"`)}if(t==="style"&&!(e instanceof Me)){if(Array.isArray(e)&&e.length===2)return Q(` ${t}="${_e(`${gl(e[0])};${e[1]}`,r)}"`);if(typeof e=="object")return Q(` ${t}="${_e(gl(e),r)}"`)}return t==="className"?Q(` class="${_e(e,r)}"`):typeof e=="string"&&e.includes("&")&&nh(e)?Q(` ${t}="${_e(e,!1)}"`):e===!0&&(t.startsWith("data-")||Kf.test(t))?Q(` ${t}`):Q(` ${t}="${_e(e,r)}"`)}function jo(e,t=!0){let r="";for(let[n,o]of Object.entries(e))r+=je(o,n,t);return Q(r)}function Nt(e,{props:t,children:r=""},n=!0){let{lang:o,"data-astro-id":s,"define:vars":i,...a}=t;return i&&(e==="style"&&(delete a["is:global"],delete a["is:scoped"]),e==="script"&&(delete a.hoist,r=Xf(i)+`
`+r)),(r==null||r=="")&&Xo.test(e)?`<${e}${jo(a,n)}>`:`<${e}${jo(a,n)}>${r}</${e}>`}function _l(e){return new $o(e)}function yl(){let e,t;return{promise:new Promise((n,o)=>{e=n,t=o}),resolve:e,reject:t}}function nh(e){try{let t=new URL(e);return rh.includes(t.protocol)}catch{return!1}}function wl(e){e._metadata.hasRenderedHead=!0;let t=Array.from(e.styles).filter(Po).map(s=>s.props.rel==="stylesheet"?Nt("link",s):Nt("style",s));e.styles.clear();let r=Array.from(e.scripts).filter(Po).map(s=>Nt("script",s,!1)),n=Array.from(e.links).filter(Po).map(s=>Nt("link",s,!1)),o=t.join(`
`)+n.join(`
`)+r.join(`
`);if(e._metadata.extraHead.length>0)for(let s of e._metadata.extraHead)o+=s;return Q(o)}function Fl(){return Yr({type:"head"})}function en(){return Yr({type:"maybe-head"})}function Oo(e){return typeof e=="object"&&e!==null&&!!e[Ml]}function se(e,...t){return new Uo(e,t)}function oh(e){return!!e[Ho]}function tn(e,t,r){return!t&&r?tn(e,r):{async render(n){await Fe(n,typeof t=="function"?t(e):t)}}}async function Ie(e,t,r){let n="",o=null,s={write(a){if(a instanceof _t)n+=a,a.instructions&&(o??=[],o.push(...a.instructions));else{if(a instanceof Response)return;typeof a=="object"&&"type"in a&&typeof a.type=="string"?(o===null&&(o=[]),o.push(a)):n+=Be(e,a)}}};return await tn(e,t,r).render(s),Q(new _t(n,o))}async function jl(e,t={}){let r=null,n={};return t&&await Promise.all(Object.entries(t).map(([o,s])=>Ie(e,s).then(i=>{i.instructions&&(r===null&&(r=[]),r.push(...i.instructions)),n[o]=i}))),{slotInstructions:r,children:n}}function $l(e){return function(){return se`${Pt(e)}`}}function Zo(e,t){if(Yo(t)){let r=t;switch(r.type){case"directive":{let{hydration:n}=r,o=n&&Uf(e),s=n&&Of(e,n.directive),i=o?"both":s?"directive":null;if(i){let a=Hf(e,i,n.directive);return Q(a)}else return""}case"head":return e._metadata.hasRenderedHead||e.partial?"":wl(e);case"maybe-head":return e._metadata.hasRenderedHead||e._metadata.headInTree||e.partial?"":wl(e);case"renderer-hydration-script":{let{rendererSpecificHydrationScripts:n}=e._metadata,{rendererName:o}=r;return n.has(o)?"":(n.add(o),r.render())}default:throw new Error(`Unknown chunk type: ${t.type}`)}}else{if(t instanceof Response)return"";if(oh(t)){let r="",n=t;if(n.instructions)for(let o of n.instructions)r+=Zo(e,o);return r+=t.toString(),r}}return t.toString()}function Be(e,t){return ArrayBuffer.isView(t)?ih.decode(t):Zo(e,t)}function Ul(e,t){if(ArrayBuffer.isView(t))return t;{let r=Zo(e,t);return Ft.encode(r.toString())}}function ah(e){return!!e&&typeof e=="object"&&"render"in e&&typeof e.render=="function"}async function Fe(e,t){if(Zr(t)&&(t=await t),t instanceof _t)e.write(t);else if(Rf(t))e.write(t);else if(Array.isArray(t)){let r=t.map(n=>_l(o=>Fe(o,n)));for(let n of r)n&&await n.renderToFinalDestination(e)}else if(typeof t=="function")await Fe(e,t());else if(typeof t=="string")e.write(Q(Lt(t)));else if(!(!t&&t!==0))if(ah(t))await t.render(e);else if(Oo(t))await t.render(e);else if(uh(t))await t.render(e);else if(ArrayBuffer.isView(t))e.write(t);else if(typeof t=="object"&&(Symbol.asyncIterator in t||Symbol.iterator in t))for await(let r of t)await Fe(e,r);else e.write(t)}function lh(e,t){if(e!=null)for(let r of Object.keys(e))r.startsWith("client:")&&console.warn(`You are attempting to render <${t} ${r} />, but ${t} is an Astro component. Astro components do not render in the client and should not have a hydration directive. Please use a framework component for client rendering.`)}function ch(e,t,r,n,o={}){lh(n,t);let s=new Ko(e,n,o,r);return Ff(e,r)&&e._metadata.propagators.add(s),s}function uh(e){return typeof e=="object"&&e!==null&&!!e[Ol]}async function Hl(e,t,r,n,o=!1,s){let i=await ts(e,t,r,n,s);if(i instanceof Response)return i;let a="",l=!1;o&&await rs(e);let u={write(c){if(o&&!l&&(l=!0,!e.partial&&!es.test(String(c)))){let p=e.compressHTML?"<!DOCTYPE html>":`<!DOCTYPE html>
`;a+=p}c instanceof Response||(a+=Be(e,c))}};return await i.render(u),a}async function ph(e,t,r,n,o=!1,s){let i=await ts(e,t,r,n,s);if(i instanceof Response)return i;let a=!1;return o&&await rs(e),new ReadableStream({start(l){let u={write(c){if(o&&!a&&(a=!0,!e.partial&&!es.test(String(c)))){let d=e.compressHTML?"<!DOCTYPE html>":`<!DOCTYPE html>
`;l.enqueue(Ft.encode(d))}if(c instanceof Response)throw new g({...Pe});let p=Ul(e,c);l.enqueue(p)}};(async()=>{try{await i.render(u),l.close()}catch(c){g.is(c)&&!c.loc&&c.setLocation({file:s?.component}),setTimeout(()=>l.error(c),0)}})()},cancel(){e.cancelled=!0}})}async function ts(e,t,r,n,o){let s=await t(e,r,n);if(s instanceof Response)return s;if(Wo(s)){if(!Oo(s.content))throw new g({...Ze,message:Ze.message(o?.route,typeof s),location:{file:o?.component}});return s.content}else if(!Oo(s))throw new g({...Ze,message:Ze.message(o?.route,typeof s),location:{file:o?.component}});return s}async function rs(e){let t=e._metadata.propagators.values();for(;;){let{value:r,done:n}=t.next();if(n)break;let o=await r.init(e);Wo(o)&&e._metadata.extraHead.push(o.head)}}async function dh(e,t,r,n,o=!1,s){let i=await ts(e,t,r,n,s);if(i instanceof Response)return i;let a=!1;o&&await rs(e);let l=null,u=null,c=[],p=!1,d={async next(){if(e.cancelled)return{done:!0,value:void 0};if(u!==null?await u.promise:!p&&!c.length&&(u=yl(),await u.promise),p||(u=yl()),l)throw l;let A=0;for(let k=0,P=c.length;k<P;k++)A+=c[k].length;let E=new Uint8Array(A),C=0;for(let k=0,P=c.length;k<P;k++){let z=c[k];E.set(z,C),C+=z.length}return c.length=0,{done:A===0&&p,value:E}},async return(){return e.cancelled=!0,{done:!0,value:void 0}}},f={write(A){if(o&&!a&&(a=!0,!e.partial&&!es.test(String(A)))){let C=e.compressHTML?"<!DOCTYPE html>":`<!DOCTYPE html>
`;c.push(Ft.encode(C))}if(A instanceof Response)throw new g(Pe);let E=Ul(e,A);E.length>0?(c.push(E),u?.resolve()):c.length>0&&u?.resolve()}};return i.render(f).then(()=>{p=!0,u?.resolve()}).catch(A=>{l=A,p=!0,u?.resolve()}),{[Symbol.asyncIterator](){return d}}}function fh(e){return typeof HTMLElement<"u"&&HTMLElement.isPrototypeOf(e)}async function hh(e,t,r,n){let o=Ah(t),s="";for(let i in r)s+=` ${i}="${_e(await r[i])}"`;return Q(`<${o}${s}>${await Ie(e,n?.default)}</${o}>`)}function Ah(e){let t=customElements.getName(e);return t||e.name.replace(/^HTML|Element$/g,"").replace(/[A-Z]/g,"-$&").toLowerCase().replace(/^-/,"html-")}async function Kl(e){let t=Gr(e);return crypto.subtle.importKey("raw",t,ns,!0,["encrypt","decrypt"])}async function yh(e,t){let r=crypto.getRandomValues(new Uint8Array(qo/2)),n=mh.encode(t),o=await crypto.subtle.encrypt({name:ns,iv:r},e,n);return Qo(r)+Ro(new Uint8Array(o))}async function ql(e,t){let r=ko(t.slice(0,qo)),n=Gr(t.slice(qo)),o=await crypto.subtle.decrypt({name:ns,iv:r},e,n);return gh.decode(o)}function Eh(e){return"server:component-directive"in e}function Vr(e){return JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029").replace(/</g,"\\u003c").replace(/>/g,"\\u003e").replace(/\//g,"\\u002f")}function Ch(e,t,r,n){return{async render(o){let s=r["server:component-path"],i=r["server:component-export"],a=e.serverIslandNameMap.get(s);if(!a)throw new Error("Could not find server component name");for(let h of Object.keys(r))wh.has(h)&&delete r[h];o.write("<!--[if astro]>server-island-start<![endif]-->");let l={};for(let h in n)if(h!=="fallback"){let A=await Ie(e,n[h]);l[h]=A.toString()}else await Fe(o,n.fallback(e));let u=await e.key,c=await yh(u,JSON.stringify(r)),p=crypto.randomUUID(),d=e.base.endsWith("/")?"":"/",f=`${e.base}${d}_server-islands/${a}${e.trailingSlash==="always"?"/":""}`;o.write(`<script async type="module" data-island-id="${p}">
let componentId = ${Vr(a)};
let componentExport = ${Vr(i)};
let script = document.querySelector('script[data-island-id="${p}"]');
let data = {
	componentExport,
	encryptedProps: ${Vr(c)},
	slots: ${Vr(l)},
};

let response = await fetch('${f}', {
	method: 'POST',
	body: JSON.stringify(data),
});
if (script) {
	if(response.status === 200 && response.headers.get('content-type') === 'text/html') {
	let html = await response.text();

	// Swap!
	while(script.previousSibling &&
		script.previousSibling.nodeType !== 8 &&
		script.previousSibling.data !== '[if astro]>server-island-start<![endif]') {
		script.previousSibling.remove();
	}
	script.previousSibling?.remove();

	let frag = document.createRange().createContextualFragment(html);
	script.before(frag);
}
script.remove();
}
<\/script>`)}}}function xh(e){switch(e?.split(".").pop()){case"svelte":return["@astrojs/svelte"];case"vue":return["@astrojs/vue"];case"jsx":case"tsx":return["@astrojs/react","@astrojs/preact","@astrojs/solid-js","@astrojs/vue (jsx)"];case void 0:default:return["@astrojs/react","@astrojs/preact","@astrojs/solid-js","@astrojs/vue","@astrojs/svelte","@astrojs/lit"]}}function Sh(e){return e===sh}function Bh(e){return e&&e["astro:html"]===!0}function Qh(e,t=!0){let r=t?bh:Ih;return e.replace(r,"")}async function kh(e,t,r,n,o={}){if(!r&&!("client:only"in n))throw new Error(`Unable to render ${t} because it is ${r}!
Did you forget to import the component or is it possible there is a typo?`);let{renderers:s,clientDirectives:i}=e,a={astroStaticSlot:!0,displayName:t},{hydration:l,isPage:u,props:c,propsWithoutTransitionAttributes:p}=Nf(n,i),d="",f;l&&(a.hydrate=l.directive,a.hydrateArgs=l.value,a.componentExport=l.componentExport,a.componentUrl=l.componentUrl);let h=xh(a.componentUrl),A=s.filter(v=>v.name!=="astro:jsx"),{children:E,slotInstructions:C}=await jl(e,o),w;if(a.hydrate!=="only"){let v=!1;try{v=r&&r[El]}catch{}if(v){let b=r[El];w=s.find(({name:F})=>F===b)}if(!w){let b;for(let F of s)try{if(await F.ssr.check.call({result:e},r,c,E)){w=F;break}}catch(An){b??=An}if(!w&&b)throw b}if(!w&&typeof HTMLElement=="function"&&fh(r)){let b=await hh(e,r,n,o);return{render(F){F.write(b)}}}}else{if(a.hydrateArgs){let v=tt.has(a.hydrateArgs)?tt.get(a.hydrateArgs):a.hydrateArgs;_o.has(v)&&(w=s.find(({name:b})=>b===`@astrojs/${v}`||b===v))}if(!w&&A.length===1&&(w=A[0]),!w){let v=a.componentUrl?.split(".").pop();w=s.find(({name:b})=>b===`@astrojs/${v}`||b===v)}}if(w)if(a.hydrate==="only"){let v=tt.has(a.hydrateArgs)?tt.get(a.hydrateArgs):a.hydrateArgs;_o.has(v)||console.warn(`The client:only directive for ${a.displayName} is not recognized. The renderer ${w.name} will be used. If you intended to use a different renderer, please provide a valid client:only directive.`),d=await Ie(e,o?.fallback)}else performance.now(),{html:d,attrs:f}=await w.ssr.renderToStaticMarkup.call({result:e},r,p,E,a);else if(a.hydrate==="only"){let v=tt.has(a.hydrateArgs)?tt.get(a.hydrateArgs):a.hydrateArgs;if(_o.has(v)){let b=A.length>1;throw new g({...ve,message:ve.message(a.displayName,a?.componentUrl?.split(".").pop(),b,A.length),hint:ve.hint(Lo(h.map(F=>"`"+F+"`")))})}else throw new g({...Qt,message:Qt.message(a.displayName),hint:Qt.hint(h.map(b=>b.replace("@astrojs/","")).join("|"))})}else if(typeof r!="string"){let v=A.filter(F=>h.includes(F.name)),b=A.length>1;if(v.length===0)throw new g({...ve,message:ve.message(a.displayName,a?.componentUrl?.split(".").pop(),b,A.length),hint:ve.hint(Lo(h.map(F=>"`"+F+"`")))});if(v.length===1)w=v[0],{html:d,attrs:f}=await w.ssr.renderToStaticMarkup.call({result:e},r,p,E,a);else throw new Error(`Unable to render ${a.displayName}!

This component likely uses ${Lo(h)},
but Astro encountered an error during server-side rendering.

Please ensure that ${a.displayName}:
1. Does not unconditionally access browser-specific globals like \`window\` or \`document\`.
   If this is unavoidable, use the \`client:only\` hydration directive.
2. Does not conditionally return \`null\` or \`undefined\` when rendered on the server.

If you're still stuck, please open an issue on GitHub or join us at https://astro.build/chat.`)}if(w&&!w.clientEntrypoint&&w.name!=="@astrojs/lit"&&a.hydrate)throw new g({...Ir,message:Ir.message(t,a.hydrate,w.name)});if(!d&&typeof r=="string"){let v=Rh(r),b=Object.values(E).join(""),F=se`<${v}${jo(c)}${Q(b===""&&Xo.test(v)?"/>":`>${b}</${v}>`)}`;d="";let An={write(bs){bs instanceof Response||(d+=Be(e,bs))}};await F.render(An)}if(!l)return{render(v){if(C)for(let b of C)v.write(b);u||w?.name==="astro:jsx"?v.write(d):d&&d.length>0&&v.write(Q(Qh(d,w?.ssr?.supportsAstroStaticSlot)))}};let k=_f(`<!--${a.componentExport.value}:${a.componentUrl}-->
${d}
${Nl(c,a)}`),P=await Lf({renderer:w,result:e,astroId:k,props:c,attrs:f},a),z=[];if(d){if(Object.keys(E).length>0)for(let v of Object.keys(E)){let b=w?.ssr?.supportsAstroStaticSlot?a.hydrate?"astro-slot":"astro-static-slot":"astro-slot",F=v==="default"?`<${b}>`:`<${b} name="${v}">`;d.includes(F)||z.push(v)}}else z=Object.keys(E);let Ke=z.length>0?z.map(v=>`<template data-astro-template${v!=="default"?`="${v}"`:""}>${E[v]}</template>`).join(""):"";return P.children=`${d??""}${Ke}`,P.children&&(P.props["await-children"]="",P.children+="<!--astro:end-->"),{render(v){if(C)for(let F of C)v.write(F);v.write(Yr({type:"directive",hydration:l})),l.directive!=="only"&&w?.ssr.renderHydrationScript&&v.write(Yr({type:"renderer-hydration-script",rendererName:w.name,render:w.ssr.renderHydrationScript}));let b=Nt("astro-island",P,!1);v.write(Q(b))}}}function Rh(e){let t=/[&<>'"\s]+/;return t.test(e)?e.trim().split(t)[0].trim():e}async function Dh(e,t={}){let r=await Ie(e,t?.default);return{render(n){r!=null&&n.write(r)}}}async function Th(e,t,r,n={}){let{slotInstructions:o,children:s}=await jl(e,n),i=t({slots:s}),a=o?o.map(l=>Be(e,l)).join(""):"";return{render(l){l.write(Q(a+i))}}}function Nh(e,t,r,n,o={}){if(Eh(n))return Ch(e,t,n,o);let s=ch(e,t,r,n,o);return{async render(i){await s.render(i)}}}async function st(e,t,r,n,o={}){if(Zr(r)&&(r=await r.catch(s)),Sh(r))return await Dh(e,o).catch(s);if(n=Lh(n),Bh(r))return await Th(e,r,n,o).catch(s);if(Pl(r))return Nh(e,t,r,n,o);return await kh(e,t,r,n,o).catch(s);function s(i){if(e.cancelled)return{render(){}};throw i}}function Lh(e){if(e["class:list"]!==void 0){let t=e["class:list"];delete e["class:list"],e.class=Io(e.class,t),e.class===""&&delete e.class}return e}async function Jo(e,t,r,n,o={},s=!1,i){let a="",l=!1,u="";s&&!e.partial&&Ph(r)&&(u+=Be(e,en()));try{let c={write(d){if(s&&!e.partial&&!l&&(l=!0,!/<!doctype html/i.test(String(d)))){let f=e.compressHTML?"<!DOCTYPE html>":`<!DOCTYPE html>
`;a+=f+u}d instanceof Response||(a+=Be(e,d))}};await(await st(e,t,r,n,o)).render(c)}catch(c){throw g.is(c)&&!c.loc&&c.setLocation({file:i?.component}),c}return a}function Ph(e){return!!e?.[vh]}async function Se(e,t){switch(!0){case t instanceof Me:return t.toString().trim()===""?"":t;case typeof t=="string":return Q(Lt(t));case typeof t=="function":return t;case(!t&&t!==0):return"";case Array.isArray(t):return Q((await Promise.all(t.map(r=>Se(e,r)))).join(""))}return Jl(e,t)}async function Jl(e,t){if(Al(t)){switch(!0){case!t.type:throw new Error(`Unable to render ${e.pathname} because it contains an undefined Component!
Did you forget to import the component or is it possible there is a typo?`);case t.type===Symbol.for("astro:fragment"):return Se(e,t.props.children);case t.type.isAstroComponentFactory:{let r={},n={};for(let[i,a]of Object.entries(t.props??{}))i==="children"||a&&typeof a=="object"&&a.$$slot?n[i==="children"?"default":i]=()=>Se(e,a):r[i]=a;let o=await Hl(e,t.type,r,n);if(o instanceof Response)throw o;return Q(o)}case(!t.type&&t.type!==0):return"";case(typeof t.type=="string"&&t.type!==Cl):return Q(await _h(e,t.type,t.props??{}))}if(t.type){let r=function(u){if(Array.isArray(u))return u.map(c=>r(c));if(!Al(u)){s.default.push(u);return}if("slot"in u.props){s[u.props.slot]=[...s[u.props.slot]??[],u],delete u.props.slot;return}s.default.push(u)};if(typeof t.type=="function"&&t.props["server:root"]){let u=await t.type(t.props??{});return await Se(e,u)}if(typeof t.type=="function")if(t.props[Fo]){delete t.props[Fo];let u=await t.type(t.props??{});return u?.[kl]||!u?await Jl(e,u):void 0}else t.props[Fo]=!0;let{children:n=null,...o}=t.props??{},s={default:[]};r(n);for(let[u,c]of Object.entries(o))c?.$$slot&&(s[u]=c,delete o[u]);let i=[],a={};for(let[u,c]of Object.entries(s))i.push(Se(e,c).then(p=>{p.toString().trim().length!==0&&(a[u]=()=>p)}));await Promise.all(i);let l;return t.type===Cl&&t.props["client:only"]?l=await Jo(e,t.props["client:display-name"]??"",null,o,a):l=await Jo(e,typeof t.type=="function"?t.type.name:t.type,t.type,o,a),Q(l)}}return Q(`${t}`)}async function _h(e,t,{children:r,...n}){return Q(`<${t}${be(n)}${Q((r==null||r=="")&&Xo.test(t)?"/>":`>${r==null?"":await Se(e,Fh(t,r))}</${t}>`)}`)}function Fh(e,t){return typeof t=="string"&&(e==="style"||e==="script")?Q(t):t}async function Gl(e,t,r,n,o,s){if(!Pl(t)){e._metadata.headInTree=e.componentMetadata.get(t.moduleId)?.containsHead??!1;let c={...r??{},"server:root":!0},p=await Jo(e,t.name,t,c,{},!0,s),d=Ft.encode(p);return new Response(d,{headers:new Headers([["Content-Type","text/html; charset=utf-8"],["Content-Length",d.byteLength.toString()]])})}e._metadata.headInTree=e.componentMetadata.get(t.moduleId)?.containsHead??!1;let i;if(o?eh&&!th?i=await dh(e,t,r,n,!0,s):i=await ph(e,t,r,n,!0,s):i=await Hl(e,t,r,n,!0,s),i instanceof Response)return i;let a=e.response,l=new Headers(a.headers);!o&&typeof i=="string"&&(i=Ft.encode(i),l.set("Content-Length",i.byteLength.toString())),s?.component.endsWith(".md")&&l.set("Content-Type","text/html; charset=utf-8");let u=a.status;return s?.route==="/404"?u=404:s?.route==="/500"&&(u=500),u?new Response(i,{...a,headers:l,status:u}):new Response(i,{...a,headers:l})}function be(e={},t,{class:r}={}){let n="";r&&(typeof e.class<"u"?e.class+=` ${r}`:typeof e["class:list"]<"u"?e["class:list"]=[e["class:list"],r]:e.class=r);for(let[o,s]of Object.entries(e))n+=je(s,o,!0);return Q(n)}var f0,Go,ie,vl,xl,Sl,rt,nt,Vo,Wr,zo,Bl,Xr,Lt,zr,Me,Q,kl,Rl,V,Ll,Mo,No,Mf,jf,$f,Xo,Kf,qf,Jf,Gf,Vf,zf,Yf,_e,Wf,gl,Zf,$o,eh,th,rh,Po,Ml,Uo,Ho,_t,sh,El,Ft,ih,Ol,Ko,es,ns,mh,gh,qo,wh,vh,tt,_o,Ih,bh,Cl,Fo,it=j(()=>{It();Dt();et();bo();pl();f0=Qe(fl(),1),Go="4.16.17",ie="X-Astro-Reroute",vl="X-Astro-Rewrite",xl="yes",Sl="X-Astro-Noop",rt="X-Astro-Route-Type",nt="astro-default-404.astro",Vo=[404,500],Wr=Symbol.for("astro.clientAddress"),zo=Symbol.for("astro.locals"),Bl=Symbol.for("astro.originPathname"),Xr=Symbol.for("astro.responseSent");Lt=Kr,zr=class extends Uint8Array{};Object.defineProperty(zr.prototype,Symbol.toStringTag,{get(){return"HTMLBytes"}});Me=class extends String{get[Symbol.toStringTag](){return"HTMLString"}},Q=e=>e instanceof Me?e:typeof e=="string"?new Me(e):e;kl="astro:jsx";Rl=Symbol.for("astro:render");V={Value:0,JSON:1,RegExp:2,Date:3,Map:4,Set:5,BigInt:6,URL:7,Uint8Array:8,Uint16Array:9,Uint32Array:10,Infinity:11};Ll=Object.freeze(["data-astro-transition-scope","data-astro-transition-persist","data-astro-transition-persist-props"]);Mo="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXY",No=Mo.length;Mf=Symbol.for("astro.headAndContent");jf='(()=>{var A=Object.defineProperty;var g=(i,o,a)=>o in i?A(i,o,{enumerable:!0,configurable:!0,writable:!0,value:a}):i[o]=a;var d=(i,o,a)=>g(i,typeof o!="symbol"?o+"":o,a);{let i={0:t=>m(t),1:t=>a(t),2:t=>new RegExp(t),3:t=>new Date(t),4:t=>new Map(a(t)),5:t=>new Set(a(t)),6:t=>BigInt(t),7:t=>new URL(t),8:t=>new Uint8Array(t),9:t=>new Uint16Array(t),10:t=>new Uint32Array(t),11:t=>1/0*t},o=t=>{let[l,e]=t;return l in i?i[l](e):void 0},a=t=>t.map(o),m=t=>typeof t!="object"||t===null?t:Object.fromEntries(Object.entries(t).map(([l,e])=>[l,o(e)]));class y extends HTMLElement{constructor(){super(...arguments);d(this,"Component");d(this,"hydrator");d(this,"hydrate",async()=>{var b;if(!this.hydrator||!this.isConnected)return;let e=(b=this.parentElement)==null?void 0:b.closest("astro-island[ssr]");if(e){e.addEventListener("astro:hydrate",this.hydrate,{once:!0});return}let c=this.querySelectorAll("astro-slot"),n={},h=this.querySelectorAll("template[data-astro-template]");for(let r of h){let s=r.closest(this.tagName);s!=null&&s.isSameNode(this)&&(n[r.getAttribute("data-astro-template")||"default"]=r.innerHTML,r.remove())}for(let r of c){let s=r.closest(this.tagName);s!=null&&s.isSameNode(this)&&(n[r.getAttribute("name")||"default"]=r.innerHTML)}let p;try{p=this.hasAttribute("props")?m(JSON.parse(this.getAttribute("props"))):{}}catch(r){let s=this.getAttribute("component-url")||"<unknown>",v=this.getAttribute("component-export");throw v&&(s+=` (export ${v})`),console.error(`[hydrate] Error parsing props for component ${s}`,this.getAttribute("props"),r),r}let u;await this.hydrator(this)(this.Component,p,n,{client:this.getAttribute("client")}),this.removeAttribute("ssr"),this.dispatchEvent(new CustomEvent("astro:hydrate"))});d(this,"unmount",()=>{this.isConnected||this.dispatchEvent(new CustomEvent("astro:unmount"))})}disconnectedCallback(){document.removeEventListener("astro:after-swap",this.unmount),document.addEventListener("astro:after-swap",this.unmount,{once:!0})}connectedCallback(){if(!this.hasAttribute("await-children")||document.readyState==="interactive"||document.readyState==="complete")this.childrenConnectedCallback();else{let e=()=>{document.removeEventListener("DOMContentLoaded",e),c.disconnect(),this.childrenConnectedCallback()},c=new MutationObserver(()=>{var n;((n=this.lastChild)==null?void 0:n.nodeType)===Node.COMMENT_NODE&&this.lastChild.nodeValue==="astro:end"&&(this.lastChild.remove(),e())});c.observe(this,{childList:!0}),document.addEventListener("DOMContentLoaded",e)}}async childrenConnectedCallback(){let e=this.getAttribute("before-hydration-url");e&&await import(e),this.start()}async start(){let e=JSON.parse(this.getAttribute("opts")),c=this.getAttribute("client");if(Astro[c]===void 0){window.addEventListener(`astro:${c}`,()=>this.start(),{once:!0});return}try{await Astro[c](async()=>{let n=this.getAttribute("renderer-url"),[h,{default:p}]=await Promise.all([import(this.getAttribute("component-url")),n?import(n):()=>()=>{}]),u=this.getAttribute("component-export")||"default";if(!u.includes("."))this.Component=h[u];else{this.Component=h;for(let f of u.split("."))this.Component=this.Component[f]}return this.hydrator=p,this.hydrate},e,this)}catch(n){console.error(`[astro-island] Error hydrating ${this.getAttribute("component-url")}`,n)}}attributeChangedCallback(){this.hydrate()}}d(y,"observedAttributes",["props"]),customElements.get("astro-island")||customElements.define("astro-island",y)}})();',$f="<style>astro-island,astro-slot,astro-static-slot{display:contents}</style>";Xo=/^(area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/i,Kf=/^(?:allowfullscreen|async|autofocus|autoplay|checked|controls|default|defer|disabled|disablepictureinpicture|disableremoteplayback|formnovalidate|hidden|loop|nomodule|novalidate|open|playsinline|readonly|required|reversed|scoped|seamless|selected|itemscope)$/i,qf=/^(?:contenteditable|draggable|spellcheck|value)$/i,Jf=/^(?:autoReverse|externalResourcesRequired|focusable|preserveAlpha)$/i,Gf=/&/g,Vf=/"/g,zf=new Set(["set:html","set:text"]),Yf=e=>e.trim().replace(/(?!^)\b\w|\s+|\W+/g,(t,r)=>/\W/.test(t)?"":r===0?t:t.toUpperCase()),_e=(e,t=!0)=>t?String(e).replace(Gf,"&#38;").replace(Vf,"&#34;"):e,Wf=e=>e.toLowerCase()===e?e:e.replace(/[A-Z]/g,t=>`-${t.toLowerCase()}`),gl=e=>Object.entries(e).filter(([t,r])=>typeof r=="string"&&r.trim()||typeof r=="number").map(([t,r])=>t[0]!=="-"&&t[1]!=="-"?`${Wf(t)}:${r}`:`${t}:${r}`).join(";");Zf=()=>{},$o=class{chunks=[];renderPromise;destination;constructor(t){this.renderPromise=t(this),Promise.resolve(this.renderPromise).catch(Zf)}write(t){this.destination?this.destination.write(t):this.chunks.push(t)}async renderToFinalDestination(t){for(let r of this.chunks)t.write(r);this.destination=t,await this.renderPromise}};eh=typeof process<"u"&&Object.prototype.toString.call(process)==="[object process]",th=typeof Deno<"u";rh=["http:","https:"];Po=(e,t,r)=>{let n=JSON.stringify(e.props),o=e.children;return t===r.findIndex(s=>JSON.stringify(s.props)===n&&s.children==o)};Ml=Symbol.for("astro.renderTemplateResult"),Uo=class{[Ml]=!0;htmlParts;expressions;error;constructor(t,r){this.htmlParts=t,this.error=void 0,this.expressions=r.map(n=>Zr(n)?Promise.resolve(n).catch(o=>{if(!this.error)throw this.error=o,o}):n)}async render(t){let r=this.expressions.map(n=>_l(o=>{if(n||n===0)return Fe(o,n)}));for(let n=0;n<this.htmlParts.length;n++){let o=this.htmlParts[n],s=r[n];t.write(Q(o)),s&&await s.renderToFinalDestination(t)}}};Ho=Symbol.for("astro:slot-string"),_t=class extends Me{instructions;[Ho];constructor(t,r){super(t),this.instructions=r,this[Ho]=!0}};sh=Symbol.for("astro:fragment"),El=Symbol.for("astro:renderer"),Ft=new TextEncoder,ih=new TextDecoder;Ol=Symbol.for("astro.componentInstance"),Ko=class{[Ol]=!0;result;props;slotValues;factory;returnValue;constructor(t,r,n,o){this.result=t,this.props=r,this.factory=o,this.slotValues={};for(let s in n){let i=!1,a=n[s](t);this.slotValues[s]=()=>i?n[s](t):(i=!0,a)}}async init(t){return this.returnValue!==void 0?this.returnValue:(this.returnValue=this.factory(t,this.props,this.slotValues),Zr(this.returnValue)&&this.returnValue.then(r=>{this.returnValue=r}).catch(()=>{}),this.returnValue)}async render(t){let r=await this.init(this.result);Wo(r)?await r.content.render(t):await Fe(t,r)}};es=/<!doctype html/i;ns="AES-GCM";mh=new TextEncoder,gh=new TextDecoder,qo=24;wh=new Set(["server:component-path","server:component-export","server:component-directive","server:defer"]);vh=Symbol.for("astro.needsHeadRendering"),tt=new Map([["solid","solid-js"]]),_o=new Set(["solid-js","react","preact","vue","svelte","lit"]);Ih=/<\/?astro-slot\b[^>]*>/g,bh=/<\/?astro-static-slot\b[^>]*>/g;Cl="astro-client-only",Fo=Symbol("hasTriedRenderComponent");"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_".split("").reduce((e,t)=>(e[t.charCodeAt(0)]=t,e),[]);"-0123456789_".split("").reduce((e,t)=>(e[t.charCodeAt(0)]=t,e),[])});var ss=pe(os=>{"use strict";os.parse=Hh;os.serialize=Kh;var Mh=Object.prototype.toString,jh=/^[!#$%&'*+\-.^_`|~0-9A-Za-z]+$/,$h=/^("?)[\u0021\u0023-\u002B\u002D-\u003A\u003C-\u005B\u005D-\u007E]*\1$/,Uh=/^([.]?[a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)([.][a-z0-9]([a-z0-9-]{0,61}[a-z0-9])?)*$/i,Oh=/^[\u0020-\u003A\u003D-\u007E]*$/;function Hh(e,t){if(typeof e!="string")throw new TypeError("argument str must be a string");var r={},n=e.length;if(n<2)return r;var o=t&&t.decode||qh,s=0,i=0,a=0;do{if(i=e.indexOf("=",s),i===-1)break;if(a=e.indexOf(";",s),a===-1)a=n;else if(i>a){s=e.lastIndexOf(";",i-1)+1;continue}var l=Vl(e,s,i),u=zl(e,i,l),c=e.slice(l,u);if(!r.hasOwnProperty(c)){var p=Vl(e,i+1,a),d=zl(e,a,p);e.charCodeAt(p)===34&&e.charCodeAt(d-1)===34&&(p++,d--);var f=e.slice(p,d);r[c]=Gh(f,o)}s=a+1}while(s<n);return r}function Vl(e,t,r){do{var n=e.charCodeAt(t);if(n!==32&&n!==9)return t}while(++t<r);return r}function zl(e,t,r){for(;t>r;){var n=e.charCodeAt(--t);if(n!==32&&n!==9)return t+1}return r}function Kh(e,t,r){var n=r&&r.encode||encodeURIComponent;if(typeof n!="function")throw new TypeError("option encode is invalid");if(!jh.test(e))throw new TypeError("argument name is invalid");var o=n(t);if(!$h.test(o))throw new TypeError("argument val is invalid");var s=e+"="+o;if(!r)return s;if(r.maxAge!=null){var i=Math.floor(r.maxAge);if(!isFinite(i))throw new TypeError("option maxAge is invalid");s+="; Max-Age="+i}if(r.domain){if(!Uh.test(r.domain))throw new TypeError("option domain is invalid");s+="; Domain="+r.domain}if(r.path){if(!Oh.test(r.path))throw new TypeError("option path is invalid");s+="; Path="+r.path}if(r.expires){var a=r.expires;if(!Jh(a)||isNaN(a.valueOf()))throw new TypeError("option expires is invalid");s+="; Expires="+a.toUTCString()}if(r.httpOnly&&(s+="; HttpOnly"),r.secure&&(s+="; Secure"),r.partitioned&&(s+="; Partitioned"),r.priority){var l=typeof r.priority=="string"?r.priority.toLowerCase():r.priority;switch(l){case"low":s+="; Priority=Low";break;case"medium":s+="; Priority=Medium";break;case"high":s+="; Priority=High";break;default:throw new TypeError("option priority is invalid")}}if(r.sameSite){var u=typeof r.sameSite=="string"?r.sameSite.toLowerCase():r.sameSite;switch(u){case!0:s+="; SameSite=Strict";break;case"lax":s+="; SameSite=Lax";break;case"strict":s+="; SameSite=Strict";break;case"none":s+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}}return s}function qh(e){return e.indexOf("%")!==-1?decodeURIComponent(e):e}function Jh(e){return Mh.call(e)==="[object Date]"}function Gh(e,t){try{return t(e)}catch{return e}}});function xs(e){let t=(""+e).trim().toLowerCase(),r=t.lastIndexOf(".");return um[~r?t.substring(++r):t]}var um,Ic=j(()=>{um={"3g2":"video/3gpp2","3gp":"video/3gpp","3gpp":"video/3gpp","3mf":"model/3mf",aac:"audio/aac",ac:"application/pkix-attr-cert",adp:"audio/adpcm",adts:"audio/aac",ai:"application/postscript",aml:"application/automationml-aml+xml",amlx:"application/automationml-amlx+zip",amr:"audio/amr",apng:"image/apng",appcache:"text/cache-manifest",appinstaller:"application/appinstaller",appx:"application/appx",appxbundle:"application/appxbundle",asc:"application/pgp-keys",atom:"application/atom+xml",atomcat:"application/atomcat+xml",atomdeleted:"application/atomdeleted+xml",atomsvc:"application/atomsvc+xml",au:"audio/basic",avci:"image/avci",avcs:"image/avcs",avif:"image/avif",aw:"application/applixware",bdoc:"application/bdoc",bin:"application/octet-stream",bmp:"image/bmp",bpk:"application/octet-stream",btf:"image/prs.btif",btif:"image/prs.btif",buffer:"application/octet-stream",ccxml:"application/ccxml+xml",cdfx:"application/cdfx+xml",cdmia:"application/cdmi-capability",cdmic:"application/cdmi-container",cdmid:"application/cdmi-domain",cdmio:"application/cdmi-object",cdmiq:"application/cdmi-queue",cer:"application/pkix-cert",cgm:"image/cgm",cjs:"application/node",class:"application/java-vm",coffee:"text/coffeescript",conf:"text/plain",cpl:"application/cpl+xml",cpt:"application/mac-compactpro",crl:"application/pkix-crl",css:"text/css",csv:"text/csv",cu:"application/cu-seeme",cwl:"application/cwl",cww:"application/prs.cww",davmount:"application/davmount+xml",dbk:"application/docbook+xml",deb:"application/octet-stream",def:"text/plain",deploy:"application/octet-stream",dib:"image/bmp","disposition-notification":"message/disposition-notification",dist:"application/octet-stream",distz:"application/octet-stream",dll:"application/octet-stream",dmg:"application/octet-stream",dms:"application/octet-stream",doc:"application/msword",dot:"application/msword",dpx:"image/dpx",drle:"image/dicom-rle",dsc:"text/prs.lines.tag",dssc:"application/dssc+der",dtd:"application/xml-dtd",dump:"application/octet-stream",dwd:"application/atsc-dwd+xml",ear:"application/java-archive",ecma:"application/ecmascript",elc:"application/octet-stream",emf:"image/emf",eml:"message/rfc822",emma:"application/emma+xml",emotionml:"application/emotionml+xml",eps:"application/postscript",epub:"application/epub+zip",exe:"application/octet-stream",exi:"application/exi",exp:"application/express",exr:"image/aces",ez:"application/andrew-inset",fdf:"application/fdf",fdt:"application/fdt+xml",fits:"image/fits",g3:"image/g3fax",gbr:"application/rpki-ghostbusters",geojson:"application/geo+json",gif:"image/gif",glb:"model/gltf-binary",gltf:"model/gltf+json",gml:"application/gml+xml",gpx:"application/gpx+xml",gram:"application/srgs",grxml:"application/srgs+xml",gxf:"application/gxf",gz:"application/gzip",h261:"video/h261",h263:"video/h263",h264:"video/h264",heic:"image/heic",heics:"image/heic-sequence",heif:"image/heif",heifs:"image/heif-sequence",hej2:"image/hej2k",held:"application/atsc-held+xml",hjson:"application/hjson",hlp:"application/winhlp",hqx:"application/mac-binhex40",hsj2:"image/hsj2",htm:"text/html",html:"text/html",ics:"text/calendar",ief:"image/ief",ifb:"text/calendar",iges:"model/iges",igs:"model/iges",img:"application/octet-stream",in:"text/plain",ini:"text/plain",ink:"application/inkml+xml",inkml:"application/inkml+xml",ipfix:"application/ipfix",iso:"application/octet-stream",its:"application/its+xml",jade:"text/jade",jar:"application/java-archive",jhc:"image/jphc",jls:"image/jls",jp2:"image/jp2",jpe:"image/jpeg",jpeg:"image/jpeg",jpf:"image/jpx",jpg:"image/jpeg",jpg2:"image/jp2",jpgm:"image/jpm",jpgv:"video/jpeg",jph:"image/jph",jpm:"image/jpm",jpx:"image/jpx",js:"text/javascript",json:"application/json",json5:"application/json5",jsonld:"application/ld+json",jsonml:"application/jsonml+json",jsx:"text/jsx",jt:"model/jt",jxr:"image/jxr",jxra:"image/jxra",jxrs:"image/jxrs",jxs:"image/jxs",jxsc:"image/jxsc",jxsi:"image/jxsi",jxss:"image/jxss",kar:"audio/midi",ktx:"image/ktx",ktx2:"image/ktx2",less:"text/less",lgr:"application/lgr+xml",list:"text/plain",litcoffee:"text/coffeescript",log:"text/plain",lostxml:"application/lost+xml",lrf:"application/octet-stream",m1v:"video/mpeg",m21:"application/mp21",m2a:"audio/mpeg",m2v:"video/mpeg",m3a:"audio/mpeg",m4a:"audio/mp4",m4p:"application/mp4",m4s:"video/iso.segment",ma:"application/mathematica",mads:"application/mads+xml",maei:"application/mmt-aei+xml",man:"text/troff",manifest:"text/cache-manifest",map:"application/json",mar:"application/octet-stream",markdown:"text/markdown",mathml:"application/mathml+xml",mb:"application/mathematica",mbox:"application/mbox",md:"text/markdown",mdx:"text/mdx",me:"text/troff",mesh:"model/mesh",meta4:"application/metalink4+xml",metalink:"application/metalink+xml",mets:"application/mets+xml",mft:"application/rpki-manifest",mid:"audio/midi",midi:"audio/midi",mime:"message/rfc822",mj2:"video/mj2",mjp2:"video/mj2",mjs:"text/javascript",mml:"text/mathml",mods:"application/mods+xml",mov:"video/quicktime",mp2:"audio/mpeg",mp21:"application/mp21",mp2a:"audio/mpeg",mp3:"audio/mpeg",mp4:"video/mp4",mp4a:"audio/mp4",mp4s:"application/mp4",mp4v:"video/mp4",mpd:"application/dash+xml",mpe:"video/mpeg",mpeg:"video/mpeg",mpf:"application/media-policy-dataset+xml",mpg:"video/mpeg",mpg4:"video/mp4",mpga:"audio/mpeg",mpp:"application/dash-patch+xml",mrc:"application/marc",mrcx:"application/marcxml+xml",ms:"text/troff",mscml:"application/mediaservercontrol+xml",msh:"model/mesh",msi:"application/octet-stream",msix:"application/msix",msixbundle:"application/msixbundle",msm:"application/octet-stream",msp:"application/octet-stream",mtl:"model/mtl",musd:"application/mmt-usd+xml",mxf:"application/mxf",mxmf:"audio/mobile-xmf",mxml:"application/xv+xml",n3:"text/n3",nb:"application/mathematica",nq:"application/n-quads",nt:"application/n-triples",obj:"model/obj",oda:"application/oda",oga:"audio/ogg",ogg:"audio/ogg",ogv:"video/ogg",ogx:"application/ogg",omdoc:"application/omdoc+xml",onepkg:"application/onenote",onetmp:"application/onenote",onetoc:"application/onenote",onetoc2:"application/onenote",opf:"application/oebps-package+xml",opus:"audio/ogg",otf:"font/otf",owl:"application/rdf+xml",oxps:"application/oxps",p10:"application/pkcs10",p7c:"application/pkcs7-mime",p7m:"application/pkcs7-mime",p7s:"application/pkcs7-signature",p8:"application/pkcs8",pdf:"application/pdf",pfr:"application/font-tdpfr",pgp:"application/pgp-encrypted",pkg:"application/octet-stream",pki:"application/pkixcmp",pkipath:"application/pkix-pkipath",pls:"application/pls+xml",png:"image/png",prc:"model/prc",prf:"application/pics-rules",provx:"application/provenance+xml",ps:"application/postscript",pskcxml:"application/pskc+xml",pti:"image/prs.pti",qt:"video/quicktime",raml:"application/raml+yaml",rapd:"application/route-apd+xml",rdf:"application/rdf+xml",relo:"application/p2p-overlay+xml",rif:"application/reginfo+xml",rl:"application/resource-lists+xml",rld:"application/resource-lists-diff+xml",rmi:"audio/midi",rnc:"application/relax-ng-compact-syntax",rng:"application/xml",roa:"application/rpki-roa",roff:"text/troff",rq:"application/sparql-query",rs:"application/rls-services+xml",rsat:"application/atsc-rsat+xml",rsd:"application/rsd+xml",rsheet:"application/urc-ressheet+xml",rss:"application/rss+xml",rtf:"text/rtf",rtx:"text/richtext",rusd:"application/route-usd+xml",s3m:"audio/s3m",sbml:"application/sbml+xml",scq:"application/scvp-cv-request",scs:"application/scvp-cv-response",sdp:"application/sdp",senmlx:"application/senml+xml",sensmlx:"application/sensml+xml",ser:"application/java-serialized-object",setpay:"application/set-payment-initiation",setreg:"application/set-registration-initiation",sgi:"image/sgi",sgm:"text/sgml",sgml:"text/sgml",shex:"text/shex",shf:"application/shf+xml",shtml:"text/html",sieve:"application/sieve",sig:"application/pgp-signature",sil:"audio/silk",silo:"model/mesh",siv:"application/sieve",slim:"text/slim",slm:"text/slim",sls:"application/route-s-tsid+xml",smi:"application/smil+xml",smil:"application/smil+xml",snd:"audio/basic",so:"application/octet-stream",spdx:"text/spdx",spp:"application/scvp-vp-response",spq:"application/scvp-vp-request",spx:"audio/ogg",sql:"application/sql",sru:"application/sru+xml",srx:"application/sparql-results+xml",ssdl:"application/ssdl+xml",ssml:"application/ssml+xml",stk:"application/hyperstudio",stl:"model/stl",stpx:"model/step+xml",stpxz:"model/step-xml+zip",stpz:"model/step+zip",styl:"text/stylus",stylus:"text/stylus",svg:"image/svg+xml",svgz:"image/svg+xml",swidtag:"application/swid+xml",t:"text/troff",t38:"image/t38",td:"application/urc-targetdesc+xml",tei:"application/tei+xml",teicorpus:"application/tei+xml",text:"text/plain",tfi:"application/thraud+xml",tfx:"image/tiff-fx",tif:"image/tiff",tiff:"image/tiff",toml:"application/toml",tr:"text/troff",trig:"application/trig",ts:"video/mp2t",tsd:"application/timestamped-data",tsv:"text/tab-separated-values",ttc:"font/collection",ttf:"font/ttf",ttl:"text/turtle",ttml:"application/ttml+xml",txt:"text/plain",u3d:"model/u3d",u8dsn:"message/global-delivery-status",u8hdr:"message/global-headers",u8mdn:"message/global-disposition-notification",u8msg:"message/global",ubj:"application/ubjson",uri:"text/uri-list",uris:"text/uri-list",urls:"text/uri-list",vcard:"text/vcard",vrml:"model/vrml",vtt:"text/vtt",vxml:"application/voicexml+xml",war:"application/java-archive",wasm:"application/wasm",wav:"audio/wav",weba:"audio/webm",webm:"video/webm",webmanifest:"application/manifest+json",webp:"image/webp",wgsl:"text/wgsl",wgt:"application/widget",wif:"application/watcherinfo+xml",wmf:"image/wmf",woff:"font/woff",woff2:"font/woff2",wrl:"model/vrml",wsdl:"application/wsdl+xml",wspolicy:"application/wspolicy+xml",x3d:"model/x3d+xml",x3db:"model/x3d+fastinfoset",x3dbz:"model/x3d+binary",x3dv:"model/x3d-vrml",x3dvz:"model/x3d+vrml",x3dz:"model/x3d+xml",xaml:"application/xaml+xml",xav:"application/xcap-att+xml",xca:"application/xcap-caps+xml",xcs:"application/calendar+xml",xdf:"application/xcap-diff+xml",xdssc:"application/dssc+xml",xel:"application/xcap-el+xml",xenc:"application/xenc+xml",xer:"application/patch-ops-error+xml",xfdf:"application/xfdf",xht:"application/xhtml+xml",xhtml:"application/xhtml+xml",xhvml:"application/xv+xml",xlf:"application/xliff+xml",xm:"audio/xm",xml:"text/xml",xns:"application/xcap-ns+xml",xop:"application/xop+xml",xpl:"application/xproc+xml",xsd:"application/xml",xsf:"application/prs.xsf+xml",xsl:"application/xml",xslt:"application/xml",xspf:"application/xspf+xml",xvm:"application/xv+xml",xvml:"application/xv+xml",yaml:"text/yaml",yang:"application/yang",yin:"application/yin+xml",yml:"text/yaml",zip:"application/zip"}});var Oc={};ut(Oc,{page:()=>Lg,renderers:()=>Ye});function dm(e){return e.fsPath&&!("fsPath"in e)}function ae(e,t,r,n){r=r||0;let o=n?"BE":"LE",s="readUInt"+t+o;return Am[s](e,r)}function mm(e,t){if(e.length-t<4)return;let r=_(e,t);if(!(e.length-t<r))return{name:L(e,4+t,8+t),offset:t,size:r}}function Ue(e,t,r){for(;r<e.length;){let n=mm(e,r);if(!n)break;if(n.name===t)return n;r+=n.size}}function kc(e,t){let r=e[t];return r===0?256:r}function Rc(e,t){let r=wm+t*Em;return{height:kc(e,r+1),width:kc(e,r)}}function Im(e,t,r){let n={};for(let o=t;o<=r;o+=4){let s=L(e,o,o+4);s in Mc&&(n[s]=1)}if("avif"in n)return"avif";if("heic"in n||"heix"in n||"hevc"in n||"hevx"in n)return"heic";if("mif1"in n||"msf1"in n)return"heif"}function Dc(e,t){let r=t+Rm;return[L(e,t,r),_(e,r)]}function Tc(e){let t=Dm[e];return{width:t,height:t,type:e}}function Um(e){return ct(e,2,6)===Pm}function Om(e,t){return{height:pn(e,t),width:pn(e,t+2)}}function Hm(e,t){let n=Bs+8,o=ae(e,16,n,t);for(let s=0;s<o;s++){let i=n+$m+s*Nc,a=i+Nc;if(i>e.length)return;let l=e.slice(i,a);if(ae(l,16,0,t)===274)return ae(l,16,2,t)!==3||ae(l,32,4,t)!==1?void 0:ae(l,16,8,t)}}function Km(e,t){let r=e.slice(_m,t),n=ct(r,Bs,Bs+Fm),o=n===Mm;if(o||n===jm)return Hm(r,o)}function qm(e,t){if(t>e.length)throw new TypeError("Corrupt JPG, exceeded buffer limits")}function dn(e){let t=Zm.exec(e);if(t)return Math.round(Number(t[1])*($c[t[2]]||1))}function eg(e){let t=e.split(" ");return{height:dn(t[3]),width:dn(t[2])}}function tg(e){let t=cn.width.exec(e),r=cn.height.exec(e),n=cn.viewbox.exec(e);return{height:r&&dn(r[2]),viewbox:n&&eg(n[2]),width:t&&dn(t[2])}}function rg(e){return{height:e.height,width:e.width}}function ng(e,t){let r=t.width/t.height;return e.width?{height:Math.floor(e.width/r),width:e.width}:e.height?{height:e.height,width:Math.floor(e.height*r)}:{height:t.height,width:t.width}}function ig(e,t){let r=ae(e,32,4,t);return e.slice(r+2)}function ag(e,t){let r=ae(e,16,8,t);return(ae(e,16,10,t)<<16)+r}function lg(e){if(e.length>24)return e.slice(12)}function cg(e,t){let r={},n=e;for(;n&&n.length;){let o=ae(n,16,0,t),s=ae(n,16,2,t),i=ae(n,32,4,t);if(o===0)break;i===1&&(s===3||s===4)&&(r[o]=ag(n,t)),n=lg(n)}return r}function ug(e){let t=L(e,0,2);if(t==="II")return"LE";if(t==="MM")return"BE"}function fg(e){return{height:1+Qc(e,7),width:1+Qc(e,4)}}function hg(e){return{height:1+((e[4]&15)<<10|e[3]<<2|(e[2]&192)>>6),width:1+((e[2]&63)<<8|e[1])}}function Ag(e){return{height:bc(e,8)&16383,width:bc(e,6)&16383}}function wg(e){let t=e[0],r=yg.get(t);return r&&fn.get(r).validate(e)?r:gg.find(n=>fn.get(n).validate(e))}function Cg(e){let t=wg(e);if(typeof t<"u"){if(Eg.disabledTypes.includes(t))throw new TypeError("disabled file type: "+t);let r=fn.get(t).calculate(e);if(r!==void 0)return r.type=r.type??t,r}throw new TypeError("unsupported file type: "+t)}async function vg(e,t){try{let r=Cg(e);if(!r.height||!r.width||!r.type)throw new g({...xe,message:xe.message(t)});let{width:n,height:o,type:s,orientation:i}=r,a=(i||0)>=5;return{width:a?o:n,height:a?n:o,format:s,orientation:i}}catch{throw new g({...xe,message:xe.message(t)})}}async function xg(e){let t=await fetch(e);if(!t.body||!t.ok)throw new g({...Pr,message:Pr.message(e)});let r=t.body.getReader(),n,o,s=new Uint8Array;for(;!n;){let i=await r.read();if(n=i.done,n)break;if(i.value){o=i.value;let a=new Uint8Array(s.length+o.length);a.set(s,0),a.set(o,s.length),s=a;try{let l=await vg(s,e);if(l)return await r.cancel(),l}catch{}}}throw new g({...xe,message:xe.message(e)})}async function Uc(){if(!globalThis?.astroAsset?.imageService){let{default:e}=await Promise.resolve().then(()=>(Dt(),nl)).then(t=>t.K).catch(t=>{let r=new g(yo);throw r.cause=t,r});return globalThis.astroAsset||(globalThis.astroAsset={}),globalThis.astroAsset.imageService=e,e}return globalThis.astroAsset.imageService}async function Sg(e,t){if(!e||typeof e!="object")throw new g({..._r,message:_r.message(JSON.stringify(e))});if(typeof e.src>"u")throw new g({...Xe,message:Xe.message(e.src,"undefined",JSON.stringify(e))});if(dm(e))throw new g(wo);let r=await Uc(),n={...e,src:await Or(e.src)};if(e.inferSize&&Ur(n.src)&&We(n.src)){let c=await xg(n.src);n.width??=c.width,n.height??=c.height,delete n.inferSize}let o=me(n.src)?n.src.fsPath:void 0,s=me(n.src)?n.src.clone??n.src:n.src;n.src=s;let i=r.validateOptions?await r.validateOptions(n,t):n,a=r.getSrcSet?await r.getSrcSet(i,t):[],l=await r.getURL(i,t),u=await Promise.all(a.map(async c=>({transform:c.transform,url:await r.getURL(c.transform,t),descriptor:c.descriptor,attributes:c.attributes})));if(Bo(r)&&globalThis.astroAsset.addStaticImage&&!(Ur(i.src)&&l===i.src)){let c=r.propertiesToHash??$r;l=globalThis.astroAsset.addStaticImage(i,c,o),u=a.map(p=>({transform:p.transform,url:globalThis.astroAsset.addStaticImage(p.transform,c,o),descriptor:p.descriptor,attributes:p.attributes}))}return{rawOptions:n,options:i,src:l,srcSet:{values:u,attribute:u.map(c=>`${c.url} ${c.descriptor}`).join(", ")},attributes:r.getHTMLAttributes!==void 0?await r.getHTMLAttributes(i,t):{}}}async function Dg(e,t){try{let r=await fetch(e,{headers:t});return r.ok?await r.arrayBuffer():void 0}catch{return}}var fm,L,ct,bc,pn,X,Qc,hm,_,Oe,Am,gm,ym,wm,Em,Fc,Cm,vm,xm,Sm,Bm,Mc,bm,Qm,km,Rm,Dm,Tm,Nm,Lm,Pm,_m,Bs,Fm,Mm,jm,Nc,$m,Jm,Gm,Vm,zm,Lc,Ym,Pc,_c,Wm,Xm,jc,cn,Ss,$c,Zm,og,sg,pg,dg,mg,fn,gg,yg,Eg,Bg,Ig,bg,Qg,un,Is,kg,Rg,Tg,Ng,Lg,Hc=j(()=>{Bt();Dt();it();et();Ic();vr();fm=new TextDecoder,L=(e,t=0,r=e.length)=>fm.decode(e.slice(t,r)),ct=(e,t=0,r=e.length)=>e.slice(t,r).reduce((n,o)=>n+("0"+o.toString(16)).slice(-2),""),bc=(e,t=0)=>{let r=e[t]+e[t+1]*256;return r|(r&2**15)*131070},pn=(e,t=0)=>e[t]*2**8+e[t+1],X=(e,t=0)=>e[t]+e[t+1]*2**8,Qc=(e,t=0)=>e[t]+e[t+1]*2**8+e[t+2]*2**16,hm=(e,t=0)=>e[t]+e[t+1]*2**8+e[t+2]*2**16+(e[t+3]<<24),_=(e,t=0)=>e[t]*2**24+e[t+1]*2**16+e[t+2]*2**8+e[t+3],Oe=(e,t=0)=>e[t]+e[t+1]*2**8+e[t+2]*2**16+e[t+3]*2**24,Am={readUInt16BE:pn,readUInt16LE:X,readUInt32BE:_,readUInt32LE:Oe};gm={validate:e=>L(e,0,2)==="BM",calculate:e=>({height:Math.abs(hm(e,22)),width:Oe(e,18)})},ym=1,wm=6,Em=16;Fc={validate(e){let t=X(e,0),r=X(e,4);return t!==0||r===0?!1:X(e,2)===ym},calculate(e){let t=X(e,4),r=Rc(e,0);if(t===1)return r;let n=[r];for(let o=1;o<t;o+=1)n.push(Rc(e,o));return{height:r.height,images:n,width:r.width}}},Cm=2,vm={validate(e){let t=X(e,0),r=X(e,4);return t!==0||r===0?!1:X(e,2)===Cm},calculate:e=>Fc.calculate(e)},xm={validate:e=>Oe(e,0)===542327876,calculate:e=>({height:Oe(e,12),width:Oe(e,16)})},Sm=/^GIF8[79]a/,Bm={validate:e=>Sm.test(L(e,0,6)),calculate:e=>({height:X(e,8),width:X(e,6)})},Mc={avif:"avif",mif1:"heif",msf1:"heif",heic:"heic",heix:"heic",hevc:"heic",hevx:"heic"};bm={validate(e){let t=L(e,4,8),r=L(e,8,12);return t==="ftyp"&&r in Mc},calculate(e){let t=Ue(e,"meta",0),r=t&&Ue(e,"iprp",t.offset+12),n=r&&Ue(e,"ipco",r.offset+8),o=n&&Ue(e,"ispe",n.offset+8);if(o)return{height:_(e,o.offset+16),width:_(e,o.offset+12),type:Im(e,8,t.offset)};throw new TypeError("Invalid HEIF, no size found")}},Qm=8,km=4,Rm=4,Dm={ICON:32,"ICN#":32,"icm#":16,icm4:16,icm8:16,"ics#":16,ics4:16,ics8:16,is32:16,s8mk:16,icp4:16,icl4:32,icl8:32,il32:32,l8mk:32,icp5:32,ic11:32,ich4:48,ich8:48,ih32:48,h8mk:48,icp6:64,ic12:32,it32:128,t8mk:128,ic07:128,ic08:256,ic13:256,ic09:512,ic14:512,ic10:1024};Tm={validate:e=>L(e,0,4)==="icns",calculate(e){let t=e.length,r=_(e,km),n=Qm,o=Dc(e,n),s=Tc(o[0]);if(n+=o[1],n===r)return s;let i={height:s.height,images:[s],width:s.width};for(;n<r&&n<t;)o=Dc(e,n),s=Tc(o[0]),n+=o[1],i.images.push(s);return i}},Nm={validate:e=>ct(e,0,4)==="ff4fff51",calculate:e=>({height:_(e,12),width:_(e,8)})},Lm={validate(e){if(_(e,4)!==1783636e3||_(e,0)<1)return!1;let t=Ue(e,"ftyp",0);return t?_(e,t.offset+4)===1718909296:!1},calculate(e){let t=Ue(e,"jp2h",0),r=t&&Ue(e,"ihdr",t.offset+8);if(r)return{height:_(e,r.offset+8),width:_(e,r.offset+12)};throw new TypeError("Unsupported JPEG 2000 format")}},Pm="45786966",_m=2,Bs=6,Fm=2,Mm="4d4d",jm="4949",Nc=12,$m=2;Jm={validate:e=>ct(e,0,2)==="ffd8",calculate(e){e=e.slice(4);let t,r;for(;e.length;){let n=pn(e,0);if(e[n]!==255){e=e.slice(n);continue}if(Um(e)&&(t=Km(e,n)),qm(e,n),r=e[n+1],r===192||r===193||r===194){let o=Om(e,n+5);return t?{height:o.height,orientation:t,width:o.width}:o}e=e.slice(n+2)}throw new TypeError("Invalid JPG, no size found")}},Gm={validate:e=>{let t=L(e,1,7);return["KTX 11","KTX 20"].includes(t)},calculate:e=>{let t=e[5]===49?"ktx":"ktx2",r=t==="ktx"?36:20;return{height:Oe(e,r+4),width:Oe(e,r),type:t}}},Vm=`PNG\r

`,zm="IHDR",Lc="CgBI",Ym={validate(e){if(Vm===L(e,1,8)){let t=L(e,12,16);if(t===Lc&&(t=L(e,28,32)),t!==zm)throw new TypeError("Invalid PNG");return!0}return!1},calculate(e){return L(e,12,16)===Lc?{height:_(e,36),width:_(e,32)}:{height:_(e,20),width:_(e,16)}}},Pc={P1:"pbm/ascii",P2:"pgm/ascii",P3:"ppm/ascii",P4:"pbm",P5:"pgm",P6:"ppm",P7:"pam",PF:"pfm"},_c={default:e=>{let t=[];for(;e.length>0;){let r=e.shift();if(r[0]!=="#"){t=r.split(" ");break}}if(t.length===2)return{height:parseInt(t[1],10),width:parseInt(t[0],10)};throw new TypeError("Invalid PNM")},pam:e=>{let t={};for(;e.length>0;){let r=e.shift();if(r.length>16||r.charCodeAt(0)>128)continue;let[n,o]=r.split(" ");if(n&&o&&(t[n.toLowerCase()]=parseInt(o,10)),t.height&&t.width)break}if(t.height&&t.width)return{height:t.height,width:t.width};throw new TypeError("Invalid PAM")}},Wm={validate:e=>L(e,0,2)in Pc,calculate(e){let t=L(e,0,2),r=Pc[t],n=L(e,3).split(/[\r\n]+/);return(_c[r]||_c.default)(n)}},Xm={validate:e=>L(e,0,4)==="8BPS",calculate:e=>({height:_(e,14),width:_(e,18)})},jc=/<svg\s([^>"']|"[^"]*"|'[^']*')*>/,cn={height:/\sheight=(['"])([^%]+?)\1/,root:jc,viewbox:/\sviewBox=(['"])(.+?)\1/i,width:/\swidth=(['"])([^%]+?)\1/},Ss=2.54,$c={in:96,cm:96/Ss,em:16,ex:8,m:96/Ss*100,mm:96/Ss/10,pc:96/72/12,pt:96/72,px:1},Zm=new RegExp(`^([0-9.]+(?:e\\d+)?)(${Object.keys($c).join("|")})?$`);og={validate:e=>jc.test(L(e,0,1e3)),calculate(e){let t=cn.root.exec(L(e));if(t){let r=tg(t[0]);if(r.width&&r.height)return rg(r);if(r.viewbox)return ng(r,r.viewbox)}throw new TypeError("Invalid SVG")}},sg={validate(e){return X(e,0)===0&&X(e,4)===0},calculate(e){return{height:X(e,14),width:X(e,12)}}};pg=["49492a00","4d4d002a"],dg={validate:e=>pg.includes(ct(e,0,4)),calculate(e){let t=ug(e)==="BE",r=ig(e,t),n=cg(r,t),o=n[256],s=n[257];if(!o||!s)throw new TypeError("Invalid Tiff. Missing tags");return{height:s,width:o}}};mg={validate(e){let t=L(e,0,4)==="RIFF",r=L(e,8,12)==="WEBP",n=L(e,12,15)==="VP8";return t&&r&&n},calculate(e){let t=L(e,12,16);if(e=e.slice(20,30),t==="VP8X"){let n=e[0],o=(n&192)===0,s=(n&1)===0;if(o&&s)return fg(e);throw new TypeError("Invalid WebP")}if(t==="VP8 "&&e[0]!==47)return Ag(e);let r=ct(e,3,6);if(t==="VP8L"&&r!=="9d012a")return hg(e);throw new TypeError("Invalid WebP")}},fn=new Map([["bmp",gm],["cur",vm],["dds",xm],["gif",Bm],["heif",bm],["icns",Tm],["ico",Fc],["j2c",Nm],["jp2",Lm],["jpg",Jm],["ktx",Gm],["png",Ym],["pnm",Wm],["psd",Xm],["svg",og],["tga",sg],["tiff",dg],["webp",mg]]),gg=Array.from(fn.keys()),yg=new Map([[56,"psd"],[66,"bmp"],[68,"dds"],[71,"gif"],[73,"tiff"],[77,"tiff"],[82,"webp"],[105,"icns"],[137,"png"],[255,"jpg"]]);Eg={disabledTypes:[]};Bg=Mt(),Ig=ot(async(e,t,r)=>{let n=e.createAstro(Bg,t,r);n.self=Ig;let o=n.props;if(o.alt===void 0||o.alt===null)throw new g(Lr);typeof o.width=="string"&&(o.width=parseInt(o.width)),typeof o.height=="string"&&(o.height=parseInt(o.height));let s=await Is(o),i={};return s.srcSet.values.length>0&&(i.srcset=s.srcSet.attribute),se`${en()}<img${je(s.src,"src")}${be(i)}${be(s.attributes)}>`},"/home/snoob/Documents/GitHub/thelorebook/node_modules/astro/components/Image.astro",void 0),bg=Mt(),Qg=ot(async(e,t,r)=>{let n=e.createAstro(bg,t,r);n.self=Qg;let o=["webp"],s="png",i=["gif","svg","jpg","jpeg"],{formats:a=o,pictureAttributes:l={},fallbackFormat:u,...c}=n.props;if(c.alt===void 0||c.alt===null)throw new g(Lr);let p=c.class?.match(/\bastro-\w{8}\b/)?.[0];p&&(l.class?l.class=`${l.class} ${p}`:l.class=p);for(let w in c)w.startsWith("data-astro-cid")&&(l[w]=c[w]);let d=await Or(c.src),f=await Promise.all(a.map(async w=>await Is({...c,src:d,format:w,widths:c.widths,densities:c.densities}))),h=u??s;!u&&me(d)&&i.includes(d.format)&&(h=d.format);let A=await Is({...c,format:h,widths:c.widths,densities:c.densities}),E={},C={};return c.sizes&&(C.sizes=c.sizes),A.srcSet.values.length>0&&(E.srcset=A.srcSet.attribute),se`${en()}<picture${be(l)}> ${Object.entries(f).map(([w,k])=>{let P=c.densities||!c.densities&&!c.widths?`${k.src}${k.srcSet.values.length>0?", "+k.srcSet.attribute:""}`:k.srcSet.attribute;return se`<source${je(P,"srcset")}${je(xs(k.options.format??k.src)??`image/${k.options.format}`,"type")}${be(C)}>`})} <img${je(A.src,"src")}${be(E)}${be(A.attributes)}> </picture>`},"/home/snoob/Documents/GitHub/thelorebook/node_modules/astro/components/Picture.astro",void 0),un={service:{entrypoint:"astro/assets/services/noop",config:{}},domains:[],remotePatterns:[]},Is=async e=>await Sg(e,un),kg=e=>{let t=e.length,r=0,n=0,o=8997,s=0,i=33826,a=0,l=40164,u=0,c=52210;for(;r<t;)o^=e.charCodeAt(r++),n=o*435,s=i*435,a=l*435,u=c*435,a+=o<<8,u+=i<<8,s+=n>>>16,o=n&65535,a+=s>>>16,i=s&65535,c=u+(a>>>16)&65535,l=a&65535;return(c&15)*281474976710656+l*4294967296+i*65536+(o^c>>4)},Rg=(e,t=!1)=>(t?'W/"':'"')+kg(e).toString(36)+e.length.toString(36)+'"';Tg=async({request:e})=>{try{let t=await Uc();if(!("transform"in t))throw new Error("Configured image service is not a local service");let r=new URL(e.url),n=await t.parseURL(r,un);if(!n?.src)throw new Error("Incorrect transform returned by `parseURL`");let o,s=We(n.src),i=s?new URL(n.src):new URL(n.src,r.origin);if(s&&Hr(n.src,un)===!1)return new Response("Forbidden",{status:403});if(o=await Dg(i,s?new Headers:e.headers),!o)return new Response("Not Found",{status:404});let{data:a,format:l}=await t.transform(new Uint8Array(o),n,un);return new Response(a,{status:200,headers:{"Content-Type":xs(l)??`image/${l}`,"Cache-Control":"public, max-age=31536000",ETag:Rg(a.toString()),Date:new Date().toUTCString()}})}catch(t){return console.error("Could not process image request:",t),new Response(`Server Error: ${t}`,{status:500})}},Ng=Object.freeze(Object.defineProperty({__proto__:null,GET:Tg},Symbol.toStringTag,{value:"Module"})),Lg=()=>Ng});var qc=pe(hn=>{"use strict";var Pg=Je(),_g=Symbol.for("react.element"),Fg=Symbol.for("react.fragment"),Mg=Object.prototype.hasOwnProperty,jg=Pg.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,$g={key:!0,ref:!0,__self:!0,__source:!0};function Kc(e,t,r){var n,o={},s=null,i=null;r!==void 0&&(s=""+r),t.key!==void 0&&(s=""+t.key),t.ref!==void 0&&(i=t.ref);for(n in t)Mg.call(t,n)&&!$g.hasOwnProperty(n)&&(o[n]=t[n]);if(e&&e.defaultProps)for(n in t=e.defaultProps,t)o[n]===void 0&&(o[n]=t[n]);return{$$typeof:_g,type:e,key:s,ref:i,props:o,_owner:jg.current}}hn.Fragment=Fg;hn.jsx=Kc;hn.jsxs=Kc});var Gc=pe((rw,Jc)=>{"use strict";Jc.exports=qc()});var zc={};ut(zc,{page:()=>Gg,renderers:()=>Ye});function Og(){return(0,He.jsx)("div",{className:"bg-white",children:(0,He.jsxs)("div",{className:"mx-auto max-w-7xl px-4 py-24 text-center sm:px-6 md:py-48 lg:px-8",children:[(0,He.jsx)("span",{className:"font-serif text-xl uppercase tracking-widest text-gray-500",children:"The Lore Book"}),(0,He.jsx)("h2",{className:"font-avenir-reg mt-2 text-4xl font-extrabold tracking-tight text-gray-900 sm:text-5xl",children:"Create compelling narratives for your life."}),(0,He.jsx)("p",{className:"mx-auto mt-6 max-w-2xl text-lg text-gray-500",children:"Download now"})]})})}var He,Ug,Vc,Hg,Kg,qg,Jg,Gg,Yc=j(()=>{it();It();et();He=Qe(Gc(),1);vr();Ug=Mt(),Vc=ot((e,t,r)=>{let n=e.createAstro(Ug,t,r);n.self=Vc;let{title:o}=n.props;return se`<html lang="en"> <head><meta charset="UTF-8"><meta name="viewport" content="width=device-width"><link rel="preconnect" href="https://fonts.googleapis.com"><link rel="preconnect" href="https://fonts.gstatic.com" crossorigin><link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet"><title>${o}</title>${Fl()}</head> <body> <main class="mx-auto py-8"> ${tn(e,r.default)}  </main> </body></html>`},"/home/snoob/Documents/GitHub/thelorebook/apps/astro/src/layouts/Layout.astro",void 0);Hg=ot((e,t,r)=>se`${st(e,"Layout",Vc,{title:"The Lore Book: The greatest story ever told is yours."},{default:n=>se` ${st(n,"Hero",Og,{"client:load":!0,"client:component-hydration":"load","client:component-path":"/home/snoob/Documents/GitHub/thelorebook/apps/astro/src/components/react/hero.tsx","client:component-export":"Hero"})} `})}`,"/home/snoob/Documents/GitHub/thelorebook/apps/astro/src/pages/index.astro",void 0),Kg="/home/snoob/Documents/GitHub/thelorebook/apps/astro/src/pages/index.astro",qg="",Jg=Object.freeze(Object.defineProperty({__proto__:null,default:Hg,file:Kg,url:qg},Symbol.toStringTag,{value:"Module"})),Gg=()=>Jg});var Wc={};ut(Wc,{onRequest:()=>Vg});var Vg,Xc=j(()=>{Vg=(e,t)=>t()});vr();Bt();it();Dt();var Ut=Qe(ss(),1);It();it();function is(e){let t=zh(e),r=new ArrayBuffer(t.length),n=new DataView(r);for(let o=0;o<r.byteLength;o++)n.setUint8(o,t.charCodeAt(o));return r}var Vh="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";function zh(e){e.length%4===0&&(e=e.replace(/==?$/,""));let t="",r=0,n=0;for(let o=0;o<e.length;o++)r<<=6,r|=Vh.indexOf(e[o]),n+=6,n===24&&(t+=String.fromCharCode((r&16711680)>>16),t+=String.fromCharCode((r&65280)>>8),t+=String.fromCharCode(r&255),r=n=0);return n===12?(r>>=4,t+=String.fromCharCode(r)):n===18&&(r>>=2,t+=String.fromCharCode((r&65280)>>8),t+=String.fromCharCode(r&255)),t}function as(e,t){return Yl(JSON.parse(e),t)}function Yl(e,t){if(typeof e=="number")return o(e,!0);if(!Array.isArray(e)||e.length===0)throw new Error("Invalid input");let r=e,n=Array(r.length);function o(s,i=!1){if(s===-1)return;if(s===-3)return NaN;if(s===-4)return 1/0;if(s===-5)return-1/0;if(s===-6)return-0;if(i)throw new Error("Invalid input");if(s in n)return n[s];let a=r[s];if(!a||typeof a!="object")n[s]=a;else if(Array.isArray(a))if(typeof a[0]=="string"){let l=a[0],u=t?.[l];if(u)return n[s]=u(o(a[1]));switch(l){case"Date":n[s]=new Date(a[1]);break;case"Set":let c=new Set;n[s]=c;for(let f=1;f<a.length;f+=1)c.add(o(a[f]));break;case"Map":let p=new Map;n[s]=p;for(let f=1;f<a.length;f+=2)p.set(o(a[f]),o(a[f+1]));break;case"RegExp":n[s]=new RegExp(a[1],a[2]);break;case"Object":n[s]=Object(a[1]);break;case"BigInt":n[s]=BigInt(a[1]);break;case"null":let d=Object.create(null);n[s]=d;for(let f=1;f<a.length;f+=2)d[a[f]]=o(a[f+1]);break;case"Int8Array":case"Uint8Array":case"Uint8ClampedArray":case"Int16Array":case"Uint16Array":case"Int32Array":case"Uint32Array":case"Float32Array":case"Float64Array":case"BigInt64Array":case"BigUint64Array":{let f=globalThis[l],h=a[1],A=is(h),E=new f(A);n[s]=E;break}case"ArrayBuffer":{let f=a[1],h=is(f);n[s]=h;break}default:throw new Error(`Unknown type ${l}`)}}else{let l=new Array(a.length);n[s]=l;for(let u=0;u<a.length;u+=1){let c=a[u];c!==-2&&(l[u]=o(c))}}else{let l={};n[s]=l;for(let u in a){let c=a[u];l[u]=o(c)}}return n[s]}return o(0)}bo();var lt=async(e,t)=>{let r=await t();return r.headers.set(Sl,"true"),r},Yh={actionName:"_astroAction",actionPayload:"_astroActionPayload",actionRedirect:"_astroActionRedirect"},Wh={ASSETS_PREFIX:void 0,BASE_URL:"/",DEV:!1,MODE:"production",PROD:!0,SITE:void 0,SSR:!0},Wl={BAD_REQUEST:400,UNAUTHORIZED:401,FORBIDDEN:403,NOT_FOUND:404,TIMEOUT:405,CONFLICT:409,PRECONDITION_FAILED:412,PAYLOAD_TOO_LARGE:413,UNSUPPORTED_MEDIA_TYPE:415,UNPROCESSABLE_CONTENT:422,TOO_MANY_REQUESTS:429,CLIENT_CLOSED_REQUEST:499,INTERNAL_SERVER_ERROR:500},Xh=Object.entries(Wl).reduce((e,[t,r])=>({...e,[r]:t}),{}),at=class e extends Error{type="AstroActionError";code="INTERNAL_SERVER_ERROR";status=500;constructor(t){super(t.message),this.code=t.code,this.status=e.codeToStatus(t.code),t.stack&&(this.stack=t.stack)}static codeToStatus(t){return Wl[t]}static statusToCode(t){return Xh[t]??"INTERNAL_SERVER_ERROR"}static fromJson(t){return eA(t)?new ls(t.issues):Zh(t)?new e(t):new e({code:"INTERNAL_SERVER_ERROR"})}};function Zh(e){return typeof e=="object"&&e!=null&&"type"in e&&e.type==="AstroActionError"}function eA(e){return typeof e=="object"&&e!=null&&"type"in e&&e.type==="AstroActionInputError"&&"issues"in e&&Array.isArray(e.issues)}var ls=class extends at{type="AstroActionInputError";issues;fields;constructor(t){super({message:`Failed to validate: ${JSON.stringify(t,null,2)}`,code:"BAD_REQUEST"}),this.issues=t,this.fields={};for(let r of t)if(r.path.length>0){let n=r.path[0].toString();this.fields[n]??=[],this.fields[n]?.push(r.message)}}};function Xl(e){return`?${new URLSearchParams({[Yh.actionName]:e}).toString()}`}function cs(e){if(e.type==="error"){let t;try{t=JSON.parse(e.body)}catch{return{data:void 0,error:new at({message:e.body,code:"INTERNAL_SERVER_ERROR"})}}if(Object.assign(Wh,{_:process.env._})?.PROD)return{error:at.fromJson(t),data:void 0};{let r=at.fromJson(t);return r.stack=tA.get(),{error:r,data:void 0}}}return e.type==="empty"?{data:void 0,error:void 0}:{data:as(e.body,{URL:t=>new URL(t)}),error:void 0}}var tA=function(){let t;return{set(r){t=r},get(){return t}}}();function rA({title:e,pathname:t,statusCode:r=404,tabTitle:n,body:o}){return`<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8">
		<title>${n}</title>
		<style>
			:root {
				--gray-10: hsl(258, 7%, 10%);
				--gray-20: hsl(258, 7%, 20%);
				--gray-30: hsl(258, 7%, 30%);
				--gray-40: hsl(258, 7%, 40%);
				--gray-50: hsl(258, 7%, 50%);
				--gray-60: hsl(258, 7%, 60%);
				--gray-70: hsl(258, 7%, 70%);
				--gray-80: hsl(258, 7%, 80%);
				--gray-90: hsl(258, 7%, 90%);
				--black: #13151A;
				--accent-light: #E0CCFA;
			}

			* {
				box-sizing: border-box;
			}

			html {
				background: var(--black);
				color-scheme: dark;
				accent-color: var(--accent-light);
			}

			body {
				background-color: var(--gray-10);
				color: var(--gray-80);
				font-family: ui-monospace, Menlo, Monaco, "Cascadia Mono", "Segoe UI Mono", "Roboto Mono", "Oxygen Mono", "Ubuntu Monospace", "Source Code Pro", "Fira Mono", "Droid Sans Mono", "Courier New", monospace;
				line-height: 1.5;
				margin: 0;
			}

			a {
				color: var(--accent-light);
			}

			.center {
				display: flex;
				flex-direction: column;
				justify-content: center;
				align-items: center;
				height: 100vh;
				width: 100vw;
			}

			h1 {
				margin-bottom: 8px;
				color: white;
				font-family: system-ui, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol";
				font-weight: 700;
				margin-top: 1rem;
				margin-bottom: 0;
			}

			.statusCode {
				color: var(--accent-light);
			}

			.astro-icon {
				height: 124px;
				width: 124px;
			}

			pre, code {
				padding: 2px 8px;
				background: rgba(0,0,0, 0.25);
				border: 1px solid rgba(255,255,255, 0.25);
				border-radius: 4px;
				font-size: 1.2em;
				margin-top: 0;
				max-width: 60em;
			}
		</style>
	</head>
	<body>
		<main class="center">
			<svg class="astro-icon" xmlns="http://www.w3.org/2000/svg" width="64" height="80" viewBox="0 0 64 80" fill="none"> <path d="M20.5253 67.6322C16.9291 64.3531 15.8793 57.4632 17.3776 52.4717C19.9755 55.6188 23.575 56.6157 27.3035 57.1784C33.0594 58.0468 38.7122 57.722 44.0592 55.0977C44.6709 54.7972 45.2362 54.3978 45.9045 53.9931C46.4062 55.4451 46.5368 56.9109 46.3616 58.4028C45.9355 62.0362 44.1228 64.8429 41.2397 66.9705C40.0868 67.8215 38.8669 68.5822 37.6762 69.3846C34.0181 71.8508 33.0285 74.7426 34.403 78.9491C34.4357 79.0516 34.4649 79.1541 34.5388 79.4042C32.6711 78.5705 31.3069 77.3565 30.2674 75.7604C29.1694 74.0757 28.6471 72.2121 28.6196 70.1957C28.6059 69.2144 28.6059 68.2244 28.4736 67.257C28.1506 64.8985 27.0406 63.8425 24.9496 63.7817C22.8036 63.7192 21.106 65.0426 20.6559 67.1268C20.6215 67.2865 20.5717 67.4446 20.5218 67.6304L20.5253 67.6322Z" fill="white"/> <path d="M20.5253 67.6322C16.9291 64.3531 15.8793 57.4632 17.3776 52.4717C19.9755 55.6188 23.575 56.6157 27.3035 57.1784C33.0594 58.0468 38.7122 57.722 44.0592 55.0977C44.6709 54.7972 45.2362 54.3978 45.9045 53.9931C46.4062 55.4451 46.5368 56.9109 46.3616 58.4028C45.9355 62.0362 44.1228 64.8429 41.2397 66.9705C40.0868 67.8215 38.8669 68.5822 37.6762 69.3846C34.0181 71.8508 33.0285 74.7426 34.403 78.9491C34.4357 79.0516 34.4649 79.1541 34.5388 79.4042C32.6711 78.5705 31.3069 77.3565 30.2674 75.7604C29.1694 74.0757 28.6471 72.2121 28.6196 70.1957C28.6059 69.2144 28.6059 68.2244 28.4736 67.257C28.1506 64.8985 27.0406 63.8425 24.9496 63.7817C22.8036 63.7192 21.106 65.0426 20.6559 67.1268C20.6215 67.2865 20.5717 67.4446 20.5218 67.6304L20.5253 67.6322Z" fill="url(#paint0_linear_738_686)"/> <path d="M0 51.6401C0 51.6401 10.6488 46.4654 21.3274 46.4654L29.3786 21.6102C29.6801 20.4082 30.5602 19.5913 31.5538 19.5913C32.5474 19.5913 33.4275 20.4082 33.7289 21.6102L41.7802 46.4654C54.4274 46.4654 63.1076 51.6401 63.1076 51.6401C63.1076 51.6401 45.0197 2.48776 44.9843 2.38914C44.4652 0.935933 43.5888 0 42.4073 0H20.7022C19.5206 0 18.6796 0.935933 18.1251 2.38914C18.086 2.4859 0 51.6401 0 51.6401Z" fill="white"/> <defs> <linearGradient id="paint0_linear_738_686" x1="31.554" y1="75.4423" x2="39.7462" y2="48.376" gradientUnits="userSpaceOnUse"> <stop stop-color="#D83333"/> <stop offset="1" stop-color="#F041FF"/> </linearGradient> </defs> </svg>
			<h1>${r?`<span class="statusCode">${r}: </span> `:""}<span class="statusMessage">${e}</span></h1>
			${o||`
				<pre>Path: ${Kr(t)}</pre>
			`}
			</main>
	</body>
</html>`}var rn={component:nt,generate:()=>"",params:[],pattern:/\/404/,prerender:!1,pathname:"/404",segments:[[{content:"404",dynamic:!1,spread:!1}]],type:"page",route:"/404",fallbackRoutes:[],isIndex:!1};function Zl(e){return e.routes.some(t=>t.route==="/404")||e.routes.push(rn),e}async function ec({pathname:e}){return new Response(rA({statusCode:404,title:"Not found",tabTitle:"404: Not Found",pathname:e}),{status:404,headers:{"Content-Type":"text/html; charset=utf-8"}})}ec.isAstroComponentFactory=!0;var tc={default:ec};var rc;(function(e){e[e.Static=1]="Static",e[e.Dynamic=2]="Dynamic",e[e.ImportMeta=3]="ImportMeta",e[e.StaticSourcePhase=4]="StaticSourcePhase",e[e.DynamicSourcePhase=5]="DynamicSourcePhase"})(rc||(rc={}));var D0=new Uint8Array(new Uint16Array([1]).buffer)[0]===1;var nA,T0=WebAssembly.compile((us="",typeof Buffer<"u"?Buffer.from(us,"base64"):Uint8Array.from(atob(us),e=>e.charCodeAt(0)))).then(WebAssembly.instantiate).then(({exports:e})=>{nA=e}),us;et();function cc(e,t){switch(e){case"always":return!0;case"never":return!1;case"ignore":switch(t){case"directory":return!0;case"preserve":case"file":return!1}}}function oA(e,t,r,n){if(!e)return(p,d)=>d();let o={...e,trailingSlash:r,base:t,format:n,domains:{}},s=cA(o),i=uA(o),a=sA(o.locales),l=pA(o),u=p=>{let d=p.url;if(d.pathname===t+"/"||d.pathname===t)return s(p);if(!a(p))return i(p)},c=(p,d)=>{let f=!1,h=p.url;for(let A of h.pathname.split("/"))if(H(A)===H(e.defaultLocale)){f=!0;break}if(f){let A=h.pathname.replace(`/${e.defaultLocale}`,"");return d.headers.set("Location",A),i(p)}};return async(p,d)=>{let f=await d(),h=f.headers.get(rt);if(f.headers.get(ie)==="no"&&typeof e.fallback>"u"||h!=="page"&&h!=="fallback"||iA(p.request,t))return f;let{currentLocale:E}=p;switch(e.strategy){case"manual":return f;case"domains-prefix-other-locales":{if(ps(e,E)){let C=c(p,f);if(C)return C}break}case"pathname-prefix-other-locales":{let C=c(p,f);if(C)return C;break}case"domains-prefix-always-no-redirect":{if(ps(e,E)){let C=i(p,f);if(C)return C}break}case"pathname-prefix-always-no-redirect":{let C=i(p,f);if(C)return C;break}case"pathname-prefix-always":{let C=u(p);if(C)return C;break}case"domains-prefix-always":{if(ps(e,E)){let C=u(p);if(C)return C}break}}return l(p,f)}}function ps(e,t){for(let r of Object.values(e.domainLookupTable))if(r===t)return!1;return!0}function sA(e){return function(t){return uc(t.url.pathname,e)}}function iA(e,t=""){let r=new URL(e.url);return r.pathname.startsWith(`${t}/404`)||r.pathname.startsWith(`${t}/500`)}function uc(e,t){let r=e.split("/");for(let n of r)for(let o of t)if(typeof o=="string"){if(H(n)===H(o))return!0}else if(n===o.path)return!0;return!1}function aA(e,t){for(let r of t)if(typeof r=="string"){if(r===e)return r}else for(let n of r.codes)if(n===e)return r.path;throw new g(xo)}function H(e){return e.replaceAll("_","-").toLowerCase()}function lA(e){return e.map(t=>typeof t=="string"?t:t.codes[0])}function cA({trailingSlash:e,format:t,base:r,defaultLocale:n}){return function(o,s){return cc(e,t)?o.redirect(`${xr(Ce(r,n))}`,s):o.redirect(`${Ce(r,n)}`,s)}}function uA({base:e,locales:t}){return function(r,n){if(n?.headers.get(ie)==="no")return n;let o=r.url;if(!(o.pathname===e+"/"||o.pathname===e||uc(o.pathname,t)))return n?(n.headers.set(ie,"no"),new Response(n.body,{status:404,headers:n.headers})):new Response(null,{status:404,headers:{[ie]:"no"}})}}function pA({fallback:e,locales:t,defaultLocale:r,strategy:n,base:o,fallbackType:s}){return async function(i,a){if(a.status>=300&&e){let l=e?Object.keys(e):[],c=i.url.pathname.split("/").find(p=>{for(let d of t)if(typeof d=="string"){if(d===p)return!0}else if(d.path===p)return!0;return!1});if(c&&l.includes(c)){let p=e[c],d=aA(p,t),f;return d===r&&n==="pathname-prefix-other-locales"?i.url.pathname.includes(`${o}`)?f=i.url.pathname.replace(`/${c}`,""):f=i.url.pathname.replace(`/${c}`,"/"):f=i.url.pathname.replace(`/${c}`,`/${d}`),s==="rewrite"?await i.rewrite(f):i.redirect(f)}}return a}}var dA=new Date(0),nc="deleted",fA=Symbol.for("astro.responseSent"),nn=class{constructor(t){this.value=t}json(){if(this.value===void 0)throw new Error("Cannot convert undefined to an object.");return JSON.parse(this.value)}number(){return Number(this.value)}boolean(){return this.value==="false"||this.value==="0"?!1:!!this.value}},$e=class{#t;#r;#e;#o;constructor(t){this.#t=t,this.#r=null,this.#e=null,this.#o=!1}delete(t,r){let{maxAge:n,expires:o,...s}=r||{},i={expires:dA,...s};this.#s().set(t,[nc,(0,Ut.serialize)(t,nc,i),!1])}get(t,r=void 0){if(this.#e?.has(t)){let[o,,s]=this.#e.get(t);return s?new nn(o):void 0}let n=this.#n(r);if(t in n){let o=n[t];return new nn(o)}}has(t,r=void 0){if(this.#e?.has(t)){let[,,o]=this.#e.get(t);return o}return!!this.#n(r)[t]}set(t,r,n){if(this.#o){let i=new Error(`Astro.cookies.set() was called after the cookies had already been sent to the browser.
This may have happened if this method was called in an imported component.
Please make sure that Astro.cookies.set() is only called in the frontmatter of the main page.`);i.name="Warning",console.warn(i)}let o;if(typeof r=="string")o=r;else{let i=r.toString();i===Object.prototype.toString.call(r)?o=JSON.stringify(r):o=i}let s={};if(n&&Object.assign(s,n),this.#s().set(t,[o,(0,Ut.serialize)(t,o,s),!0]),this.#t[fA])throw new g({...Pe})}merge(t){let r=t.#e;if(r)for(let[n,o]of r)this.#s().set(n,o)}*headers(){if(this.#e!=null)for(let[,t]of this.#e)yield t[1]}static consume(t){return t.#o=!0,t.headers()}#n(t=void 0){return this.#r||this.#a(t),this.#r||(this.#r={}),this.#r}#s(){return this.#e||(this.#e=new Map),this.#e}#a(t=void 0){let r=this.#t.headers.get("cookie");r&&(this.#r=(0,Ut.parse)(r,t))}},pc=Symbol.for("astro.cookies");function hA(e,t){Reflect.set(e,pc,t)}function dc(e){let t=Reflect.get(e,pc);if(t!=null)return t}function*oc(e){let t=dc(e);if(!t)return[];for(let r of $e.consume(t))yield r;return[]}var AA=new Intl.DateTimeFormat([],{hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1}),on={debug:20,info:30,warn:40,error:50,silent:90};function ws(e,t,r,n,o=!0){let s=e.level,i=e.dest,a={label:r,level:t,message:n,newLine:o};mA(s,t)&&i.write(a)}function mA(e,t){return on[e]<=on[t]}function fc(e,t,r,n=!0){return ws(e,"info",t,r,n)}function hc(e,t,r,n=!0){return ws(e,"warn",t,r,n)}function Ac(e,t,r,n=!0){return ws(e,"error",t,r,n)}function mc(...e){"_astroGlobalDebug"in globalThis&&globalThis._astroGlobalDebug(...e)}function gA({level:e,label:t}){let r=`${AA.format(new Date)}`,n=[];return e==="error"||e==="warn"?(n.push(Sr(r)),n.push(`[${e.toUpperCase()}]`)):n.push(r),t&&n.push(`[${t}]`),e==="error"?Ga(n.join(" ")):e==="warn"?Va(n.join(" ")):n.length===1?po(n[0]):po(n[0])+" "+za(n.splice(1).join(" "))}var ds=class{options;constructor(t){this.options=t}info(t,r,n=!0){fc(this.options,t,r,n)}warn(t,r,n=!0){hc(this.options,t,r,n)}error(t,r,n=!0){Ac(this.options,t,r,n)}debug(t,...r){mc(t,...r)}level(){return this.options.level}forkIntegrationLogger(t){return new sn(this.options,t)}},sn=class e{options;label;constructor(t,r){this.options=t,this.label=r}fork(t){return new e(this.options,t)}info(t){fc(this.options,this.label,t)}warn(t){hc(this.options,this.label,t)}error(t){Ac(this.options,this.label,t)}debug(t){mc(this.label,t)}},yA={write(e){let t=console.error;return on[e.level]<on.error&&(t=console.log),e.label==="SKIP_FORMAT"?t(e.message):t(gA(e)+" "+e.message),!0}},wA=Symbol.for("astro.actionAPIContext");function gc(e){return"_actionPayload"in e}function sc(e){return t=>{if(!(!gc(e)||t.toString()!==Xl(e._actionPayload.actionName)))return cs(e._actionPayload.actionResult)}}function ic(e){return(t,r)=>(Reflect.set(e,wA,!0),t.bind(e)(r))}function yc(e){if(e==="*")return[{locale:e,qualityValue:void 0}];let t=[],r=e.split(",").map(n=>n.trim());for(let n of r){let o=n.split(";").map(a=>a.trim()),s=o[0],i=o[1];if(o)if(i&&i.startsWith("q=")){let a=Number.parseFloat(i.slice(2));Number.isNaN(a)||a>1?t.push({locale:s,qualityValue:void 0}):t.push({locale:s,qualityValue:a})}else t.push({locale:s,qualityValue:void 0})}return t}function wc(e,t){let r=lA(t).map(H);return e.filter(n=>n.locale!=="*"?r.includes(H(n.locale)):!0).sort((n,o)=>n.qualityValue&&o.qualityValue?Math.sign(o.qualityValue-n.qualityValue):0)}function EA(e,t){let r=e.headers.get("Accept-Language"),n;if(r){let s=wc(yc(r),t).at(0);if(s&&s.locale!=="*")for(let i of t)if(typeof i=="string")H(i)===H(s.locale)&&(n=i);else for(let a of i.codes)H(a)===H(s.locale)&&(n=i.path)}return n}function CA(e,t){let r=e.headers.get("Accept-Language"),n=[];if(r){let o=wc(yc(r),t);if(o.length===1&&o.at(0).locale==="*")return t.map(s=>typeof s=="string"?s:s.codes.at(0));if(o.length>0)for(let s of o)for(let i of t)if(typeof i=="string")H(i)===H(s.locale)&&n.push(i);else for(let a of i.codes)a===s.locale&&n.push(i.path)}return n}function vA(e,t,r){for(let n of e.split("/"))for(let o of t)if(typeof o=="string"){if(!n.includes(o))continue;if(H(o)===H(n))return o}else{if(o.path===n)return o.codes.at(0);for(let s of o.codes)if(H(s)===H(n))return s}for(let n of t)if(typeof n=="string"){if(n===r)return n}else if(n.path===r)return n.codes.at(0)}async function xA(e,t,r){let n=!1,o,i=e(t,async a=>(n=!0,o=r(t,a),o));return await Promise.resolve(i).then(async a=>{if(n)if(typeof a<"u"){if(!(a instanceof Response))throw new g(Rt);return a}else{if(o)return o;throw new g(Rt)}else{if(typeof a>"u")throw new g(Eo);if(a instanceof Response)return a;throw new g(Rt)}})}var SA=["application/x-www-form-urlencoded","multipart/form-data","text/plain"];function BA(){return(e,t)=>{let{request:r,url:n}=e;if(r.method==="GET")return t();let o=(r.method==="POST"||r.method==="PUT"||r.method==="PATCH"||r.method==="DELETE")&&r.headers.get("origin")===n.origin;if(r.headers.has("content-type")){if(IA(r.headers.get("content-type"))&&!o)return new Response(`Cross-site ${r.method} form submissions are forbidden`,{status:403})}else if(!o)return new Response(`Cross-site ${r.method} form submissions are forbidden`,{status:403});return t()}}function IA(e){if(e){for(let t of SA)if(e.toLowerCase().includes(t))return!0}return!1}var bA=["string","number","undefined"];function QA([e,t],r){if(!bA.includes(typeof t))throw new g({...kr,message:kr.message(e,t,typeof t),location:{file:r}})}function kA(e,{ssr:t,route:r}){if((!t||r.prerender)&&!e.getStaticPaths)throw new g({...go,location:{file:r.component}})}function RA(e,t,r){if(!Array.isArray(e))throw new g({...Qr,message:Qr.message(typeof e),location:{file:r.component}});e.forEach(n=>{if(typeof n=="object"&&Array.isArray(n)||n===null)throw new g({...br,message:br.message(Array.isArray(n)?"array":typeof n)});if(n.params===void 0||n.params===null||n.params&&Object.keys(n.params).length===0)throw new g({...mo,location:{file:r.component}});for(let[o,s]of Object.entries(n.params))typeof s>"u"||typeof s=="string"||typeof s=="number"||t.warn("router",`getStaticPaths() returned an invalid path param: "${o}". A string, number or undefined value was expected, but got \`${JSON.stringify(s)}\`.`),typeof s=="string"&&s===""&&t.warn("router",`getStaticPaths() returned an invalid path param: "${o}". \`undefined\` expected for an optional param, but got empty string.`)})}function Ec(e,t){let r=Object.entries(e).reduce((n,o)=>{QA(o,t.component);let[s,i]=o;return i!==void 0&&(n[s]=typeof i=="string"?lo(i):i.toString()),n},{});return t.generate(r)}function DA(e){return function(r,n={}){let{pageSize:o,params:s,props:i}=n,a=o||10,l="page",u=s||{},c=i||{},p;if(e.params.includes(`...${l}`))p=!1;else if(e.params.includes(`${l}`))p=!0;else throw new g({...Nr,message:Nr.message(l)});let d=Math.max(1,Math.ceil(r.length/a));return[...Array(d).keys()].map(h=>{let A=h+1,E=a===1/0?0:(A-1)*a,C=Math.min(E+a,r.length),w={...u,[l]:p||A>1?String(A):void 0},k=jt(e.generate({...w})),P=A===d?void 0:jt(e.generate({...w,page:String(A+1)})),z=A===1?void 0:jt(e.generate({...w,page:!p&&A-1===1?void 0:String(A-1)})),Ke=A===1?void 0:jt(e.generate({...w,page:p?"1":void 0})),v=A===d?void 0:jt(e.generate({...w,page:String(d)}));return{params:w,props:{...c,page:{data:r.slice(E,C),start:E,end:C-1,size:a,total:r.length,currentPage:A,lastPage:d,url:{current:k,next:P,prev:z,first:Ke,last:v}}}}})}}function jt(e){return e===""?"/":e}async function TA({mod:e,route:t,routeCache:r,logger:n,ssr:o}){let s=r.get(t);if(!e)throw new Error("This is an error caused by Astro and not your code. Please file an issue.");if(s?.staticPaths)return s.staticPaths;if(kA(e,{ssr:o,route:t}),o&&!t.prerender){let l=Object.assign([],{keyed:new Map});return r.set(t,{...s,staticPaths:l}),l}let i=[];if(!e.getStaticPaths)throw new Error("Unexpected Error.");i=await e.getStaticPaths({paginate:DA(t)}),RA(i,n,t);let a=i;a.keyed=new Map;for(let l of a){let u=Ec(l.params,t);a.keyed.set(u,l)}return r.set(t,{...s,staticPaths:a}),a}var fs=class{logger;cache={};mode;constructor(t,r="production"){this.logger=t,this.mode=r}clearAll(){this.cache={}}set(t,r){let n=this.key(t);this.mode==="production"&&this.cache[n]?.staticPaths&&this.logger.warn(null,`Internal Warning: route cache overwritten. (${n})`),this.cache[n]=r}get(t){return this.cache[this.key(t)]}key(t){return`${t.route}_${t.component}`}};function NA(e,t,r,n){let o=Ec(t,r),s=e.keyed.get(o);if(s)return s;n.debug("router",`findPathItemByKey() - Unexpected cache miss looking for ${o}`)}function LA(e,t,r){let n=e.map(i=>i.length===1&&i[0].spread?"(?:\\/(.*?))?":"\\/"+i.map(a=>a.spread?"(.*?)":a.dynamic?"([^/]+?)":a.content.normalize().replace(/\?/g,"%3F").replace(/#/g,"%23").replace(/%5B/g,"[").replace(/%5D/g,"]").replace(/[.*+?^${}()|[\]\\]/g,"\\$&")).join("")).join(""),o=r&&e.length?PA(r):"$",s="\\/";return r==="never"&&t!=="/"&&(s=""),new RegExp(`^${n||s}${o}`)}function PA(e){return e==="always"?"\\/$":e==="never"?"$":"\\/?$"}var Cc="/_server-islands/[name]",hs="_server-islands.astro";function _A(e){let t=[[{content:"_server-islands",dynamic:!1,spread:!1}],[{content:"name",dynamic:!0,spread:!1}]];return{type:"page",component:hs,generate:()=>"",params:["name"],segments:t,pattern:LA(t,e.base,e.trailingSlash),prerender:!1,isIndex:!1,fallbackRoutes:[],route:Cc}}function FA(e,t){t.routes.some(r=>r.route==="/_server-islands/[name]")||t.routes.unshift(_A(e))}function MA(e){let t=async n=>{let o=n.params,i=await n.request.text(),a=JSON.parse(i);if(!o.name)return new Response(null,{status:400,statusText:"Bad request"});let l=o.name,u=e.serverIslandMap?.get(l);if(!u)return new Response(null,{status:404,statusText:"Not found"});let c=await e.key,p=a.encryptedProps,d=await ql(c,p),f=JSON.parse(d),A=(await u())[a.componentExport],E={};for(let C in a.slots)E[C]=$l(a.slots[C]);return se`${st(n,"Component",A,f,E)}`};return t.isAstroComponentFactory=!0,{default:t,partial:!0}}function jA(e,t){return Zl(t),FA(e,t),t}function vc(e){let t=new URL(e.hrefRoot);return[{instance:tc,matchesComponent:r=>r.href===new URL(nt,t).href,route:rn.route,component:nt},{instance:MA(e),matchesComponent:r=>r.href===new URL(hs,t).href,route:Cc,component:hs}]}var As=class{constructor(t,r,n,o,s,i,a,l=r.adapterName,u=r.clientDirectives,c=r.inlinedScripts,p=r.compressHTML,d=r.i18n,f=r.middleware,h=new fs(t,n),A=r.site?new URL(r.site):void 0,E=vc(r)){this.logger=t,this.manifest=r,this.mode=n,this.renderers=o,this.resolve=s,this.serverLike=i,this.streaming=a,this.adapterName=l,this.clientDirectives=u,this.inlinedScripts=c,this.compressHTML=p,this.i18n=d,this.middleware=f,this.routeCache=h,this.site=A,this.defaultRoutes=E,this.internalMiddleware=[],d?.strategy!=="manual"&&this.internalMiddleware.push(oA(d,r.base,r.trailingSlash,r.buildFormat))}internalMiddleware;resolvedMiddleware=void 0;async getMiddleware(){if(this.resolvedMiddleware)return this.resolvedMiddleware;if(this.middleware){let r=(await this.middleware()).onRequest??lt;return this.manifest.checkOrigin?this.resolvedMiddleware=xc(BA(),r):this.resolvedMiddleware=r,this.resolvedMiddleware}else return this.resolvedMiddleware=lt,this.resolvedMiddleware}};function $A(e){return e?.type==="redirect"}function UA(e){return e?.type==="fallback"}var OA={default(){return new Response(null,{status:301})}},HA={page:()=>Promise.resolve(OA),onRequest:(e,t)=>t(),renderers:[]};async function KA(e){let{request:{method:t},routeData:r}=e,{redirect:n,redirectRoute:o}=r,s=o&&typeof n=="object"?n.status:t==="GET"?301:308,i={location:encodeURI(qA(e))};return new Response(null,{status:s,headers:i})}function qA(e){let{params:t,routeData:{redirect:r,redirectRoute:n}}=e;if(typeof n<"u")return n?.generate(t)||n?.pathname||"/";if(typeof r=="string"){let o=r;for(let s of Object.keys(t)){let i=t[s];o=o.replace(`[${s}]`,i).replace(`[...${s}]`,i)}return o}else if(typeof r>"u")return"/";return r.destination}async function JA(e){let{logger:t,mod:r,routeData:n,routeCache:o,pathname:s,serverLike:i}=e;if(!n||n.pathname)return{};if($A(n)||UA(n)||n.component===nt)return{};let a=await TA({mod:r,route:n,routeCache:o,logger:t,ssr:i}),l=$t(n,s),u=NA(a,l,n,t);if(!u&&(!i||n.prerender))throw new g({...bt,message:bt.message(s),hint:bt.hint([n.component])});return r&&GA(n,r,l),u?.props?{...u.props}:{}}function $t(e,t){if(!e.params.length)return{};let r=e.pattern.exec(decodeURIComponent(t));if(!r)return{};let n={};return e.params.forEach((o,s)=>{o.startsWith("...")?n[o.slice(3)]=r[s+1]?r[s+1]:void 0:n[o]=r[s+1]}),n}function GA(e,t,r){if(e.type==="endpoint"&&t.getStaticPaths){let n=e.segments[e.segments.length-1],o=Object.values(r),s=o[o.length-1];if(n.length===1&&n[0].dynamic&&s===void 0)throw new g({...kt,message:kt.message(e.route),hint:kt.hint(e.component),location:{file:e.component}})}}function VA(e){if(!e)return;let t=e?.expressions?.filter(r=>Yo(r)===!1);if(t?.length===1)return t[0]}var ms=class{#t;#r;#e;constructor(t,r,n){if(this.#t=t,this.#r=r,this.#e=n,r)for(let o of Object.keys(r)){if(this[o]!==void 0)throw new g({...Rr,message:Rr.message(o)});Object.defineProperty(this,o,{get(){return!0},enumerable:!0})}}has(t){return this.#r?!!this.#r[t]:!1}async render(t,r=[]){if(!this.#r||!this.has(t))return;let n=this.#t;if(!Array.isArray(r))this.#e.warn(null,`Expected second parameter to be an array, received a ${typeof r}. If you're trying to pass an array as a single argument and getting unexpected results, make sure you're passing your array as a item of an array. Ex: Astro.slots.render('default', [["Hello", "World"]])`);else if(r.length>0){let i=this.#r[t],a=typeof i=="function"?await i(n):await i,l=VA(a);if(l)return await Ie(n,async()=>typeof l=="function"?l(...r):l).then(c=>c);if(typeof a=="function")return await Se(n,a(...r)).then(u=>u!=null?String(u):u)}let o=await Ie(n,this.#r[t]);return Be(n,o)}};function xc(...e){let t=e.filter(n=>!!n),r=t.length;return r?(n,o)=>{let s;return i(0,n);function i(a,l){let u=t[a];return u(l,async p=>{if(a<r-1){if(p){let d;p instanceof Request?d=p:p instanceof URL?d=new Request(p,l.request):d=new Request(new URL(p,l.url.origin),l.request);let f=Reflect.get(l,Sc),{routeData:h,pathname:A}=await f.tryRewrite(p,l.request);s=p,l.request=d,l.url=new URL(d.url),l.cookies=new $e(d),l.params=$t(h,A)}return i(a+1,l)}else return o(p??s)})}}:(n,o)=>o()}function ac(e,t){let r=decodeURI(e);return t.routes.find(n=>n.pattern.test(r)||n.fallbackRoutes.some(o=>o.pattern.test(r)))}function zA(e){return e.pattern.test("/404")||e.pattern.test("/500")}function YA({payload:e,routes:t,request:r,trailingSlash:n,buildFormat:o,base:s}){let i;e instanceof URL?i=e:e instanceof Request?i=new URL(e.url):i=new URL(e,new URL(r.url).origin);let a=i.pathname;s!=="/"&&i.pathname.startsWith(s)&&(a=cc(n,o)?xr(i.pathname):St(i.pathname),a=a.slice(s.length));let l;for(let u of t)if(u.pattern.test(decodeURI(a))){l=u;break}if(l)return{routeData:l,newUrl:i,pathname:a};{let u=t.find(c=>c.route==="/404");return u?{routeData:u,newUrl:i,pathname:a}:{routeData:rn,newUrl:i,pathname:a}}}function lc(e,t){if(t.bodyUsed)throw new g(So);return new Request(e,{method:t.method,headers:t.headers,body:t.body,referrer:t.referrer,referrerPolicy:t.referrerPolicy,mode:t.mode,credentials:t.credentials,cache:t.cache,redirect:t.redirect,integrity:t.integrity,signal:t.signal,keepalive:t.keepalive,duplex:"half"})}function WA(e,t){Reflect.set(e,Bl,encodeURIComponent(t))}var Sc=Symbol.for("context.routes"),an=class e{constructor(t,r,n,o,s,i,a,l=new $e(s),u=$t(i,o),c=new URL(s.url),p={},d=void 0){this.pipeline=t,this.locals=r,this.middleware=n,this.pathname=o,this.request=s,this.routeData=i,this.status=a,this.cookies=l,this.params=u,this.url=c,this.props=p,this.partial=d}isRewriting=!1;counter=0;static async create({locals:t={},middleware:r,pathname:n,pipeline:o,request:s,routeData:i,status:a=200,props:l,partial:u=void 0}){let c=await o.getMiddleware();return WA(s,n),new e(o,t,xc(...o.internalMiddleware,r??c),n,s,i,a,void 0,void 0,void 0,l,u)}async render(t,r={}){let{cookies:n,middleware:o,pipeline:s}=this,{logger:i,serverLike:a,streaming:l}=s,u=!a||this.routeData.prerender,c=Object.keys(this.props).length>0?this.props:await JA({mod:t,routeData:this.routeData,routeCache:this.pipeline.routeCache,pathname:this.pathname,logger:i,serverLike:a}),p=this.createAPIContext(c,u);if(this.counter++,this.counter===4)return new Response("Loop Detected",{status:508,statusText:"Astro detected a loop where you tried to call the rewriting logic more than four times."});let f=await xA(o,p,async(h,A)=>{if(A){s.logger.debug("router","Called rewriting to:",A);let{routeData:w,componentInstance:k,pathname:P,newUrl:z}=await s.tryRewrite(A,this.request);this.routeData=w,t=k,A instanceof Request?this.request=A:this.request=lc(z,this.request),this.isRewriting=!0,this.url=new URL(this.request.url),this.cookies=new $e(this.request),this.params=$t(w,P),this.pathname=P,this.status=200}let E;switch(this.routeData.type){case"endpoint":{E=await Il(t,h,a,i);break}case"redirect":return KA(this);case"page":{let w=await this.createResult(t);try{E=await Gl(w,t?.default,c,r,l,this.routeData)}catch(k){throw w.cancelled=!0,k}E.headers.set(rt,"page"),(this.routeData.route==="/404"||this.routeData.route==="/500")&&E.headers.set(ie,"no"),this.isRewriting&&E.headers.set(vl,xl);break}case"fallback":return new Response(null,{status:500,headers:{[rt]:"fallback"}})}let C=dc(E);return C&&n.merge(C),E});return f.headers.get(rt)&&f.headers.delete(rt),hA(f,n),f}createAPIContext(t,r){let n=this.createActionAPIContext(),o=(s,i=302)=>new Response(null,{status:i,headers:{Location:s}});return Reflect.set(n,Sc,this.pipeline),Object.assign(n,{props:t,redirect:o,getActionResult:sc(n.locals),callAction:ic(n),_isPrerendered:r})}async#t(t){this.pipeline.logger.debug("router","Calling rewrite: ",t);let{routeData:r,componentInstance:n,newUrl:o,pathname:s}=await this.pipeline.tryRewrite(t,this.request);return this.routeData=r,t instanceof Request?this.request=t:this.request=lc(o,this.request),this.url=new URL(this.request.url),this.cookies=new $e(this.request),this.params=$t(r,s),this.pathname=s,this.isRewriting=!0,this.status=200,await this.render(n)}createActionAPIContext(){let t=this,{cookies:r,params:n,pipeline:o,url:s}=this,i=`Astro v${Go}`;return{cookies:r,get clientAddress(){return t.clientAddress()},get currentLocale(){return t.computeCurrentLocale()},generator:i,get locals(){return t.locals},set locals(l){if(typeof l!="object")throw new g(Fr);t.locals=l,Reflect.set(this.request,zo,l)},params:n,get preferredLocale(){return t.computePreferredLocale()},get preferredLocaleList(){return t.computePreferredLocaleList()},rewrite:async l=>await this.#t(l),request:this.request,site:o.site,url:s}}async createResult(t){let{cookies:r,pathname:n,pipeline:o,routeData:s,status:i}=this,{clientDirectives:a,inlinedScripts:l,compressHTML:u,manifest:c,renderers:p,resolve:d}=o,{links:f,scripts:h,styles:A}=await o.headElements(s),E=await o.componentMetadata(s)??c.componentMetadata,C=new Headers({"Content-Type":"text/html"}),w=typeof this.partial=="boolean"?this.partial:!!t.partial,k={status:i,statusText:"OK",get headers(){return C},set headers(Ke){throw new g(vo)}},P=gc(this.locals)?cs(this.locals._actionPayload.actionResult):void 0,z={base:c.base,cancelled:!1,clientDirectives:a,inlinedScripts:l,componentMetadata:E,compressHTML:u,cookies:r,createAstro:(Ke,v,b)=>this.createAstro(z,Ke,v,b),links:f,params:this.params,partial:w,pathname:n,renderers:p,resolve:d,response:k,request:this.request,scripts:h,styles:A,actionResult:P,serverIslandNameMap:c.serverIslandNameMap??new Map,key:c.key,trailingSlash:c.trailingSlash,_metadata:{hasHydrationScript:!1,rendererSpecificHydrationScripts:new Set,hasRenderedHead:!1,renderedScripts:new Set,hasDirectives:new Set,headInTree:!1,extraHead:[],propagators:new Set}};return z}#r;createAstro(t,r,n,o){let s;this.isRewriting?s=this.#r=this.createAstroPagePartial(t,r):s=this.#r??=this.createAstroPagePartial(t,r);let i={props:n,self:null},a=Object.assign(Object.create(s),i),l;return Object.defineProperty(a,"slots",{get:()=>(l||(l=new ms(t,o,this.pipeline.logger)),l)}),a}createAstroPagePartial(t,r){let n=this,{cookies:o,locals:s,params:i,pipeline:a,url:l}=this,{response:u}=t,c=(d,f=302)=>{if(this.request[Xr])throw new g({...Pe});return new Response(null,{status:f,headers:{Location:d}})},p=async d=>await this.#t(d);return{generator:r.generator,glob:r.glob,cookies:o,get clientAddress(){return n.clientAddress()},get currentLocale(){return n.computeCurrentLocale()},params:i,get preferredLocale(){return n.computePreferredLocale()},get preferredLocaleList(){return n.computePreferredLocaleList()},locals:s,redirect:c,rewrite:p,request:this.request,response:u,site:a.site,getActionResult:sc(s),get callAction(){return ic(this)},url:l}}clientAddress(){let{pipeline:t,request:r}=this;if(Wr in r)return Reflect.get(r,Wr);if(t.serverLike){if(r.body===null)throw new g(fo);if(t.adapterName)throw new g({...Br,message:Br.message(t.adapterName)})}throw new g(ho)}#e;computeCurrentLocale(){let{url:t,pipeline:{i18n:r},routeData:n}=this;if(!r)return;let{defaultLocale:o,locales:s,strategy:i}=r,a=i==="pathname-prefix-other-locales"||i==="domains-prefix-other-locales"?o:void 0;if(this.#e)return this.#e;let l,u=n.pathname&&!zA(n)?n.pathname:t.pathname;return l=vA(u,s,o),this.#e=l??a,this.#e}#o;computePreferredLocale(){let{pipeline:{i18n:t},request:r}=this;if(t)return this.#o??=EA(r,t.locales)}#n;computePreferredLocaleList(){let{pipeline:{i18n:t},request:r}=this;if(t)return this.#n??=CA(r,t.locales)}};function XA(e,t){if(!t)return"";if(typeof t=="string")return t;let r=e.slice(1);return t[r]?t[r]:t.fallback}function Es(e,t,r){if(r){let n=XA(Oa(e),r);return Ce(n,co(e))}else return t?xt(Ce(t,co(e))):e}function ZA(e,t,r){return e.type==="inline"?{props:{},children:e.content}:{props:{rel:"stylesheet",href:Es(e.src,t,r)},children:""}}function em(e,t,r){return new Set(e.map(n=>ZA(n,t,r)))}function tm(e,t,r){return e.type==="external"?rm(e.value,t,r):{props:{type:"module"},children:e.value}}function rm(e,t,r){return{props:{type:"module",src:Es(e,t,r)},children:""}}var gs=class e extends As{#t;static create(t,{logger:r,manifest:n,mode:o,renderers:s,resolve:i,serverLike:a,streaming:l,defaultRoutes:u}){let c=new e(r,n,o,s,i,a,l,void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,u);return c.#t=t,c}headElements(t){let r=this.manifest.routes.find(i=>i.routeData===t),n=new Set,o=new Set,s=em(r?.styles??[]);for(let i of r?.scripts??[])"stage"in i?i.stage==="head-inline"&&o.add({props:{},children:i.children}):o.add(tm(i));return{links:n,styles:s,scripts:o}}componentMetadata(){}async getComponentByRoute(t){return(await this.getModuleForRoute(t)).page()}async tryRewrite(t,r){let{newUrl:n,pathname:o,routeData:s}=YA({payload:t,request:r,routes:this.manifest?.routes.map(a=>a.routeData),trailingSlash:this.manifest.trailingSlash,buildFormat:this.manifest.buildFormat,base:this.manifest.base}),i=await this.getComponentByRoute(s);return{newUrl:n,pathname:o,componentInstance:i,routeData:s}}async getModuleForRoute(t){for(let r of this.defaultRoutes)if(t.component===r.component)return{page:()=>Promise.resolve(r.instance),renderers:[]};if(t.type==="redirect")return HA;if(this.manifest.pageMap){let r=this.manifest.pageMap.get(t.component);if(!r)throw new Error(`Unexpectedly unable to find a component instance for route ${t.route}`);return await r()}else if(this.manifest.pageModule)return this.manifest.pageModule;throw new Error("Astro couldn't find the correct page to render, probably because it wasn't correctly mapped for SSR usage. This is an internal error, please file an issue.")}},ys=class e{#t;#r;#e=new ds({dest:yA,level:"info"});#o;#n;#s;#a=!1;constructor(t,r=!0){this.#t=t,this.#r=jA(t,{routes:t.routes.map(n=>n.routeData)}),this.#o=St(this.#t.base),this.#n=this.#u(this.#r,r),this.#s=new sn(this.#e.options,this.#t.adapterName)}getAdapterLogger(){return this.#s}#u(t,r=!1){return gs.create(t,{logger:this.#e,manifest:this.#t,mode:"production",renderers:this.#t.renderers,defaultRoutes:vc(this.#t),resolve:async n=>{if(!(n in this.#t.entryModules))throw new Error(`Unable to resolve [${n}]`);let o=this.#t.entryModules[n];return o.startsWith("data:")||o.length===0?o:Es(o,this.#t.base,this.#t.assetsPrefix)},serverLike:!0,streaming:r})}set setManifestData(t){this.#r=t}removeBase(t){return t.startsWith(this.#t.base)?t.slice(this.#o.length+1):t}#c(t){let r=new URL(t.url);return xt(this.removeBase(r.pathname))}match(t){let r=new URL(t.url);if(this.#t.assets.has(r.pathname))return;let n=this.#p(t);n||(n=xt(this.removeBase(r.pathname)));let o=ac(n,this.#r);if(!(!o||o.prerender))return o}#p(t){let r,n=new URL(t.url);if(this.#t.i18n&&(this.#t.i18n.strategy==="domains-prefix-always"||this.#t.i18n.strategy==="domains-prefix-other-locales"||this.#t.i18n.strategy==="domains-prefix-always-no-redirect")){let o=t.headers.get("X-Forwarded-Host"),s=t.headers.get("X-Forwarded-Proto");if(s?s=s+":":s=n.protocol,o||(o=t.headers.get("Host")),o&&s){o=o.split(":")[0];try{let i,a=new URL(`${s}//${o}`);for(let[l,u]of Object.entries(this.#t.i18n.domainLookupTable)){let c=new URL(l);if(a.host===c.host&&a.protocol===c.protocol){i=u;break}}i&&(r=xt(Ce(H(i),this.removeBase(n.pathname))),n.pathname.endsWith("/")&&(r=xr(r)))}catch(i){this.#e.error("router",`Astro tried to parse ${s}//${o} as an URL, but it threw a parsing error. Check the X-Forwarded-Host and X-Forwarded-Proto headers.`),this.#e.error("router",`Error: ${i}`)}}}return r}async render(t,r,n){let o,s,i,a;if(r&&("addCookieHeader"in r||"clientAddress"in r||"locals"in r||"routeData"in r)?("addCookieHeader"in r&&(a=r.addCookieHeader),"clientAddress"in r&&(i=r.clientAddress),"routeData"in r&&(o=r.routeData),"locals"in r&&(s=r.locals)):(o=r,s=n,(r||s)&&this.#d()),o&&(this.#e.debug("router","The adapter "+this.#t.adapterName+" provided a custom RouteData for ",t.url),this.#e.debug("router",`RouteData:
`+o)),s){if(typeof s!="object"){let p=new g(Fr);return this.#e.error(null,p.stack),this.#i(t,{status:500,error:p})}Reflect.set(t,zo,s)}if(i&&Reflect.set(t,Wr,i),o||(o=this.match(t),this.#e.debug("router","Astro matched the following route for "+t.url),this.#e.debug("router",`RouteData:
`+o)),!o)return this.#e.debug("router","Astro hasn't found routes that match "+t.url),this.#e.debug("router",`Here's the available routes:
`,this.#r),this.#i(t,{locals:s,status:404});let l=this.#c(t),u=this.#f(o,l),c;try{let p=await this.#n.getModuleForRoute(o);c=await(await an.create({pipeline:this.#n,locals:s,pathname:l,request:t,routeData:o,status:u})).render(await p.page())}catch(p){return this.#e.error(null,p.stack||p.message||String(p)),this.#i(t,{locals:s,status:500,error:p})}if(Vo.includes(c.status)&&c.headers.get(ie)!=="no")return this.#i(t,{locals:s,response:c,status:c.status,error:c.status===500?null:void 0});if(c.headers.has(ie)&&c.headers.delete(ie),a)for(let p of e.getSetCookieFromResponse(c))c.headers.append("set-cookie",p);return Reflect.set(c,Xr,!0),c}#d(){this.#a||(this.#e.warn("deprecated",`The adapter ${this.#t.adapterName} is using a deprecated signature of the 'app.render()' method. From Astro 4.0, locals and routeData are provided as properties on an optional object to this method. Using the old signature will cause an error in Astro 5.0. See https://github.com/withastro/astro/pull/9199 for more information.`),this.#a=!0)}setCookieHeaders(t){return oc(t)}static getSetCookieFromResponse=oc;async#i(t,{locals:r,status:n,response:o,skipMiddleware:s=!1,error:i}){let a=`/${n}${this.#t.trailingSlash==="always"?"/":""}`,l=ac(a,this.#r),u=new URL(t.url);if(l){if(l.prerender){let d=l.route.endsWith(`/${n}`)?".html":"",f=new URL(`${this.#o}/${n}${d}`,u);if(f.toString()!==t.url){let h=await fetch(f.toString()),A={status:n};return this.#l(h,o,A)}}let p=await this.#n.getModuleForRoute(l);try{let f=await(await an.create({locals:r,pipeline:this.#n,middleware:s?lt:void 0,pathname:this.#c(t),request:t,routeData:l,status:n,props:{error:i}})).render(await p.page());return this.#l(f,o)}catch{if(s===!1)return this.#i(t,{locals:r,status:n,response:o,skipMiddleware:!0})}}let c=this.#l(new Response(null,{status:n}),o);return Reflect.set(c,Xr,!0),c}#l(t,r,n){if(!r)return n!==void 0?new Response(t.body,{status:n.status,statusText:t.statusText,headers:t.headers}):t;let o=n?.status?n.status:r.status===200?t.status:r.status;try{r.headers.delete("Content-type")}catch{}return new Response(t.body,{status:o,statusText:o===200?t.statusText:r.statusText,headers:new Headers([...Array.from(t.headers),...Array.from(r.headers)])})}#f(t,r){if(!t.pattern.test(r)){for(let o of t.fallbackRoutes)if(o.pattern.test(r))return 302}let n=St(t.route);return n.endsWith("/404")?404:n.endsWith("/500")?500:200}},nm=typeof process=="object"&&Object.prototype.toString.call(process)==="[object process]";function om(){return new Proxy({},{get:(e,t)=>{console.warn(`Unable to access \`import.meta\0.env.${t.toString()}\` on initialization as the Cloudflare platform only provides the environment variables per request. Please move the environment variable access inside a function that's only called after a request has been received.`)}})}nm||(process.env=om());function Cs(e){let t=new ys(e);return{onRequest:async n=>{let o=n.request,{env:s}=n;process.env=s;let{pathname:i}=new URL(o.url);if(e.assets.has(i))return s.ASSETS.fetch(o);let a=t.match(o);Reflect.set(o,Symbol.for("astro.clientAddress"),o.headers.get("cf-connecting-ip"));let l={runtime:{waitUntil:c=>{n.waitUntil(c)},env:n.env,cf:o.cf,caches}},u=await t.render(o,a,l);if(t.setCookieHeaders)for(let c of t.setCookieHeaders(u))u.headers.append("Set-Cookie",c);return u},manifest:e}}var vs=Object.freeze(Object.defineProperty({__proto__:null,createExports:Cs},Symbol.toStringTag,{value:"Module"}));Bt();var H0=Qe(ss(),1);It();it();et();function sm(e){return Object.fromEntries(Object.entries(e).map(([t,r])=>typeof r=="string"?[t,r.normalize().replace(/#/g,"%23").replace(/\?/g,"%3F")]:[t,r]))}function im(e,t){if(e.spread)return t[e.content.slice(3)]||"";if(e.dynamic){if(!t[e.content])throw new TypeError(`Missing parameter: ${e.content}`);return t[e.content]}return e.content.normalize().replace(/\?/g,"%3F").replace(/#/g,"%23").replace(/%5B/g,"[").replace(/%5D/g,"]")}function am(e,t){let r=e.map(n=>im(n,t)).join("");return r?"/"+r:""}function lm(e,t){return r=>{let n=sm(r),o="";return t==="always"&&e.length&&(o="/"),e.map(i=>am(i,n)).join("")+o||"/"}}function ln(e){return{route:e.route,type:e.type,pattern:new RegExp(e.pattern),params:e.params,component:e.component,generate:lm(e.segments,e._meta.trailingSlash),pathname:e.pathname||void 0,segments:e.segments,prerender:e.prerender,redirect:e.redirect,redirectRoute:e.redirectRoute?ln(e.redirectRoute):void 0,fallbackRoutes:e.fallbackRoutes.map(t=>ln(t)),isIndex:e.isIndex}}function cm(e){let t=[];for(let l of e.routes){t.push({...l,routeData:ln(l.routeData)});let u=l;u.routeData=ln(l.routeData)}let r=new Set(e.assets),n=new Map(e.componentMetadata),o=new Map(e.inlinedScripts),s=new Map(e.clientDirectives),i=new Map(e.serverIslandNameMap),a=Kl(e.key);return{middleware(){return{onRequest:lt}},...e,assets:r,componentMetadata:n,inlinedScripts:o,clientDirectives:s,routes:t,serverIslandNameMap:i,key:a}}var Bc=cm({hrefRoot:"file:///home/snoob/Documents/GitHub/thelorebook/apps/astro/",adapterName:"@astrojs/cloudflare",routes:[{file:"",links:[],scripts:[],styles:[],routeData:{type:"endpoint",isIndex:!1,route:"/_image",pattern:"^\\/_image$",segments:[[{content:"_image",dynamic:!1,spread:!1}]],params:[],component:"../../node_modules/astro/dist/assets/endpoint/generic.js",pathname:"/_image",prerender:!1,fallbackRoutes:[],_meta:{trailingSlash:"ignore"}}},{file:"",links:[],scripts:[],styles:[{type:"external",src:"/_astro/index.CDssZtat.css"}],routeData:{route:"/",isIndex:!0,type:"page",pattern:"^\\/$",segments:[],params:[],component:"src/pages/index.astro",pathname:"/",prerender:!1,fallbackRoutes:[],_meta:{trailingSlash:"ignore"}}}],base:"/",trailingSlash:"ignore",compressHTML:!0,componentMetadata:[["/home/snoob/Documents/GitHub/thelorebook/apps/astro/src/pages/index.astro",{propagation:"none",containsHead:!0}]],renderers:[],clientDirectives:[["idle",'(()=>{var l=(o,t)=>{let i=async()=>{await(await o())()},e=typeof t.value=="object"?t.value:void 0,s={timeout:e==null?void 0:e.timeout};"requestIdleCallback"in window?window.requestIdleCallback(i,s):setTimeout(i,s.timeout||200)};(self.Astro||(self.Astro={})).idle=l;window.dispatchEvent(new Event("astro:idle"));})();'],["load",'(()=>{var e=async t=>{await(await t())()};(self.Astro||(self.Astro={})).load=e;window.dispatchEvent(new Event("astro:load"));})();'],["media",'(()=>{var s=(i,t)=>{let a=async()=>{await(await i())()};if(t.value){let e=matchMedia(t.value);e.matches?a():e.addEventListener("change",a,{once:!0})}};(self.Astro||(self.Astro={})).media=s;window.dispatchEvent(new Event("astro:media"));})();'],["only",'(()=>{var e=async t=>{await(await t())()};(self.Astro||(self.Astro={})).only=e;window.dispatchEvent(new Event("astro:only"));})();'],["visible",'(()=>{var l=(s,i,o)=>{let r=async()=>{await(await s())()},t=typeof i.value=="object"?i.value:void 0,c={rootMargin:t==null?void 0:t.rootMargin},n=new IntersectionObserver(e=>{for(let a of e)if(a.isIntersecting){n.disconnect(),r();break}},c);for(let e of o.children)n.observe(e)};(self.Astro||(self.Astro={})).visible=l;window.dispatchEvent(new Event("astro:visible"));})();']],entryModules:{"\0noop-middleware":"_noop-middleware.mjs","\0@astro-page:../../node_modules/astro/dist/assets/endpoint/generic@_@js":"pages/_image.astro.mjs","\0@astro-page:src/pages/index@_@astro":"pages/index.astro.mjs","\0@astrojs-ssr-virtual-entry":"_worker.mjs","\0@astro-renderers":"renderers.mjs","\0@astrojs-ssr-adapter":"_@astrojs-ssr-adapter.mjs","\0@astrojs-manifest":"manifest_CxoDNvAq.mjs","/home/snoob/Documents/GitHub/thelorebook/node_modules/@astrojs/react/vnode-children.js":"chunks/vnode-children_BkR_XoPb.mjs","/home/snoob/Documents/GitHub/thelorebook/apps/astro/src/components/react/hero.tsx":"_astro/hero.Bzp6wT6v.js","@astrojs/react/client.js":"_astro/client.BIGLHmRd.js","astro:scripts/before-hydration.js":""},inlinedScripts:[],assets:["/_astro/index.CDssZtat.css","/favicon.svg","/$server_build/_@astrojs-ssr-adapter.mjs","/$server_build/_noop-middleware.mjs","/$server_build/_worker.mjs","/$server_build/renderers.mjs","/_astro/client.BIGLHmRd.js","/_astro/hero.Bzp6wT6v.js","/_astro/index.DhYZZe0J.js","/$server_build/_astro/index.CDssZtat.css","/$server_build/chunks/_@astrojs-ssr-adapter_Jt8MxScX.mjs","/$server_build/chunks/astro-designed-error-pages_Bziop198.mjs","/$server_build/chunks/astro_gteJLWDK.mjs","/$server_build/chunks/vnode-children_BkR_XoPb.mjs","/$server_build/pages/_image.astro.mjs","/$server_build/pages/index.astro.mjs","/$server_build/chunks/astro/assets-service_FHeALfmD.mjs","/$server_build/chunks/astro/server_DjuvqM6M.mjs"],buildFormat:"directory",checkOrigin:!1,serverIslandNameMap:[],key:"XMx2cgpZ/xP5iNDxFIYEdMfkSIpd4Oncrc+lmRD2js0=",experimentalEnvGetSecretEnabled:!1});var zg=()=>Promise.resolve().then(()=>(Hc(),Oc)),Yg=()=>Promise.resolve().then(()=>(Yc(),zc)),Wg=new Map([["../../node_modules/astro/dist/assets/endpoint/generic.js",zg],["src/pages/index.astro",Yg]]),Xg=new Map,eu=Object.assign(Bc,{pageMap:Wg,serverIslandMap:Xg,renderers:Ye,middleware:()=>Promise.resolve().then(()=>(Xc(),Wc))}),Zg=void 0,tu=Cs(eu),uw=tu.onRequest,pw=tu.manifest,Zc="start";Zc in vs&&vs[Zc](eu,Zg);export{pw as manifest,uw as onRequest,Wg as pageMap};
/**
 * shortdash - https://github.com/bibig/node-shorthash
 *
 * @license
 *
 * (The MIT License)
 *
 * Copyright (c) 2013 Bibig <bibig@me.com>
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 */
/*! Bundled license information:

react/cjs/react.production.min.js:
  (**
   * @license React
   * react.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server-legacy.browser.production.min.js:
  (**
   * @license React
   * react-dom-server-legacy.browser.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-server.browser.production.min.js:
  (**
   * @license React
   * react-dom-server.browser.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

cssesc/cssesc.js:
  (*! https://mths.be/cssesc v3.0.0 by @mathias *)

cookie/index.js:
  (*!
   * cookie
   * Copyright(c) 2012-2014 Roman Shtylman
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   *)

react/cjs/react-jsx-runtime.production.min.js:
  (**
   * @license React
   * react-jsx-runtime.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
</file>

<file path="apps/astro/package.json">
{
  "name": "@acme/astro",
  "type": "module",
  "version": "0.0.1",
  "scripts": {
    "dev": "astro dev",
    "start": "astro dev",
    "build": "astro check && astro build",
    "preview": "astro preview",
    "astro": "astro",
    "clean": "git clean -xdf .cache .next .turbo node_modules",
    "deploy": "wrangler pages deploy dist",
    "deploy:prod": "wrangler pages deploy dist --env production"
  },
  "dependencies": {
    "@astrojs/check": "^0.9.4",
    "@astrojs/cloudflare": "^8.1.0",
    "@astrojs/react": "^3.6.2",
    "@astrojs/tailwind": "^5.1.1",
    "@headlessui/react": "^2.1.9",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-slot": "^1.1.0",
    "astro": "^4.15.12",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "framer-motion": "^11.11.1",
    "lucide-react": "^0.447.0",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-player": "^2.16.0",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "^5.3.3"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/prettier-config": "workspace:*",
    "@acme/tailwind-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "@types/react": "~18.3.12",
    "@types/react-dom": "18.3.0",
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.13"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="apps/astro/postcss.config.js">
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
</file>

<file path="apps/astro/public/favicon.svg">
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 128 128">
    <path d="M50.4 78.5a75.1 75.1 0 0 0-28.5 6.9l24.2-65.7c.7-2 1.9-3.2 3.4-3.2h29c1.5 0 2.7 1.2 3.4 3.2l24.2 65.7s-11.6-7-28.5-7L67 45.5c-.4-1.7-1.6-2.8-2.9-2.8-1.3 0-2.5 1.1-2.9 2.7L50.4 78.5Zm-1.1 28.2Zm-4.2-20.2c-2 6.6-.6 15.8 4.2 20.2a17.5 17.5 0 0 1 .2-.7 5.5 5.5 0 0 1 5.7-4.5c2.8.1 4.3 1.5 4.7 4.7.2 1.1.2 2.3.2 3.5v.4c0 2.7.7 5.2 2.2 7.4a13 13 0 0 0 5.7 4.9v-.3l-.2-.3c-1.8-5.6-.5-9.5 4.4-12.8l1.5-1a73 73 0 0 0 3.2-2.2 16 16 0 0 0 6.8-11.4c.3-2 .1-4-.6-6l-.8.6-1.6 1a37 37 0 0 1-22.4 2.7c-5-.7-9.7-2-13.2-6.2Z" />
    <style>
        path { fill: #000; }
        @media (prefers-color-scheme: dark) {
            path { fill: #FFF; }
        }
    </style>
</svg>
</file>

<file path="apps/astro/README.md">
# Astro Starter Kit: Minimal

```sh
npm create astro@latest -- --template minimal
```

[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/withastro/astro/tree/latest/examples/minimal)
[![Open with CodeSandbox](https://assets.codesandbox.io/github/button-edit-lime.svg)](https://codesandbox.io/p/sandbox/github/withastro/astro/tree/latest/examples/minimal)
[![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://codespaces.new/withastro/astro?devcontainer_path=.devcontainer/minimal/devcontainer.json)

> 🧑‍🚀 **Seasoned astronaut?** Delete this file. Have fun!

## 🚀 Project Structure

Inside of your Astro project, you'll see the following folders and files:

```text
/
├── public/
├── src/
│   └── pages/
│       └── index.astro
└── package.json
```

Astro looks for `.astro` or `.md` files in the `src/pages/` directory. Each page is exposed as a route based on its file name.

There's nothing special about `src/components/`, but that's where we like to put any Astro/React/Vue/Svelte/Preact components.

Any static assets, like images, can be placed in the `public/` directory.

## 🧞 Commands

All commands are run from the root of the project, from a terminal:

| Command                   | Action                                           |
| :------------------------ | :----------------------------------------------- |
| `npm install`             | Installs dependencies                            |
| `npm run dev`             | Starts local dev server at `localhost:4321`      |
| `npm run build`           | Build your production site to `./dist/`          |
| `npm run preview`         | Preview your build locally, before deploying     |
| `npm run astro ...`       | Run CLI commands like `astro add`, `astro check` |
| `npm run astro -- --help` | Get help using the Astro CLI                     |

## 👀 Want to learn more?

Feel free to check [our documentation](https://docs.astro.build) or jump into our [Discord server](https://astro.build/chat).
</file>

<file path="apps/astro/src/components/react/hero.tsx">
export function Hero() {
  return (
    <div className="bg-white">
      <div className="mx-auto max-w-7xl px-4 py-24 text-center sm:px-6 md:py-48 lg:px-8">
        <span className="font-serif text-xl uppercase tracking-widest text-gray-500">
          The Lore Book
        </span>
        <h2 className="font-avenir-reg mt-2 text-4xl font-extrabold tracking-tight text-gray-900 sm:text-5xl">
          Create compelling narratives for your life.
        </h2>

        <p className="mx-auto mt-6 max-w-2xl text-lg text-gray-500">
          Download now
        </p>
      </div>
    </div>
  );
}
</file>

<file path="apps/astro/src/components/ui/button.tsx">
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
</file>

<file path="apps/astro/src/components/ui/dialog.tsx">
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { Cross2Icon } from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}
</file>

<file path="apps/astro/src/components/ui/input.tsx">
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }
</file>

<file path="apps/astro/src/env.d.ts">
/// <reference types="astro/client" />
</file>

<file path="apps/astro/src/layouts/Layout.astro">
---
import '../styles/globals.css';
// Example prop for page titles (you can add more props as needed)
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <title>{title}</title>
</head>
<body>
  <main class="mx-auto py-8">
    <slot /> {/* This is where the page content will be injected */}
  </main>
</body>
</html>
</file>

<file path="apps/astro/src/lib/utils.ts">
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
</file>

<file path="apps/astro/src/pages/index.astro">
---
import Layout from '../layouts/Layout.astro';
import {Hero} from '../components/react/hero.tsx'
import '@/styles/globals.css'
---

<Layout title="The Lore Book: The greatest story ever told is yours.">
  <Hero client:load />
</Layout>
</file>

<file path="apps/astro/src/styles/globals.css">
@tailwind base;
@tailwind components;
@tailwind utilities;
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem
  }
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%
  }
}
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
</file>

<file path="apps/astro/tailwind.config.js">
/** @type {import('tailwindcss').Config} */
export default {
    darkMode: ['class'],
    content: [
    './src/**/*.{astro,html,js,jsx,ts,tsx}', // Make sure Astro files are included
  ],
  theme: {
  	extend: {
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
}
</file>

<file path="apps/astro/tsconfig.json">
{
  "extends": "astro/tsconfigs/base",
  "compilerOptions": {
    "jsx": "react-jsx",
    "jsxImportSource": "react",
    "baseUrl": ".",
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    "strictNullChecks": true
  }
}
</file>

<file path="apps/astro/turbo.json">
{
  "$schema": "https://turborepo.org/schema.json",
  "extends": ["//"],
  "tasks": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": [".astro/**"]
    },
    "dev": {
      "persistent": true
    }
  }
}
</file>

<file path="apps/astro/wrangler.toml">
name = "lorebook-web"
compatibility_date = "2024-03-20"
compatibility_flags = ["nodejs_compat"]

[site]
bucket = "./dist"
pages_build_output_dir = "dist"

[build]
command = "pnpm run build"

[env.production]
name = "lorebook-web-prod"

[env.development]
name = "lorebook-web-dev"
</file>

<file path="apps/expo/.env.example">
EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY=
</file>

<file path="apps/expo/.npmrc">
node-linker=hoisted
</file>

<file path="apps/expo/app.json">
{
  "expo": {
    "name": "expo-app",
    "slug": "expo-app",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "newArchEnabled": true,
    "userInterfaceStyle": "automatic",
    "ios": {
      "supportsTablet": true
    },
    "splash": {
      "image": "./assets/images/splash.png",
      "backgroundColor": "#08080b"
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      },
      "package": "com.anonymous.expoapp"
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router"
    ]
  }
}
</file>

<file path="apps/expo/app/_layout.tsx">
import {Stack} from 'expo-router';
import 'react-native-reanimated';
import {TRPCProvider} from "@/utils/TRPCProvider.tsx";
import {ClerkProvider, ClerkLoaded} from '@clerk/clerk-expo'
import * as SecureStore from 'expo-secure-store'
import { View } from 'react-native';

export default function RootLayoutNav() {
  const tokenCache = {
    async getToken(key: string) {
      try {
        const item = await SecureStore.getItemAsync(key)
        if (item) {
          console.log(`${key} was used 🔐 \n`)
        } else {
          console.log('No values stored under key: ' + key)
        }
        return item
      } catch (error) {
        console.error('SecureStore get item error: ', error)
        await SecureStore.deleteItemAsync(key)
        return null
      }
    },
    async saveToken(key: string, value: string) {
      try {
        return SecureStore.setItemAsync(key, value)
      } catch (err) {
        return
      }
    },
  }
  const publishableKey = process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY!
  if (!publishableKey) {
    throw new Error('Add EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY to your .env file')
  }
  return (
    <View style={{ flex: 1, backgroundColor: '#121212' }}>
      <ClerkProvider tokenCache={tokenCache} publishableKey={publishableKey}>
        <TRPCProvider>
          <Stack screenOptions={{
            headerShown: false,
            contentStyle: { backgroundColor: '#121212' }
          }}>
            <Stack.Screen 
              name="(tabs)" 
              options={{
                headerShown: false,
                contentStyle: { backgroundColor: '#121212' }
              }}
            />
          </Stack>
        </TRPCProvider>
      </ClerkProvider>
    </View>
  );
}
</file>

<file path="apps/expo/app/(auth)/_layout.tsx">
import { Redirect, Stack } from 'expo-router'
import { useAuth } from '@clerk/clerk-expo'

export default function AuthRoutesLayout() {
  const { isSignedIn } = useAuth()

  if (isSignedIn) {
    return <Redirect href={'/'} />
  }

  return <Stack screenOptions={{
          headerShown: false,
        }} />
}
</file>

<file path="apps/expo/app/(auth)/sign-in.tsx">
import * as React from 'react'
import {
  Text,
  TextInput,
  TouchableOpacity,
  View,
  KeyboardAvoidingView,
  Platform,
  StyleSheet,
  TouchableWithoutFeedback,
  Keyboard,
  Image,
  Dimensions
} from 'react-native'
import { useSignIn } from '@clerk/clerk-expo'
import { useRouter } from 'expo-router'
import { LinearGradient } from 'expo-linear-gradient'

export default function SignInScreen() {
  const { signIn, setActive, isLoaded } = useSignIn()
  const router = useRouter()

  const [emailAddress, setEmailAddress] = React.useState('')
  const [password, setPassword] = React.useState('')

  const onSignInPress = React.useCallback(async () => {
    if (!isLoaded) {
      return
    }

    try {
      const signInAttempt = await signIn.create({
        identifier: emailAddress,
        password,
      })

      if (signInAttempt.status === 'complete') {
        await setActive({ session: signInAttempt.createdSessionId })
        router.replace('/')
      } else {
        console.error(JSON.stringify(signInAttempt, null, 2))
      }
    } catch (err: any) {
      console.error(JSON.stringify(err, null, 2))
    }
  }, [isLoaded, emailAddress, password])

  const navigateToSignUp = () => {
    router.replace('/sign-up')
  }

  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}>
      <View style={styles.container}>
        <Image
          source={require('../../assets/ai-bg.png')}
          style={styles.backgroundImage}
          resizeMode="cover"
        />
        <LinearGradient
          colors={['rgba(0,0,0,0.6)', 'rgba(0,0,0,0.3)']}
          style={styles.overlay}
        />
        <KeyboardAvoidingView
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.keyboardContainer}
        >
          <View style={styles.card}>
            <Text style={styles.headerText}>Welcome Back</Text>
            <Text style={styles.subHeaderText}>Sign In to Continue</Text>

            <TextInput
              style={styles.input}
              autoCapitalize="none"
              value={emailAddress}
              placeholder="Email"
              placeholderTextColor="#888"
              onChangeText={(emailAddress) => setEmailAddress(emailAddress)}
            />

            <TextInput
              style={styles.input}
              value={password}
              placeholder="Password"
              placeholderTextColor="#888"
              secureTextEntry={true}
              onChangeText={(password) => setPassword(password)}
            />

            <TouchableOpacity
              style={styles.primaryButton}
              onPress={onSignInPress}
            >
              <Text style={styles.buttonText}>Sign In</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.secondaryButton}
              onPress={navigateToSignUp}
            >
              <Text style={styles.secondaryButtonText}>
                Don't have an account? Sign Up
              </Text>
            </TouchableOpacity>
          </View>
        </KeyboardAvoidingView>
      </View>
    </TouchableWithoutFeedback>
  )
}

const { width, height } = Dimensions.get('window')

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000'
  },
  backgroundImage: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: width,
    height: height,
    opacity: 0.5
  },
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  keyboardContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16
  },
  card: {
    width: '90%',
    backgroundColor: 'rgba(255,255,255,0.9)',
    borderRadius: 20,
    padding: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 6,
    elevation: 5
  },
  headerText: {
    fontSize: 32,
    fontWeight: '800',
    textAlign: 'center',
    marginBottom: 16,
    color: '#333',
    letterSpacing: -1
  },
  subHeaderText: {
    fontSize: 20,
    fontWeight: '600',
    textAlign: 'center',
    marginBottom: 24,
    color: '#666'
  },
  input: {
    backgroundColor: 'rgba(240,240,240,0.9)',
    borderWidth: 1,
    borderColor: 'rgba(200,200,200,0.5)',
    padding: 15,
    borderRadius: 12,
    marginBottom: 16,
    fontSize: 16,
    color: '#333'
  },
  primaryButton: {
    backgroundColor: '#007bff',
    padding: 15,
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#007bff',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 3
  },
  buttonText: {
    color: 'white',
    textAlign: 'center',
    fontWeight: 'bold',
    fontSize: 16
  },
  secondaryButton: {
    padding: 15,
    borderRadius: 12,
    backgroundColor: 'rgba(0,123,255,0.1)'
  },
  secondaryButtonText: {
    color: '#007bff',
    textAlign: 'center',
    fontWeight: '600'
  }
})
</file>

<file path="apps/expo/app/(auth)/sign-up.tsx">
import * as React from 'react'
import {
  Text,
  TextInput,
  TouchableOpacity,
  View,
  KeyboardAvoidingView,
  Platform,
  StyleSheet,
  TouchableWithoutFeedback,
  Keyboard,
  Image,
  Dimensions
} from 'react-native'
import { useSignUp } from '@clerk/clerk-expo'
import { useRouter } from 'expo-router'
import { LinearGradient } from 'expo-linear-gradient'

export default function SignUpScreen() {
  const { isLoaded, signUp, setActive } = useSignUp()
  const router = useRouter()

  const [emailAddress, setEmailAddress] = React.useState('')
  const [password, setPassword] = React.useState('')
  const [pendingVerification, setPendingVerification] = React.useState(false)
  const [code, setCode] = React.useState('')

  const onSignUpPress = async () => {
    if (!isLoaded) {
      return
    }

    try {
      await signUp.create({
        emailAddress,
        password,
      })

      await signUp.prepareEmailAddressVerification({ strategy: 'email_code' })

      setPendingVerification(true)
    } catch (err: any) {
      console.error(JSON.stringify(err, null, 2))
    }
  }

  const onPressVerify = async () => {
    if (!isLoaded) {
      return
    }

    try {
      const completeSignUp = await signUp.attemptEmailAddressVerification({
        code,
      })

      if (completeSignUp.status === 'complete') {
        await setActive({ session: completeSignUp.createdSessionId })
        router.replace('/')
      } else {
        console.error(JSON.stringify(completeSignUp, null, 2))
      }
    } catch (err: any) {
      console.error(JSON.stringify(err, null, 2))
    }
  }

  const navigateToSignIn = () => {
    router.replace('/sign-in')
  }

  return (
    <TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}>
      <View style={styles.container}>
        <Image
          source={require('../../assets/ai-bg.png')}
          style={styles.backgroundImage}
          resizeMode="cover"
        />
        <LinearGradient
          colors={['rgba(0,0,0,0.6)', 'rgba(0,0,0,0.3)']}
          style={styles.overlay}
        />
        <KeyboardAvoidingView
          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
          style={styles.keyboardContainer}
        >
          <View style={styles.card}>
            <Text style={styles.headerText}>Chronicle the Journey</Text>
            <Text style={styles.subHeaderText}>
              {!pendingVerification
                ? 'Create Your Account'
                : 'Verify Your Email'}
            </Text>

            {!pendingVerification && (
              <>
                <TextInput
                  style={styles.input}
                  autoCapitalize="none"
                  value={emailAddress}
                  placeholder="Email"
                  placeholderTextColor="#888"
                  onChangeText={(email) => setEmailAddress(email)}
                />
                <TextInput
                  style={styles.input}
                  value={password}
                  placeholder="Password"
                  placeholderTextColor="#888"
                  secureTextEntry={true}
                  onChangeText={(password) => setPassword(password)}
                />
                <TouchableOpacity
                  style={styles.primaryButton}
                  onPress={onSignUpPress}
                >
                  <Text style={styles.buttonText}>Sign Up</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={styles.secondaryButton}
                  onPress={navigateToSignIn}
                >
                  <Text style={styles.secondaryButtonText}>
                    Already have an account? Sign In
                  </Text>
                </TouchableOpacity>
              </>
            )}

            {pendingVerification && (
              <>
                <Text style={styles.verificationText}>
                  Check your email for the verification code
                </Text>
                <TextInput
                  style={styles.input}
                  value={code}
                  placeholder="Enter 6-digit code"
                  placeholderTextColor="#888"
                  onChangeText={(code) => setCode(code)}
                  keyboardType="number-pad"
                />
                <TouchableOpacity
                  style={styles.primaryButton}
                  onPress={onPressVerify}
                >
                  <Text style={styles.buttonText}>Verify Email</Text>
                </TouchableOpacity>
              </>
            )}
          </View>
        </KeyboardAvoidingView>
      </View>
    </TouchableWithoutFeedback>
  )
}

const { width, height } = Dimensions.get('window')

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000'
  },
  backgroundImage: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: width,
    height: height,
    opacity: 0.5
  },
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  keyboardContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 16
  },
  card: {
    width: '90%',
    backgroundColor: 'rgba(255,255,255,0.9)',
    borderRadius: 20,
    padding: 24,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 6,
    elevation: 5
  },
  headerText: {
    fontSize: 32,
    fontWeight: '800',
    textAlign: 'center',
    marginBottom: 16,
    color: '#333',
    letterSpacing: -1
  },
  subHeaderText: {
    fontSize: 20,
    fontWeight: '600',
    textAlign: 'center',
    marginBottom: 24,
    color: '#666'
  },
  input: {
    backgroundColor: 'rgba(240,240,240,0.9)',
    borderWidth: 1,
    borderColor: 'rgba(200,200,200,0.5)',
    padding: 15,
    borderRadius: 12,
    marginBottom: 16,
    fontSize: 16,
    color: '#333'
  },
  primaryButton: {
    backgroundColor: '#007bff',
    padding: 15,
    borderRadius: 12,
    marginBottom: 16,
    shadowColor: '#007bff',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 3
  },
  buttonText: {
    color: 'white',
    textAlign: 'center',
    fontWeight: 'bold',
    fontSize: 16
  },
  secondaryButton: {
    padding: 15,
    borderRadius: 12,
    backgroundColor: 'rgba(0,123,255,0.1)'
  },
  secondaryButtonText: {
    color: '#007bff',
    textAlign: 'center',
    fontWeight: '600'
  },
  verificationText: {
    textAlign: 'center',
    color: '#666',
    marginBottom: 16,
    fontSize: 16
  }
})
</file>

<file path="apps/expo/app/(tabs)/_layout.tsx">
import { Tabs, usePathname } from "expo-router";
import { Ionicons } from '@expo/vector-icons';
import * as Haptics from 'expo-haptics';
import { useEffect, useRef } from 'react';
import { Animated } from 'react-native';

export default function TabLayout() {
  const pathname = usePathname();
  const scaleAnim = useRef(new Animated.Value(0.99)).current;

  useEffect(() => {
    Haptics.selectionAsync();
    
    // Reset the scale to starting position
    scaleAnim.setValue(0.99);
    
    // Animate to full scale
    Animated.spring(scaleAnim, {
      toValue: 1,
      tension: 100,
      friction: 10,
      useNativeDriver: true,
    }).start();
  }, [pathname]);

  return (
    <Animated.View style={{ flex: 1, transform: [{ scale: scaleAnim }] }}>
      <Tabs
        screenOptions={{
          tabBarActiveTintColor: "#2196f3",
          tabBarInactiveTintColor: "#999",
          tabBarStyle: {
            borderTopWidth: 1,
            borderTopColor: "#333",
            backgroundColor: "#121212",
          },
          headerStyle: {
            backgroundColor: '#121212',
          },
          headerTitleStyle: {
            color: '#F5F5F5',
          },
        }}
      >
        <Tabs.Screen
          name="lore"
          options={{
            title: "Lore",
            tabBarIcon: ({ color, size }) => (
              <Ionicons name="book-outline" size={size} color={color} />
            ),
          }}
        />
        <Tabs.Screen
          name="add"
          options={{
            title: "Add",
            tabBarIcon: ({ color, size }) => (
              <Ionicons name="add-circle-outline" size={size} color={color} />
            ),
          }}
        />
        <Tabs.Screen
          name="account"
          options={{
            title: "Account",
            tabBarIcon: ({ color, size }) => (
              <Ionicons name="person-outline" size={size} color={color} />
            ),
          }}
        />
      </Tabs>
    </Animated.View>
  );
}
</file>

<file path="apps/expo/app/(tabs)/account.tsx">
import { SignedIn, SignedOut, useClerk, useUser } from "@clerk/clerk-expo";
import { Link, router } from "expo-router";
import { 
  View, 
  Text, 
  StyleSheet, 
  TouchableOpacity, 
  ScrollView, 
  Dimensions,
  ActivityIndicator,
  Image,
  Animated,
  Modal,
} from "react-native";
import { useState, useRef, useEffect } from "react";
import { api } from "@/utils/api";
import { MaterialIcons } from '@expo/vector-icons';

const STYLES = [
  { 
    id: 'classical painting', 
    label: 'Classical Painting',
    image: require('@/assets/styles/classical.png')
  },
  { 
    id: 'ethereal animated fairy', 
    label: 'Ethereal Fairy',
    image: require('@/assets/styles/ethereal.png')
  },
  { 
    id: 'childrens book', 
    label: 'Children\'s Book',
    image: require('@/assets/styles/childrens.png')
  },
  { 
    id: '3d animated style', 
    label: '3D Animated',
    image: require('@/assets/styles/3d.png')
  },
] as const;

const { width, height } = Dimensions.get('window');
const ITEM_WIDTH = width * 0.9;
const ITEM_HEIGHT = height * 0.65;
const SPACING = 15;

const getStyleById = (id: string | undefined) => {
  return STYLES.find(style => style.id === id) ?? STYLES[0];
};

export default function AccountPage() {
  const auth = useUser();
  const { user, isLoaded, isSignedIn } = auth;
  const { signOut } = useClerk();
  const [showStyleSelector, setShowStyleSelector] = useState(false);
  const [activeIndex, setActiveIndex] = useState(0);
  const scrollX = useRef(new Animated.Value(0)).current;
  const scrollRef = useRef<ScrollView>(null);
  const [showSignOutModal, setShowSignOutModal] = useState(false);

  const utils = api.useContext();
  const preferences = api.user.getPreferences.useQuery();
  const updateStyle = api.user.updateArtStyle.useMutation({
    onSuccess: () => {
      utils.user.getPreferences.invalidate();
      // Animate back to account view after successful update
      setShowStyleSelector(false);
    },
  });

  const slideAnim = useRef(new Animated.Value(0)).current;

  useEffect(() => {
    if (showStyleSelector) {
      Animated.spring(slideAnim, {
        toValue: -width,
        useNativeDriver: true,
        tension: 180,
        friction: 26,
        restDisplacementThreshold: 0.01,
        restSpeedThreshold: 0.01,
      }).start();
    } else {
      Animated.spring(slideAnim, {
        toValue: 0,
        useNativeDriver: true,
        tension: 180,
        friction: 26,
        restDisplacementThreshold: 0.01,
        restSpeedThreshold: 0.01,
      }).start();
    }
  }, [showStyleSelector]);

  const handleSignOut = async () => {
    await signOut();
    router.replace('/(auth)/sign-in');
  };

  const handleStyleSelect = () => {
    const selectedStyle = STYLES[activeIndex].id;
    if (selectedStyle !== preferences.data?.artStyle) {
      updateStyle.mutate(selectedStyle);
    }
  };

  return (
    <View style={styles.container}>
      <Animated.View style={[
        styles.slidingContainer,
        { transform: [{ translateX: slideAnim }] }
      ]}>
        {/* Account View */}
        <View style={styles.page}>
          <Text style={styles.text}>Account Page</Text>
          <SignedIn>
            <View style={styles.content}>
              <Text style={styles.email}>Hello {user?.emailAddresses[0].emailAddress}</Text>
              
              <TouchableOpacity
                style={styles.styleButton}
                onPress={() => setShowStyleSelector(true)}
              >
                <View style={styles.styleButtonContent}>
                  <View style={styles.stylePreviewContainer}>
                    <Image
                      source={getStyleById(preferences.data?.artStyle).image}
                      style={styles.stylePreviewImage}
                      resizeMode="cover"
                    />
                    <View style={styles.stylePreviewOverlay} />
                  </View>
                  <View style={styles.styleButtonText}>
                    <Text style={styles.styleButtonTitle}>Select an art style</Text>
                    <Text style={styles.currentStyle}>
                      {getStyleById(preferences.data?.artStyle).label}
                    </Text>
                  </View>
                  <MaterialIcons name="chevron-right" size={24} color="#fff" />
                </View>
              </TouchableOpacity>

              <TouchableOpacity
                onPress={() => setShowSignOutModal(true)}
                style={styles.signOutButton}
              >
                <Text style={styles.signOutText}>Sign Out</Text>
              </TouchableOpacity>
            </View>
          </SignedIn>
          <SignedOut>
            <View style={styles.authLinks}>
              <Link href="/(auth)/sign-in">
                <Text>Sign In</Text>
              </Link>
              <Link href="/(auth)/sign-up">
                <Text>Sign Up</Text>
              </Link>
            </View>
          </SignedOut>
        </View>

        {/* Style Selector View */}
        <View style={styles.page}>
          <View style={styles.header}>
            <TouchableOpacity 
              onPress={() => setShowStyleSelector(false)}
              style={styles.backButton}
            >
              <MaterialIcons name="arrow-back" size={24} color="#333" />
              <Text style={styles.headerTitle}>Select Style</Text>
            </TouchableOpacity>
          </View>

          <View style={styles.carouselContainer}>
            <Animated.ScrollView
              ref={scrollRef}
              horizontal
              pagingEnabled
              snapToInterval={ITEM_WIDTH + SPACING}
              decelerationRate="fast"
              contentContainerStyle={styles.scrollContent}
              showsHorizontalScrollIndicator={false}
              onScroll={Animated.event(
                [{ nativeEvent: { contentOffset: { x: scrollX } } }],
                { useNativeDriver: false }
              )}
              scrollEventThrottle={16}
              onMomentumScrollEnd={(e) => {
                const index = Math.round(
                  e.nativeEvent.contentOffset.x / (ITEM_WIDTH + SPACING)
                );
                setActiveIndex(index);
              }}
            >
              {STYLES.map((style, index) => {
                const inputRange = [
                  (index - 1) * (ITEM_WIDTH + SPACING),
                  index * (ITEM_WIDTH + SPACING),
                  (index + 1) * (ITEM_WIDTH + SPACING),
                ];
                
                const scale = scrollX.interpolate({
                  inputRange,
                  outputRange: [0.9, 1, 0.9],
                  extrapolate: 'clamp',
                });

                return (
                  <Animated.View
                    key={style.id}
                    style={[
                      styles.styleCard,
                      { 
                        width: ITEM_WIDTH,
                        transform: [{ scale }],
                      },
                    ]}
                  >
                    <View style={styles.cardContent}>
                      <View style={styles.imageWrapper}>
                        <Image
                          source={style.image}
                          style={styles.styleImage}
                          resizeMode="cover"
                        />
                      </View>
                      <Text style={styles.styleText}>{style.label}</Text>
                    </View>
                  </Animated.View>
                );
              })}
            </Animated.ScrollView>
          </View>

          <TouchableOpacity
            style={[
              styles.selectButton,
              updateStyle.isPending && styles.loadingButton,
              preferences.data?.artStyle === STYLES[activeIndex].id && styles.selectedButton,
            ]}
            onPress={handleStyleSelect}
            disabled={updateStyle.isPending || preferences.data?.artStyle === STYLES[activeIndex].id}
          >
            {updateStyle.isPending ? (
              <ActivityIndicator color="#fff" />
            ) : preferences.data?.artStyle === STYLES[activeIndex].id ? (
              <View style={styles.selectedContent}>
                <Text style={styles.selectButtonText}>Selected</Text>
                <MaterialIcons name="check" size={20} color="#fff" />
              </View>
            ) : (
              <Text style={styles.selectButtonText}>Select this style</Text>
            )}
          </TouchableOpacity>
        </View>

        <Modal
          animationType="fade"
          transparent={true}
          visible={showSignOutModal}
          onRequestClose={() => setShowSignOutModal(false)}
        >
          <View style={styles.modalOverlay}>
            <View style={styles.modalContent}>
              <Text style={styles.modalTitle}>Sign Out</Text>
              <Text style={styles.modalText}>Are you sure you want to sign out?</Text>
              <View style={styles.modalButtons}>
                <TouchableOpacity
                  style={[styles.modalButton, styles.cancelButton]}
                  onPress={() => setShowSignOutModal(false)}
                >
                  <Text style={styles.cancelButtonText}>Cancel</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={[styles.modalButton, styles.confirmButton]}
                  onPress={handleSignOut}
                >
                  <Text style={styles.confirmButtonText}>Sign Out</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </Modal>
      </Animated.View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#121212",
    overflow: 'hidden',
  },
  slidingContainer: {
    flex: 1,
    flexDirection: 'row',
    width: width * 2,
  },
  page: {
    width,
    flex: 1,
    backgroundColor: "#121212",
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 20,
    paddingTop: 40,
  },
  backButton: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 10,
  },
  headerTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: "#F5F5F5",
  },
  content: {
    flex: 1,
    alignItems: "center",
    paddingTop: 20,
  },
  text: {
    fontSize: 24,
    color: "#F5F5F5",
    marginTop: 40,
    marginBottom: 20,
    textAlign: 'center',
  },
  email: {
    fontSize: 16,
    marginBottom: 30,
    color: "#F5F5F5",
  },
  styleButton: {
    backgroundColor: '#1E1E1E',
    borderRadius: 16,
    width: '90%',
    overflow: 'hidden',
    borderWidth: 1,
    borderColor: '#333333',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  styleButtonContent: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 16,
  },
  stylePreviewContainer: {
    width: 45,
    height: 45,
    borderRadius: 12,
    overflow: 'hidden',
    position: 'relative',
    marginRight: 12,
    borderWidth: 1,
    borderColor: '#333333',
  },
  stylePreviewImage: {
    width: '100%',
    height: '100%',
  },
  stylePreviewOverlay: {
    ...StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0,0,0,0.1)',
  },
  styleButtonText: {
    flex: 1,
  },
  styleButtonTitle: {
    color: '#F5F5F5',
    fontSize: 16,
    fontWeight: '600',
  },
  currentStyle: {
    color: '#A0A0A0',
    fontSize: 13,
    marginTop: 2,
  },
  signOutButton: {
    backgroundColor: '#1E1E1E',
    padding: 16,
    borderRadius: 16,
    marginTop: 30,
    width: '90%',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#333333',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.25,
    shadowRadius: 3.84,
    elevation: 5,
  },
  signOutText: {
    color: '#FF453A',
    fontWeight: '600',
    fontSize: 16,
  },
  authLinks: {
    alignItems: 'center',
    gap: 10,
  },
  carouselContainer: {
    flex: 1,
    position: 'relative',
  },
  styleCard: {
    marginHorizontal: SPACING / 2,
    height: ITEM_HEIGHT,
    justifyContent: 'center',
  },
  cardContent: {
    flex: 1,
    alignItems: 'center',
    gap: 12,
  },
  imageWrapper: {
    width: '100%',
    height: '85%',
    borderRadius: 20,
    overflow: 'hidden',
    backgroundColor: 'transparent',
    shadowColor: '#000',
    shadowOffset: {
      width: 0,
      height: 4,
    },
    shadowOpacity: 0.5,
    shadowRadius: 8,
    elevation: 8,
  },
  styleImage: {
    width: '100%',
    height: '100%',
    borderRadius: 20,
    backgroundColor: 'transparent',
  },
  styleText: {
    fontSize: 18,
    fontWeight: '600',
    textAlign: 'center',
    color: '#F5F5F5',
    backgroundColor: '#1E1E1E',
    paddingVertical: 8,
    paddingHorizontal: 16,
    borderRadius: 10,
  },
  selectButton: {
    backgroundColor: '#007AFF',
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderRadius: 8,
    marginTop: 20,
    marginHorizontal: 20,
    alignItems: 'center',
  },
  loadingButton: {
    backgroundColor: '#999',
  },
  selectedButton: {
    backgroundColor: '#34C759',
  },
  selectedContent: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  selectButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  scrollContent: {
    paddingHorizontal: (width - ITEM_WIDTH) / 2 - SPACING / 2,
    paddingVertical: 20,
    paddingBottom: 50,
  },
  pagination: {
    flexDirection: 'row',
    justifyContent: 'center',
    alignItems: 'center',
    height: 40,
    marginTop: 20,
  },
  dot: {
    height: 8,
    borderRadius: 4,
    backgroundColor: '#007AFF',
    marginHorizontal: 4,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#1E1E1E',
    borderRadius: 16,
    padding: 20,
    width: '85%',
    borderWidth: 1,
    borderColor: '#333333',
  },
  modalTitle: {
    fontSize: 20,
    fontWeight: '600',
    color: '#F5F5F5',
    marginBottom: 10,
    textAlign: 'center',
  },
  modalText: {
    fontSize: 16,
    color: '#A0A0A0',
    marginBottom: 20,
    textAlign: 'center',
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: 10,
  },
  modalButton: {
    flex: 1,
    paddingVertical: 12,
    borderRadius: 12,
    alignItems: 'center',
    justifyContent: 'center',
  },
  cancelButton: {
    backgroundColor: '#2C2C2E',
    borderWidth: 1,
    borderColor: '#333333',
  },
  confirmButton: {
    backgroundColor: '#FF453A',
  },
  cancelButtonText: {
    color: '#F5F5F5',
    fontSize: 16,
    fontWeight: '600',
  },
  confirmButtonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
});
</file>

<file path="apps/expo/app/(tabs)/add.tsx">
import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  Animated,
  ActivityIndicator,
  KeyboardAvoidingView,
  Platform,
  TouchableWithoutFeedback,
  Keyboard,
} from "react-native";
import { MaterialIcons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import { api } from "@/utils/api";

const PROMPTS = [
  "What just happened?",
  "What's the tea?",
  "Spill the beans...",
  "Something interesting?",
  "Who did what now?",
] as const;

export default function AddMoment() {
  const [text, setText] = useState("");
  const [isWriting, setIsWriting] = useState(false);
  const promptFade = React.useRef(new Animated.Value(0)).current;
  const inputFade = React.useRef(new Animated.Value(0)).current;
  const [showSuccess, setShowSuccess] = useState(false);

  const { data: moments } = api.moments.getAll.useQuery();
  const utils = api.useContext();

  useEffect(() => {
    fadePromptIn().start();
  }, []);

  const fadePromptOut = () => {
    return Animated.timing(promptFade, {
      toValue: 0,
      duration: 200,
      useNativeDriver: true,
    });
  };

  const fadePromptIn = () => {
    return Animated.timing(promptFade, {
      toValue: 1,
      duration: 200,
      useNativeDriver: true,
    });
  };

  const fadeInputIn = () => {
    return Animated.timing(inputFade, {
      toValue: 1,
      duration: 200,
      useNativeDriver: true,
    });
  };

  const fadeInputOut = () => {
    return Animated.timing(inputFade, {
      toValue: 0,
      duration: 200,
      useNativeDriver: true,
    });
  };

  const handleStartWriting = () => {
    setIsWriting(true);
    Animated.parallel([
      fadePromptOut(),
      fadeInputIn(),
    ]).start();
  };

  const handleKeyboardDismiss = () => {
    Keyboard.dismiss();
    if (!text.trim()) {
      Animated.parallel([
        fadePromptIn(),
        fadeInputOut(),
      ]).start(() => {
        setIsWriting(false);
        fadePromptIn().start();
      });
    }
  };

  const addMoment = api.moments.add.useMutation({
    onSuccess: () => {
      setShowSuccess(true);
      Keyboard.dismiss();
      setTimeout(() => {
        Animated.parallel([
          fadePromptIn(),
          fadeInputOut(),
        ]).start(() => {
          setShowSuccess(false);
          setText("");
          setIsWriting(false);
          fadePromptIn().start();
        });
      }, 1500);
      utils.moments.getAll.invalidate();
    },
  });

  const handleAddMoment = async () => {
    if (!text.trim()) return;
    await addMoment.mutateAsync(text);
  };

  return (
    <View style={styles.container}>
      <KeyboardAvoidingView 
        behavior={Platform.OS === "ios" ? "padding" : "height"}
        style={styles.mainContent}
      >
        <TouchableWithoutFeedback onPress={handleKeyboardDismiss}>
          <View style={styles.content}>
            <Animated.View 
              style={[
                styles.promptSection, 
                { opacity: promptFade },
                isWriting && styles.hidden
              ]}
            >
              <Text style={styles.promptText}>
                {PROMPTS[Math.floor(Math.random() * PROMPTS.length)]}
              </Text>
              <TouchableOpacity
                style={styles.startButton}
                onPress={handleStartWriting}
              >
                <Text style={styles.buttonText}>Add a moment</Text>
                <MaterialIcons name="add" size={20} color="#F5F5F5" />
              </TouchableOpacity>
            </Animated.View>

            <Animated.View 
              style={[
                styles.writeSection, 
                { 
                  opacity: inputFade,
                },
                !isWriting && styles.hidden
              ]}
            >
              <TextInput
                style={styles.input}
                value={text}
                onChangeText={setText}
                multiline
                autoFocus
                textAlign="center"
                textAlignVertical="center"
              />
              {text.trim().length > 0 && (
                <TouchableOpacity
                  style={[
                    styles.addButton,
                    { opacity: addMoment.isPending ? 0.7 : showSuccess ? 1 : 0.7 }
                  ]}
                  onPress={handleAddMoment}
                  disabled={addMoment.isPending || showSuccess}
                >
                  <View style={styles.buttonContent}>
                    {addMoment.isPending ? (
                      <ActivityIndicator color="#F5F5F5" />
                    ) : showSuccess ? (
                      <MaterialIcons name="check" size={24} color="#4CAF50" />
                    ) : (
                      <>
                        <Text style={styles.buttonText}>Add moment</Text>
                        <MaterialIcons 
                          name="add-circle-outline" 
                          size={20} 
                          color="#F5F5F5" 
                          style={{marginLeft: 8}} 
                        />
                      </>
                    )}
                  </View>
                </TouchableOpacity>
              )}
            </Animated.View>
          </View>
        </TouchableWithoutFeedback>
      </KeyboardAvoidingView>

      <View style={styles.momentsPreview}>
        <Text style={styles.previewTitle}>Today's Moments</Text>
        <View style={styles.orbContainer}>
          {moments?.map((moment, index) => (
            <LinearGradient
              key={moment.id}
              colors={['#1A1A1A', '#2C2C2E']}
              style={styles.orbWrapper}
            >
              <LinearGradient
                colors={['#4169E1', '#1E90FF']}
                style={styles.orb}
                start={{ x: 0, y: 0 }}
                end={{ x: 1, y: 1 }}
              />
            </LinearGradient>
          ))}
          {(!moments || moments.length === 0) && (
            <Text style={styles.emptyText}>No moments yet today</Text>
          )}
        </View>
      </View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#121212',
  },
  mainContent: {
    flex: 1,
  },
  content: {
    flex: 1,
    padding: 20,
    justifyContent: 'center',
  },
  promptSection: {
    alignItems: 'center',
    marginTop: -100,
  },
  promptText: {
    fontSize: 24,
    color: '#F5F5F5',
    textAlign: 'center',
    marginBottom: 30,
    fontWeight: '600',
  },
  writeSection: {
    position: 'absolute',
    top: '40%',
    left: 0,
    right: 0,
    justifyContent: 'center',
    alignItems: 'center',
  },
  input: {
    fontSize: 24,
    color: '#FFFFFF',
    width: '100%',
    textAlign: 'center',
    padding: 20,
  },
  startButton: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#1E1E1E',
    padding: 16,
    borderRadius: 12,
    gap: 8,
    borderWidth: 1,
    borderColor: '#333',
  },
  addButton: {
    backgroundColor: '#1E1E1E',
    paddingVertical: 12,
    paddingHorizontal: 24,
    borderRadius: 12,
    marginTop: 20,
    borderWidth: 1,
    borderColor: '#333',
  },
  buttonText: {
    color: '#F5F5F5',
    fontSize: 16,
    fontWeight: '600',
  },
  momentsPreview: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    padding: 20,
    backgroundColor: '#121212',
  },
  previewTitle: {
    fontSize: 18,
    color: '#F5F5F5',
    marginBottom: 16,
    fontWeight: '600',
  },
  orbContainer: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 8,
    justifyContent: 'center',
    padding: 16,
    backgroundColor: '#1A1A1A',
    borderRadius: 16,
    borderWidth: 1,
    borderColor: '#333',
    minHeight: 60,
    alignItems: 'center',
  },
  orbWrapper: {
    padding: 2,
    borderRadius: 14,
  },
  orb: {
    width: 24,
    height: 24,
    borderRadius: 12,
    shadowColor: '#4169E1',
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.4,
    shadowRadius: 4,
  },
  buttonContent: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    minHeight: 24,
  },
  emptyText: {
    color: '#666',
    fontSize: 14,
  },
  hidden: {
    display: 'none',
  },
});
</file>

<file path="apps/expo/app/(tabs)/lore.tsx">
import React, {useState, useRef, useEffect} from "react";
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Image,
  RefreshControl,
  ActivityIndicator,
  Animated,
  Dimensions,
} from "react-native";
import {api} from "@/utils/api";
import { PanGestureHandler, State } from "react-native-gesture-handler";
import { GestureHandlerRootView } from "react-native-gesture-handler";
import { Ionicons } from '@expo/vector-icons';

const { width } = Dimensions.get('window');

// Construct R2 URL using account ID
const R2_PUBLIC_URL = `https://pub-17ae87fb525c458eb847cb91755fc43b.r2.dev`;

export const getTypeBadgeColor = (type: string) => {
  switch (type) {
    case 'Daily':
      return '#2196f3';
    case 'Weekly':
      return '#4CAF50';
    case 'Monthly':
      return '#FF9800';
    default:
      return '#9E9E9E';
  }
};

export default function RecapsPage() {
  const [refreshing, setRefreshing] = useState(false);
  const allRecaps = api.recaps.getAll.useQuery(undefined, {});
  const loadingHeight = useRef(new Animated.Value(0)).current;
  const [selectedRecap, setSelectedRecap] = useState<number | null>(null);
  const slideAnim = useRef(new Animated.Value(width)).current;
  const [isAnimating, setIsAnimating] = useState(false);

  const handleRecapPress = (recapId: number) => {
    if (isAnimating) return;
    setIsAnimating(true);
    setSelectedRecap(recapId);
    
    Animated.spring(slideAnim, {
      toValue: 0,
      tension: 180,
      friction: 15,
      useNativeDriver: true,
      restSpeedThreshold: 100,
      restDisplacementThreshold: 40,
    }).start(() => {
      setIsAnimating(false);
    });
  };

  const handleClose = () => {
    if (isAnimating) return;
    setIsAnimating(true);
    
    Animated.spring(slideAnim, {
      toValue: width,
      tension: 180,
      friction: 15,
      useNativeDriver: true,
      restSpeedThreshold: 100,
      restDisplacementThreshold: 40,
    }).start(() => {
      setSelectedRecap(null);
      setIsAnimating(false);
    });
  };

  const handleGesture = ({ nativeEvent }: { nativeEvent: { translationX: number; state: number } }) => {
    const { translationX, state } = nativeEvent;
    if (state === State.END && translationX > 50) {
      handleClose();
    }
  };

  useEffect(() => {
    Animated.timing(loadingHeight, {
      toValue: refreshing ? 50 : 0,
      duration: 300,
      useNativeDriver: false,
    }).start();
  }, [refreshing]);

  const onRefresh = React.useCallback(async () => {
    setRefreshing(true);
    await allRecaps.refetch();
    setRefreshing(false);
  }, [allRecaps]);

  const renderDetailView = () => {
    if (!selectedRecap || !allRecaps.data) return null;

    const recap = allRecaps.data.find(r => r.id === selectedRecap);
    if (!recap) return null;

    return (
      <GestureHandlerRootView style={{ flex: 1 }}>
        <PanGestureHandler
          activeOffsetX={[-20, 20]}
          failOffsetY={[-20, 20]}
          onHandlerStateChange={handleGesture}
        >
          <View style={styles.detailContent}>
            <TouchableOpacity
              onPress={handleClose}
              style={styles.closeButton}
            >
              <Ionicons name="close" size={24} color="#F5F5F5" />
            </TouchableOpacity>
            
            <ScrollView>
              <View style={styles.detailImageContainer}>
                {recap.imageId && (
                  <Image 
                    source={{ uri: `${R2_PUBLIC_URL}/${recap.imageId}` }}
                    style={styles.detailImage}
                    defaultSource={require('../../assets/images/placeholder.png')}
                  />
                )}
              </View>
              
              <View style={styles.detailContentInner}>
                <View style={styles.detailHeaderContent}>
                  <Text style={styles.detailDate}>
                    {recap.createdAt.toLocaleDateString('en-US', {
                      weekday: 'long',
                      month: 'long',
                      day: 'numeric',
                      year: 'numeric'
                    })}
                  </Text>
                  <View style={[
                    styles.typeBadge,
                    { backgroundColor: getTypeBadgeColor(recap.type) }
                  ]}>
                    <Text style={styles.typeBadgeText}>{recap.type}</Text>
                  </View>
                </View>
                <Text style={styles.detailText}>{recap.text}</Text>
              </View>
            </ScrollView>
          </View>
        </PanGestureHandler>
      </GestureHandlerRootView>
    );
  };

  return (
    <View style={styles.container}>
      <Animated.View style={[
        styles.loadingContainer,
        {
          height: loadingHeight,
          overflow: 'hidden',
        }
      ]}>
        <View style={styles.loadingInner}>
          <ActivityIndicator size="small" color="#2196f3" />
        </View>
      </Animated.View>
      <ScrollView
        contentContainerStyle={styles.scrollViewContent}
        showsVerticalScrollIndicator={false}
        refreshControl={
          <RefreshControl
            refreshing={false}
            onRefresh={onRefresh}
            tintColor="transparent"
          />
        }
      >
        {allRecaps.data?.map((recap) => (
          <TouchableOpacity
            key={recap.id}
            style={styles.recapCard}
            onPress={() => handleRecapPress(recap.id)}
            activeOpacity={0.6}
          >
            {recap.imageId && (
              <Image
                source={{ uri: `${R2_PUBLIC_URL}/${recap.imageId}` }}
                style={styles.recapImage}
                defaultSource={require('../../assets/images/placeholder.png')}
              />
            )}
            <View style={styles.recapDetails}>
              <View
                style={[
                  styles.typeBadge,
                  {backgroundColor: getTypeBadgeColor(recap.type)}
                ]}
              >
                <Text style={styles.typeBadgeText}>{recap.type}</Text>
              </View>
              <Text style={styles.recapDate}>
                {recap.createdAt.toLocaleDateString('en-US', {
                  month: 'short',
                  day: 'numeric',
                  year: 'numeric'
                })}
              </Text>
            </View>
          </TouchableOpacity>
        ))}

        {allRecaps.data?.length === 0 && (
          <Text style={styles.emptyStateText}>No Recaps Yet</Text>
        )}

        {allRecaps.isLoading && (
          <Text style={styles.loadingText}>Loading Recaps...</Text>
        )}
      </ScrollView>

      <Animated.View
        style={[
          styles.detailView,
          {
            transform: [{ translateX: slideAnim }],
          },
        ]}
      >
        {selectedRecap && renderDetailView()}
      </Animated.View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#121212",
  },
  scrollViewContent: {
    paddingVertical: 16,
    paddingHorizontal: 16,
  },
  recapCard: {
    backgroundColor: '#1E1E1E',
    borderRadius: 12,
    marginBottom: 16,
    overflow: 'hidden',
    shadowColor: '#000',
    shadowOffset: {width: 0, height: 2},
    shadowOpacity: 0.3,
    shadowRadius: 4,
    elevation: 3,
  },
  recapImage: {
    width: '100%',
    height: 200,
    backgroundColor: '#2A2A2A',
  },
  recapImagePlaceholder: {
    width: '100%',
    height: 200,
    backgroundColor: '#2A2A2A',
  },
  recapDetails: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 12,
  },
  typeBadge: {
    paddingVertical: 4,
    paddingHorizontal: 8,
    borderRadius: 4,
  },
  typeBadgeText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  recapDate: {
    color: '#F5F5F5',
    fontSize: 14,
  },
  emptyStateText: {
    textAlign: 'center',
    color: '#F5F5F5',
    marginTop: 50,
    fontSize: 16,
  },
  loadingText: {
    textAlign: 'center',
    color: '#F5F5F5',
    marginTop: 50,
    fontSize: 16,
  },
  loadingContainer: {
    justifyContent: 'flex-start',
    backgroundColor: '#121212',
    borderBottomWidth: 1,
    borderBottomColor: '#333',
  },
  loadingInner: {
    height: 50,
    justifyContent: 'center',
    alignItems: 'center',
    paddingTop: 15,
  },
  detailView: {
    position: 'absolute',
    top: 0,
    right: 0,
    bottom: 0,
    width: '100%',
    backgroundColor: '#121212',
    zIndex: 1000,
  },
  detailContent: {
    flex: 1,
  },
  closeButton: {
    position: 'absolute',
    top: 40,
    right: 20,
    zIndex: 1001,
    padding: 12,
    backgroundColor: 'rgba(0,0,0,0.3)',
    borderRadius: 24,
  },
  detailImageContainer: {
    width: '110%',
    height: 400,
    marginLeft: '-5%',
    backgroundColor: '#2A2A2A',
    overflow: 'hidden',
  },
  detailImage: {
    width: '100%',
    height: '100%',
    backgroundColor: 'transparent',
  },
  detailContentInner: {
    padding: 16,
  },
  detailHeaderContent: {
    flexDirection: "row",
    justifyContent: "space-between",
    alignItems: "center",
    marginBottom: 16,
  },
  detailDate: {
    fontSize: 16,
    color: "#F5F5F5",
  },
  detailText: {
    fontSize: 16,
    lineHeight: 24,
    color: "#F5F5F5",
  },
  imagePlaceholder: {
    backgroundColor: "#2A2A2A",
  },
  animatedImage: {
    position: 'absolute',
    zIndex: 1001,
  },
});
</file>

<file path="apps/expo/app/index.tsx">
import { useUser } from "@clerk/clerk-expo";
import { Redirect } from "expo-router";
import { Text } from "react-native";

export default function Index() {
  const user = useUser();
  if (user.isLoaded && user.isSignedIn) {
    return <Redirect href="/(tabs)/add" />;
  }

  if (user.isLoaded && !user.isSignedIn) {
    return <Redirect href="/(auth)/sign-up" />;
  }

  if (!user.isLoaded) {
    return <Text>Loading...</Text>;
  }
}
</file>

<file path="apps/expo/babel.config.ts">
module.exports = function (api: { cache: (arg0: boolean) => void; }) {
  api.cache(true);
  return {
    presets: ['babel-preset-expo'],
  };
};
</file>

<file path="apps/expo/eslint.config.mjs">
import baseConfig from "@acme/eslint-config/base";
import reactConfig from "@acme/eslint-config/react";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: [".expo/**", "expo-plugins/**"],
  },

];
</file>

<file path="apps/expo/package.json">
{
  "name": "@acme/expo",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "expo start",
    "android": "expo run:android",
    "ios": "expo run:ios",
    "web": "expo start --web",
    "lint": "expo lint"
  },
  "dependencies": {
    "@clerk/clerk-expo": "^2.3.9",
    "@expo/vector-icons": "^14.0.2",
    "@react-navigation/bottom-tabs": "^7.0.0",
    "@react-navigation/native": "^7.0.0",
    "@tanstack/react-query": "^5.60.2",
    "@trpc/client": "^11.0.0-rc.633",
    "@trpc/react-query": "11.0.0-rc.633",
    "@trpc/server": "11.0.0-rc.633",
    "expo": "~52.0.6",
    "expo-blur": "~14.0.1",
    "expo-constants": "~17.0.3",
    "expo-font": "~13.0.1",
    "expo-haptics": "~14.0.0",
    "expo-linear-gradient": "^14.0.1",
    "expo-linking": "~7.0.2",
    "expo-network": "latest",
    "expo-router": "~4.0.5",
    "expo-status-bar": "~2.0.0",
    "expo-symbols": "~0.2.0",
    "expo-system-ui": "~4.0.2",
    "expo-web-browser": "~14.0.1",
    "lucide-react-native": "^0.456.0",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.76.1",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.0.0",
    "react-native-web": "~0.19.13",
    "react-native-webview": "13.12.2"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/trpc": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "@babel/core": "^7.26.0",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.3.12",
    "@types/react-test-renderer": "^18.3.0",
    "react-test-renderer": "18.3.1",
    "typescript": "^5.3.3"
  },
  "private": true
}
</file>

<file path="apps/expo/README.md">
# Welcome to your Expo app 👋

This is an [Expo](https://expo.dev) project created with [`create-expo-app`](https://www.npmjs.com/package/create-expo-app).

## Get started

1. Install dependencies

   ```bash
   npm install
   ```

2. Start the app

   ```bash
    npx expo start
   ```

In the output, you'll find options to open the app in a

- [development build](https://docs.expo.dev/develop/development-builds/introduction/)
- [Android emulator](https://docs.expo.dev/workflow/android-studio-emulator/)
- [iOS simulator](https://docs.expo.dev/workflow/ios-simulator/)
- [Expo Go](https://expo.dev/go), a limited sandbox for trying out app development with Expo

You can start developing by editing the files inside the **app** directory. This project uses [file-based routing](https://docs.expo.dev/router/introduction).

## Get a fresh project

When you're ready, run:

```bash
npm run reset-project
```

This command will move the starter code to the **app-example** directory and create a blank **app** directory where you can start developing.

## Learn more

To learn more about developing your project with Expo, look at the following resources:

- [Expo documentation](https://docs.expo.dev/): Learn fundamentals, or go into advanced topics with our [guides](https://docs.expo.dev/guides).
- [Learn Expo tutorial](https://docs.expo.dev/tutorial/introduction/): Follow a step-by-step tutorial where you'll create a project that runs on Android, iOS, and the web.

## Join the community

Join our community of developers creating universal apps.

- [Expo on GitHub](https://github.com/expo/expo): View our open source platform and contribute.
- [Discord community](https://chat.expo.dev): Chat with Expo users and ask questions.
</file>

<file path="apps/expo/tsconfig.json">
{
  "compilerOptions": {
    "moduleResolution": "bundler",
    "module": "ESNext",
    "target": "ESNext",
    "allowJs": true,
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "strict": true,
    "noEmit": true,
    "skipLibCheck": true,
    "paths": {
      "@/*": [
        "./*"
      ],
      "@acme/api/*": [
        "../../packages/api/*"
      ]
    },
    "types": [
      "node"
    ],
    "jsx": "react-native",
    "checkJs": false,
    "moduleSuffixes": [
      ".ios",
      ".android",
      ".native",
      ""
    ]
  },
  "include": [
    "expo-router/**/*.{ts,tsx}",
    "utils/**/*",
    "app/**/*",
    "*.{ts,tsx}",
    "*.js"
  ],
  "exclude": [
    "node_modules"
  ],
  "extends": "expo/tsconfig.base"
}
</file>

<file path="apps/expo/turbo.json">
{
  "$schema": "https://turborepo.org/schema.json",
  "extends": ["//"],
  "tasks": {
    "dev": {
      "persistent": true,
      "interactive": true
    }
  }
}
</file>

<file path="apps/expo/utils/api.tsx">
import { createTRPCReact } from '@trpc/react-query';
import { type AppRouter } from '@acme/trpc';

export const api = createTRPCReact<AppRouter>();
</file>

<file path="apps/expo/utils/base-url.tsx">
import Constants from "expo-constants";
import { Platform } from 'react-native';
import * as Network from 'expo-network';

export const getBaseUrl = () => {
  // For iOS, we need to be extra careful about IP resolution
  if (Platform.OS === 'ios') {
    try {
      // Try multiple methods to get the correct local IP
      const debuggerHost = Constants.expoConfig?.hostUri;
      console.log('Debugger Host (iOS):', debuggerHost);

      // Attempt to get the actual network interface IP
      // Prioritize debuggerHost, fall back to network interface

      const host = debuggerHost!.split(':')[0]

      // For iOS, you might need to use the full IP
      const baseUrl = `http://${host}:8787`;
      console.log('Resolved iOS Base URL:', baseUrl);

      return baseUrl;
    } catch (error) {
      console.error('iOS Base URL Detection Error:', error);
      throw new Error('Failed to determine base URL for iOS');
    }
  }

  // Fallback for other platforms
  return 'http://localhost:8787';
};
</file>

<file path="apps/expo/utils/TRPCProvider.tsx">
import {QueryClient, QueryClientProvider} from '@tanstack/react-query';
import {httpBatchLink} from '@trpc/client';
import React, {useState} from 'react';
import {api} from './api';
import superjson from 'superjson';
import {getBaseUrl} from "@/utils/base-url.tsx";
import {useAuth} from '@clerk/clerk-expo'

export function TRPCProvider({children}: { children: React.ReactNode; }) {
  const { getToken} = useAuth()


  const [queryClient] = useState(() => new QueryClient());
  const [trpcClient] = useState(() =>
    api.createClient({
      links: [
        httpBatchLink({
          transformer: superjson,
          url: `${getBaseUrl()}/trpc`,
          async headers() {
          const token = await getToken()
          return {
            Authorization: token ? `Bearer ${token}` : '',
          }
        },
        }),
      ],
    })
  );

  return (
    <api.Provider client={trpcClient} queryClient={queryClient}>
      <QueryClientProvider client={queryClient}>
        {children}
      </QueryClientProvider>
    </api.Provider>
  );
}
</file>

<file path="apps/workflows/.editorconfig">
# http://editorconfig.org
root = true

[*]
indent_style = tab
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.yml]
indent_style = space
</file>

<file path="apps/workflows/.gitignore">
# Logs

logs
_.log
npm-debug.log_
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)

report.[0-9]_.[0-9]_.[0-9]_.[0-9]_.json

# Runtime data

pids
_.pid
_.seed
\*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover

lib-cov

# Coverage directory used by tools like istanbul

coverage
\*.lcov

# nyc test coverage

.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)

.grunt

# Bower dependency directory (https://bower.io/)

bower_components

# node-waf configuration

.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)

build/Release

# Dependency directories

node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)

web_modules/

# TypeScript cache

\*.tsbuildinfo

# Optional npm cache directory

.npm

# Optional eslint cache

.eslintcache

# Optional stylelint cache

.stylelintcache

# Microbundle cache

.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history

.node_repl_history

# Output of 'npm pack'

\*.tgz

# Yarn Integrity file

.yarn-integrity

# dotenv environment variable files

.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)

.cache
.parcel-cache

# Next.js build output

.next
out

# Nuxt.js build / generate output

.nuxt
dist

# Gatsby files

.cache/

# Comment in the public line in if your project uses Gatsby and not Next.js

# https://nextjs.org/blog/next-9-1#public-directory-support

# public

# vuepress build output

.vuepress/dist

# vuepress v2.x temp and cache directory

.temp
.cache

# Docusaurus cache and generated files

.docusaurus

# Serverless directories

.serverless/

# FuseBox cache

.fusebox/

# DynamoDB Local files

.dynamodb/

# TernJS port file

.tern-port

# Stores VSCode versions used for testing VSCode extensions

.vscode-test

# yarn v2

.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.\*

# wrangler project

.dev.vars
.wrangler/

# macOS
.DS_Store
</file>

<file path="apps/workflows/.prettierrc">
{
	"printWidth": 140,
	"singleQuote": true,
	"semi": true,
	"useTabs": true
}
</file>

<file path="apps/workflows/eslint.config.js">
import baseConfig from "@acme/eslint-config/base";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: ["dist/**", "src/workflows/daily-recap.ts"],
  },
  ...baseConfig
];
</file>

<file path="apps/workflows/package.json">
{
	"name": "@acme/workflows",
	"version": "0.0.1",
	"scripts": {
		"deploy": "wrangler deploy",
		"dev": "wrangler dev --test-scheduled --remote",
		"clean": "git clean -xdf .cache .turbo node_modules .wrangler"
	},
	"type": "module",
	"devDependencies": {
		"@acme/db": "workspace:*",
		"@acme/eslint-config": "workspace:*",
		"@acme/tsconfig": "workspace:*",
		"typescript": "^5.3.3",
		"wrangler": "3.93.0"
	}
}
</file>

<file path="apps/workflows/README.md">
# Cloudflare Workflows

This is the starter template for Workflows, a durable execution engine built on top of Cloudflare Workers.

* Clone this repository to get started with Workflows
* Read the [Workflows announcement blog](https://blog.cloudflare.com/building-workflows-durable-execution-on-workers/) to learn more about what Workflows is and how to build durable, multi-step applications using the Workflows model.
* Review the [Workflows developer documentation](https://developers.cloudflare.com/workflows/) to dive deeper into the Workflows API and how it works.

## Usage

**Visit the [get started guide](https://developers.cloudflare.com/workflows/get-started/guide/) for Workflows to create and deploy your first Workflow.**

### Example

You can create a project using this template by using `npm create cloudflare@latest`:

```sh
npm create cloudflare@latest workflows-starter -- --template "cloudflare/workflows-starter"
```

This will automatically clone this repository, install the dependencies, and prompt you to optionally deploy:

```sh
╭ Create an application with Cloudflare Step 1 of 3
│
├ In which directory do you want to create your application?
│ dir ./workflows-tutorial
│
├ What would you like to start with?
│ category Template from a GitHub repo
│
├ What's the url of git repo containing the template you'd like to use?
│ repository cloudflare/workflows-starter
│
├ Cloning template from: cloudflare/workflows-starter
│
├ template cloned and validated
│
├ Copying template files
│ files copied to project directory
│
├ Installing dependencies
│ installed via `npm install`
│
╰ Application created

╭ Configuring your application for Cloudflare Step 2 of 3
│
├ Installing @cloudflare/workers-types
│ installed via npm
│
├ Adding latest types to `tsconfig.json`
│ added @cloudflare/workers-types/2023-07-01
│
├ Do you want to use git for version control?
│ yes git
│
├ Initializing git repo
│ initialized git
│
├ Committing new files
│ git commit
│
╰ Application configured

╭ Deploy with Cloudflare Step 3 of 3
│
├ Do you want to deploy your application?
│ no deploy via `npm run deploy`
│
╰ Done

────────────────────────────────────────────────────────────
🎉  SUCCESS  Application created successfully!
```

The [Workflows documentation](https://developers.cloudflare.com/workflows/) contains examples, the API reference, and architecture guidance.

## License

Copyright 2024, Cloudflare. Apache 2.0 licensed. See the LICENSE file for details.
</file>

<file path="apps/workflows/src/index.ts">
import {DailyRecapWorkflow} from "./workflows/daily-recap";
import { GetUsersForRecapWorkflow } from "./workflows/get-users-for-recap";

export {
	DailyRecapWorkflow,
	GetUsersForRecapWorkflow
}

export default {
	scheduled(event, env: Env, ctx) {
		console.log("cron processed");
		ctx.waitUntil(env.GET_USERS_WORKFLOW.create());
	}
} satisfies ExportedHandler<Env>;
</file>

<file path="apps/workflows/src/workflows/daily-recap.ts">
import {WorkflowEntrypoint  } from "cloudflare:workers";
import type {WorkflowEvent, WorkflowStep} from "cloudflare:workers";
import {getDB, moments, recaps, userMeta} from "@acme/db";
import { and, gte, lte, eq } from 'drizzle-orm';

export type DailyRecapWorkflowParams = {
    userId: string;
    timezone: string;
	dev?: boolean
}

const getPacificTime = (date: Date = new Date()) => {
    return new Date(
        date.toLocaleString('en-US', {
            timeZone: 'America/Los_Angeles'
        })
    );
};

export class DailyRecapWorkflow extends WorkflowEntrypoint<Env, DailyRecapWorkflowParams> {
	async run(event: WorkflowEvent<DailyRecapWorkflowParams>, step: WorkflowStep) {
		const { userId, timezone } = event.payload;

		const userMetadata = await step.do('Get user metadata', async () => {
			const db = getDB(this.env);
			const meta = await db.query.userMeta.findFirst({
				where: eq(userMeta.userId, userId),
			});
			return meta;
		});

		const yesterdaysMoments = await step.do('Get moments', async () => {
			const db = getDB(this.env);
			
			// Calculate date range based on dev flag
			const todayPT = getPacificTime();
			const targetDate = new Date(todayPT);
			
			if (!event.payload.dev) {
				// Normal case - get yesterday's moments
				targetDate.setDate(targetDate.getDate() - 1);
			}
			
			const startOfDay = new Date(targetDate.setHours(0, 0, 0, 0));
			const endOfDay = new Date(targetDate.setHours(23, 59, 59, 999));

			const res = await db.select()
				.from(moments)
				.where(
					and(
						eq(moments.userId, userId),
						gte(moments.createdAt, startOfDay),
						lte(moments.createdAt, endOfDay)
					)
				);
			
			return res;
		});

		const aiGeneratedRecap: string = await step.do('Generate text from AI', async () => {
			console.log('yesterdaysMoments:', yesterdaysMoments);

			const res  = await this.env.AI.run(
				// @ts-ignore
				"@cf/meta/llama-3.3-70b-instruct-fp8-fast", {
					prompt: `
					Heres what happened yesterday, turn it into a quick little story, maybe add some humor, maybe make it profound, but at the very least make it interesting:
					First moment: 
					${yesterdaysMoments.map(m => m.text).join('\n Next moment:\n')}
					`
				}
			)
			console.log('AI generated recap:', res);

			// @ts-ignore
			return res.response
		});

		const imagePrompt: string = await step.do('Generate image prompt', async () => {
			const res = await this.env.AI.run(
				// @ts-ignore
				"@cf/meta/llama-3.3-70b-instruct-fp8-fast", {
					prompt: `
					Create a detailed image generation prompt that captures the essence of this daily recap. 
					The prompt should be vivid and descriptive, but keep it under 100 words.
					Here's the recap:
					${aiGeneratedRecap}
					`
				}
			);
			console.log('Generated image prompt:', res);

			// @ts-ignore
			return res.response;
		});

		const generatedImage = await step.do('Generate image', async () => {
			const artStyle = userMetadata?.artStyle ?? 'classical painting';
			
			const styleModifiers = {
				'classical painting': 'in the style of a classical oil painting, rich colors, dramatic lighting',
				'ethereal animated fairy': 'in an ethereal fairy tale style, magical, dreamy, soft glowing colors',
				'childrens book': 'in a whimsical children\'s book illustration style, colorful, playful',
				'3d animated style': 'in a modern 3D animated style, vibrant, polished, cinematic',
			};

			const styleModifier = styleModifiers[artStyle as keyof typeof styleModifiers];
			
			const enhancedPrompt = `${imagePrompt} ${styleModifier}`;
			console.log('Enhanced prompt with style:', enhancedPrompt);

			const res = await this.env.AI.run(
				// @ts-ignore
				'@cf/black-forest-labs/flux-1-schnell', {
					prompt: enhancedPrompt,
					num_steps: 8
				}
			);
			// @ts-ignore
			return res.image;
		});

		const imageKey = await step.do('Store image in R2', async () => {
			const imageKey = `recap-images/${Date.now()}.jpg`;
			
			// Convert base64 to Uint8Array using Web APIs
			const binaryString = atob(generatedImage);
			const bytes = new Uint8Array(binaryString.length);
			for (let i = 0; i < binaryString.length; i++) {
				bytes[i] = binaryString.charCodeAt(i);
			}
			
			await this.env.IMAGES_BUCKET.put(imageKey, bytes, {
				httpMetadata: {
					contentType: 'image/jpeg',
				},
			});
			
			return imageKey;
		});

		await step.do('Add to database', async () => {
			const db = getDB(this.env);
			await db.insert(recaps).values({ 
				text: aiGeneratedRecap, 
				userId: userId,  // Now using the specific user's ID
				createdAt: new Date(), 
				type: 'daily', 
				imageId: imageKey
			});
		});
	}
}
</file>

<file path="apps/workflows/src/workflows/get-users-for-recap.ts">
import { WorkflowEntrypoint } from "cloudflare:workers";
import type { WorkflowEvent, WorkflowStep } from "cloudflare:workers";
import { getDB, userMeta } from "@acme/db";
import { eq, isNull, or, gt, lt, and } from 'drizzle-orm';

// Type for the workflow parameters
interface GetUsersForRecapParams {
    batchSize?: number;
    lastProcessedUserId?: string;
}

export class GetUsersForRecapWorkflow extends WorkflowEntrypoint<Env, GetUsersForRecapParams> {
    async run(event: WorkflowEvent<GetUsersForRecapParams>, step: WorkflowStep) {
        const batchSize = event.payload.batchSize ?? 100; // Process users in batches
        const lastProcessedUserId = event.payload.lastProcessedUserId;

        // Get users who haven't had a recap recently
        const users = await step.do('Get batch of active users', async () => {
            const db = getDB(this.env);
            const now = new Date();
            const twentyFourHoursAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);

            const baseCondition = or(
                isNull(userMeta.lastRecapAt),
                lt(userMeta.lastRecapAt, twentyFourHoursAgo)
            );
            
            const whereCondition = lastProcessedUserId 
                ? and(baseCondition, gt(userMeta.userId, lastProcessedUserId))
                : baseCondition;

            const query = db.select()
                .from(userMeta)
                .where(whereCondition)
                .limit(batchSize);

            return await query;
        });

        // Process users in parallel, with retry logic
        await step.do(
            'Trigger individual recaps',
            {
                retries: {
                    limit: 5,
                    delay: '1 minute',
                    backoff: 'exponential',
                },
                timeout: '5 minutes',
            },
            async () => {
                // Process users in parallel with Promise.all
                await Promise.all(users.map(async (user) => {
                    try {
                        // Start a new workflow instance for each user
                        await this.env.DAILY_RECAP_WORKFLOW.create({
                            params: {
                                userId: user.userId,
                                timezone: user.timezone
                            }
                        });

                        // Update lastRecapAt to prevent duplicate processing
                        const db = getDB(this.env);
                        await db
                            .update(userMeta)
                            .set({ lastRecapAt: new Date() })
                            .where(eq(userMeta.userId, user.userId));
                    } catch (error) {
                        console.error(`Failed to process user ${user.userId}:`, error);
                        throw error; // Let the retry mechanism handle it
                    }
                }));
            }
        );

        // If we processed a full batch, trigger another workflow for the next batch
        if (users.length === batchSize) {
            const lastUser = users[users.length - 1];
            if (!lastUser) return;
            
            await step.do('Trigger next batch', async () => {
                await this.env.GET_USERS_WORKFLOW.create({
                    params: {
                        batchSize,
                        lastProcessedUserId: lastUser.userId
                    }
                });
            });
        }
    }
}
</file>

<file path="apps/workflows/tsconfig.json">
{
  "compilerOptions": {
    "target": "ESNext",
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "strict": true,
    "skipLibCheck": true,
    "lib": [
      "ESNext"
    ],
    "types": [
        "@cloudflare/workers-types"
    ],
  },
	"extends": "@acme/tsconfig/base.json"
}
</file>

<file path="apps/workflows/turbo.json">
{
  "$schema": "https://turborepo.org/schema.json",
  "extends": ["//"],
  "tasks": {
    "dev": {
      "persistent": true,
      "interactive": true
    }
  }
}
</file>

<file path="apps/workflows/worker-configuration.d.ts">
// Generated by Wrangler by running `wrangler types`

interface Env {
	IMAGES_BUCKET: R2Bucket;
	DB: D1Database;
	AI: Ai;
	DAILY_RECAP_WORKFLOW: Workflow;
	GET_USERS_WORKFLOW: Workflow;
}
</file>

<file path="apps/workflows/wrangler.toml">
name = "daily-recap-workflow"
main = "src/index.ts"
compatibility_date = "2024-12-05"

[observability]
enabled = true

[[workflows]]
# name of your workflow
name = "daily-recap-workflow"
# binding name env.MYWORKFLOW
binding = "DAILY_RECAP_WORKFLOW"
# this is the class that extends the Workflow class in src/index.ts
class_name = "DailyRecapWorkflow"

[[r2_buckets]]
bucket_name = ""
preview_bucket_name = "-dev"
binding = "IMAGES_BUCKET"

[[d1_databases]]
binding = "DB"
database_name = ""
database_id = ""

[ai]
binding = "AI"

[triggers]
crons = [ "0 6 * * *" ]

[dev]
port = 8788

[[workflows]]
name = "get-users-for-recap-workflow"
binding = "GET_USERS_WORKFLOW"
class_name = "GetUsersForRecapWorkflow"
</file>

<file path="CONTRIBUTING.md">
# 贡献指南

感谢您对 Cloudflare Turbo Stack 项目的贡献兴趣！本文档提供了参与项目开发的详细指南，帮助您快速上手并遵循项目的最佳实践。

## 目录

- [开发环境设置](#开发环境设置)
- [开发工作流程](#开发工作流程)
- [提交代码](#提交代码)
- [创建新应用或包](#创建新应用或包)
- [常见问题解决](#常见问题解决)

## 开发环境设置

### 前提条件

- Node.js >= 20.16.0
- pnpm >= 9.6.0
- Git

### 初始设置

1. 克隆仓库

```bash
git clone <repository-url>
cd cloudflare-workers-d1-r2-expo-turborepo-trpc-workflows-astro
```

2. 安装依赖

```bash
pnpm install
```

3. 环境变量配置

```bash
cp .env.example .env
# 编辑 .env 文件，填入必要的环境变量
```

## 开发工作流程

### 启动开发服务器

启动所有服务：

```bash
pnpm dev
```

启动特定应用：

```bash
# 例如，仅启动 API 服务
pnpm dev -F @acme/apiservice...
```

### 数据库操作

生成数据库迁移：

```bash
pnpm db:generate
```

应用数据库迁移：

```bash
pnpm -F @acme/db migrate
```

打开数据库管理界面：

```bash
pnpm db:studio
```

### 代码质量检查

运行 ESLint 检查：

```bash
pnpm lint
```

自动修复 ESLint 问题：

```bash
pnpm lint:fix
```

检查代码格式：

```bash
pnpm format
```

自动修复格式问题：

```bash
pnpm format:fix
```

类型检查：

```bash
pnpm typecheck
```

## 提交代码

### 分支创建

从最新的 main 分支创建功能分支：

```bash
git checkout main
git pull
git checkout -b feature/your-feature-name
```

### 提交前检查

在提交代码前，确保：

1. 代码通过所有检查：

```bash
pnpm lint && pnpm format && pnpm typecheck
```

2. 所有应用能正常构建：

```bash
pnpm build
```

### 提交信息格式

遵循约定式提交规范：

```
<类型>(<作用域>): <描述>

[可选的详细描述]

[可选的关闭问题引用]
```

示例：

```
feat(auth): 添加用户注册功能

实现了基于 Clerk 的用户注册流程，包括邮箱验证和初始化用户配置文件。

Closes #123
```

### 创建 Pull Request

1. 推送分支到远程仓库：

```bash
git push -u origin feature/your-feature-name
```

2. 在 GitHub 上创建 Pull Request
3. 填写 PR 描述，包括：
   - 实现的功能或修复的问题
   - 实现方法的简要说明
   - 测试方法
   - 相关的 issue 链接

4. 等待代码审查和 CI 检查通过

## 创建新应用或包

### 创建新应用

1. 在 `apps` 目录下创建新目录
2. 初始化 package.json：

```json
{
  "name": "@acme/your-app-name",
  "version": "0.0.1",
  "private": true,
  "scripts": {
    "dev": "your-dev-command",
    "build": "your-build-command",
    "clean": "git clean -xdf .cache .turbo node_modules"
  },
  "dependencies": {
    "@acme/db": "workspace:*"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/tsconfig": "workspace:*"
  }
}
```

3. 创建 `tsconfig.json`，继承基础配置：

```json
{
  "extends": "@acme/tsconfig/base.json",
  "compilerOptions": {
    "tsBuildInfoFile": ".cache/tsbuildinfo.json"
  },
  "include": ["src"],
  "exclude": ["node_modules"]
}
```

4. 创建 `turbo.json` 配置：

```json
{
  "extends": ["//"]
}
```

### 创建新包

1. 在 `packages` 目录下创建新目录
2. 初始化 package.json：

```json
{
  "name": "@acme/your-package-name",
  "version": "0.0.1",
  "private": true,
  "type": "module",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "default": "./src/index.ts"
    }
  },
  "scripts": {
    "build": "tsc",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "dev": "tsc --watch",
    "lint": "eslint",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "typescript": "catalog:"
  }
}
```

3. 创建 `tsconfig.json`，继承基础配置
4. 创建 `src/index.ts` 作为包的入口点

## 常见问题解决

### 依赖问题

如果遇到依赖相关问题，尝试：

```bash
# 清理 node_modules
pnpm clean

# 重新安装依赖
pnpm install
```

### Turborepo 缓存问题

如果遇到构建缓存问题：

```bash
# 清理 Turborepo 缓存
rm -rf .turbo
```

### 环境变量问题

确保所有必要的环境变量都已在 `.env` 文件中设置，并且已在 `turbo.json` 的 `globalEnv` 中声明。

---

如有任何问题或建议，请创建 issue 或联系项目维护者。我们欢迎所有形式的贡献！
</file>

<file path="DEVELOPMENT_GUIDELINES.md">
# Cloudflare Turbo Stack 开发规范

本文档提供了基于 Cloudflare Turbo Stack 项目的开发规范指南，旨在确保多人协作开发时保持一致性和高质量的代码标准。

## 目录

- [项目结构规范](#项目结构规范)
- [技术栈规范](#技术栈规范)
- [代码风格指南](#代码风格指南)
- [Git 工作流规范](#git-工作流规范)
- [依赖管理规范](#依赖管理规范)
- [环境变量管理](#环境变量管理)
- [构建与部署规范](#构建与部署规范)
- [测试规范](#测试规范)
- [文档规范](#文档规范)

## 项目结构规范

### Monorepo 结构

项目采用 Turborepo 管理的 Monorepo 结构，包含以下主要目录：

```
.
├── apps/                # 应用程序
│   ├── apiservice/      # Cloudflare Worker API
│   ├── astro/           # 静态网站/登陆页
│   ├── expo/            # 移动应用
│   └── workflows/       # Cloudflare Workflows
├── packages/            # 共享包
│   ├── db/              # 数据库模式和工具
│   └── trpc/            # tRPC 路由定义
└── tooling/             # 共享开发工具
    ├── eslint/          # ESLint 配置
    ├── github/          # GitHub 工作流配置
    ├── prettier/        # Prettier 配置
    ├── tailwind/        # Tailwind 配置
    └── typescript/      # TypeScript 配置
```

### 新应用/包的添加规则

1. **应用程序**：所有独立应用应放在 `apps/` 目录下
2. **共享包**：可重用的代码库应放在 `packages/` 目录下
3. **工具配置**：共享的开发工具配置应放在 `tooling/` 目录下
4. **命名规范**：
   - 包名使用小写字母，单词间用连字符（-）分隔
   - 内部包名前缀统一为 `@acme/`

## 技术栈规范

项目使用以下技术栈，新功能开发必须遵循这些选择以保持一致性：

- **前端**：React Native (Expo)、Astro
- **后端**：Cloudflare Workers、Workers AI
- **数据库**：Cloudflare D1 (SQLite)
- **存储**：Cloudflare R2
- **认证**：Clerk
- **API**：tRPC
- **构建工具**：Turborepo
- **包管理器**：pnpm

### 技术选择原则

1. 优先使用项目已有的技术和库
2. 添加新依赖前，必须在团队内讨论并获得批准
3. 避免引入功能重叠的库

## 代码风格指南

### TypeScript

- 使用项目提供的 TypeScript 配置（`@acme/tsconfig`）
- 严格模式（`strict: true`）
- 避免使用 `any` 类型，优先使用 `unknown` 或具体类型
- 使用类型推断，但在函数参数和返回值上显式声明类型

### ESLint

项目使用统一的 ESLint 配置，位于 `tooling/eslint/` 目录：

- 遵循基础配置 (`base.js`)
- React 项目使用 React 特定规则 (`react.js`)
- Next.js 项目使用 Next.js 特定规则 (`nextjs.js`)

运行 `pnpm lint` 检查代码，`pnpm lint:fix` 自动修复问题。

### Prettier

使用项目统一的 Prettier 配置（`tooling/prettier/index.js`）：

- 导入排序规则遵循配置中的 `importOrder`
- 使用 Tailwind CSS 插件确保类名排序一致

运行 `pnpm format` 检查格式，`pnpm format:fix` 自动修复格式问题。

### 命名约定

- **文件名**：
  - React 组件使用 PascalCase（如 `Button.tsx`）
  - 工具函数使用 camelCase（如 `formatDate.ts`）
  - 常量文件使用 kebab-case（如 `api-constants.ts`）
- **变量/函数**：使用 camelCase
- **类/接口/类型**：使用 PascalCase
- **常量**：使用 UPPER_SNAKE_CASE

## Git 工作流规范

### 分支策略

- **main**：主分支，保持可部署状态
- **feature/**：功能分支，从 main 分支创建
- **bugfix/**：修复分支，从 main 分支创建
- **release/**：发布分支，用于准备发布

### 提交规范

提交信息应遵循以下格式：

```
<类型>(<作用域>): <描述>

[可选的详细描述]

[可选的关闭问题引用]
```

类型包括：
- **feat**：新功能
- **fix**：错误修复
- **docs**：文档更改
- **style**：不影响代码含义的更改（空格、格式等）
- **refactor**：既不修复错误也不添加功能的代码更改
- **perf**：提高性能的代码更改
- **test**：添加或修正测试
- **chore**：对构建过程或辅助工具的更改

示例：`feat(auth): 添加用户注册功能`

### 代码审查

- 所有代码更改必须通过 Pull Request 提交
- 至少需要一名团队成员的审查和批准
- CI 检查必须通过（类型检查、lint、测试等）

## 依赖管理规范

### 包管理器

- 使用 pnpm 作为唯一的包管理器
- Node.js 版本要求：>=20.16.0
- pnpm 版本要求：^9.6.0

### 工作区依赖

- 工作区内部依赖使用 `workspace:*` 版本说明符
- 共享依赖使用 `catalog:` 版本说明符，确保版本一致性

### 添加依赖

- 添加全局依赖：`pnpm add -w <package>`
- 添加特定工作区依赖：`pnpm add <package> --filter <workspace>`
- 添加开发依赖：`pnpm add -D <package> [--filter <workspace>]`

## 环境变量管理

- 环境变量定义在项目根目录的 `.env` 文件中
- 使用 `.env.example` 作为模板，记录所需的环境变量
- 通过 `turbo.json` 的 `globalEnv` 配置共享环境变量
- 在代码中，使用 `import { env } from '~/env'` 访问环境变量，而不是直接使用 `process.env`

## 构建与部署规范

### 本地开发

- 启动所有服务：`pnpm dev`
- 启动特定应用：`pnpm dev -F @acme/<app-name>...`

### 构建

- 构建所有应用：`pnpm build`
- 构建特定应用：`pnpm build -F @acme/<app-name>...`

### 部署

- Cloudflare Workers 部署：`pnpm deploy -F @acme/<worker-name>`
- 数据库迁移：
  - 生成迁移：`pnpm db:generate`
  - 应用迁移：`pnpm -F @acme/db migrate`

## 测试规范

- 单元测试应放在与被测代码相同目录下的 `__tests__` 目录中
- 集成测试应放在应用的 `tests` 目录中
- 测试文件命名：`<被测文件名>.test.ts` 或 `<被测文件名>.spec.ts`
- 使用 Jest 或 Vitest 作为测试框架

## 文档规范

- 每个应用和包应有自己的 README.md 文件，描述其用途和使用方法
- API 文档应使用 JSDoc 注释
- 复杂功能应有设计文档，放在相关应用/包的 `docs` 目录下
- 项目级文档放在根目录，如本开发规范文档

---

## 前后端交互与 API 扩展规范

### 1. 交互架构说明
- **静态网站（Astro）** 和 **移动应用（Expo）** 通过 tRPC 客户端直接调用 `apiservice`（Cloudflare Worker API），实现无 REST 层的类型安全远程调用。
- tRPC 路由统一在 `packages/trpc` 维护，前端通过 `@acme/trpc` 包自动获得类型推断和 API 路由。
- 数据请求流程：前端页面/功能 → tRPC 客户端 → apiservice（tRPC handler）→ 数据库（Cloudflare D1）或存储（R2）。

### 2. 新增页面/功能时的 API 扩展流程
1. **前端页面增加（Astro/Expo）**：
   - 新建页面或功能组件，按需调用 tRPC 提供的 API。
   - 若需新接口，需同步扩展 tRPC 路由。
2. **API 扩展（apiservice & trpc）**：
   - 在 `packages/trpc/src/router/` 下新增或扩展对应路由文件，定义输入输出类型和业务逻辑。
   - 在 `packages/trpc/src/router/index.ts` 注册新路由。
   - 在 `apps/apiservice/src` 中确保 tRPC handler 正确引入路由。
3. **数据库 schema 联动**：
   - 若 API 涉及新表/字段，先在 `packages/db/src/schema/` 下定义/修改 schema。
   - 运行 `pnpm db:generate` 生成迁移脚本，`pnpm -F @acme/db migrate` 应用迁移。
   - API 层通过 ORM 访问数据库，保持类型一致。
4. **前端调用**：
   - 前端通过 `@acme/trpc` 的 hooks（如 `trpc.useQuery`、`trpc.useMutation`）调用新 API，自动获得类型提示。

### 3. tRPC 路由扩展与类型安全
- 路由定义集中在 `packages/trpc`，所有输入输出类型自动推断。
- 前端无需手动维护接口类型，避免类型漂移。
- 推荐每次扩展 API 时补充 JSDoc 注释，便于自动生成文档。

### 4. 典型开发流程示例
1. Astro/Expo 新增“用户资料”页面 → 发现需获取/更新用户信息
2. 在 `packages/trpc/src/router/user.ts` 新增 `getProfile`、`updateProfile` 方法
3. 在 `packages/db/src/schema/user.ts` 增加字段（如 avatar）并迁移
4. 在前端页面通过 `trpc.user.getProfile.useQuery()` 获取数据，`trpc.user.updateProfile.useMutation()` 更新
5. 代码提交后，CI 自动检查类型、lint、测试

### 5. 注意事项
- 所有 API 变更需同步更新 tRPC 路由和类型
- 数据库 schema 变更需生成并应用迁移，避免手动修改数据库
- 推荐前后端开发协同评审 API 设计，确保接口语义清晰

---

本规范文档应随项目演进而更新。团队成员有责任遵循这些规范，并在发现问题时提出改进建议。

## 数据库 Schema 变更与 tRPC 层同步流程

当数据库 schema 发生变化时，需同步更新 `packages/trpc/src/router` 目录下相关路由和输入/输出类型定义，确保前后端类型一致，保证类型安全。推荐流程如下：

1. **更新数据库 schema**：在 `packages/db` 中完成 schema 变更及迁移。
2. **同步 tRPC 路由与类型**：根据最新 schema，及时更新 `packages/trpc/src/router` 下相关路由的输入、输出类型定义和业务逻辑。
3. **类型检查**：确保 tRPC 路由的输入输出类型与数据库模型保持一致，充分利用 TypeScript 类型推断。
4. **端到端测试**：完成变更后，进行端到端测试，验证接口和数据结构的正确性，确保前端调用无类型错误。
5. **代码审查**：每次数据库 schema 变更，务必同步提交 tRPC 层相关更新，避免类型漂移。

> 建议：每次数据库 schema 变更后，务必检查并同步更新 tRPC 路由和类型定义，保证类型安全和接口一致性。
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2023 Julius Marminge

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="package.json">
{
  "name": "create-t3-turbo",
  "private": true,
  "engines": {
    "node": ">=20.16.0",
    "pnpm": "^9.6.0"
  },
  "packageManager": "pnpm@9.12.1",
  "scripts": {
    "build": "turbo run build",
    "clean": "git clean -xdf node_modules",
    "clean:workspaces": "turbo run clean",
    "db:generate": "turbo -F @acme/db generate",
    "db:studio": "turbo -F @acme/db studio",
    "dev": "turbo watch dev --continue",
    "dev:next": "turbo watch dev -F @acme/nextjs...",
    "format": "turbo run format --continue -- --cache --cache-location .cache/.prettiercache",
    "format:fix": "turbo run format --continue -- --write --cache --cache-location .cache/.prettiercache",
    "lint": "turbo run lint --continue -- --cache --cache-location .cache/.eslintcache",
    "lint:fix": "turbo run lint --continue -- --fix --cache --cache-location .cache/.eslintcache",
    "lint:ws": "pnpm dlx sherif@latest",
    "postinstall": "pnpm lint:ws",
    "typecheck": "turbo run typecheck",
    "ui-add": "turbo run ui-add"
  },
  "devDependencies": {
    "@acme/prettier-config": "workspace:*",
    "@turbo/gen": "^2.1.3",
    "prettier": "catalog:",
    "turbo": "^2.3.3",
    "typescript": "catalog:"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="packages/db/drizzle.config.ts">
import { defineConfig } from 'drizzle-kit';

export default defineConfig({
  schema: './src/schema.ts',
  out: './migrations',
  dialect: 'sqlite',
  driver: 'd1-http',
  dbCredentials: {
    accountId: process.env.CLOUDFLARE_ACCOUNT_ID,
    databaseId: process.env.CLOUDFLARE_DATABASE_ID,
    token: process.env.CLOUDFLARE_D1_TOKEN,
  },
});
</file>

<file path="packages/db/eslint.config.js">
import baseConfig from "@acme/eslint-config/base";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: ["dist/**"],
  },
  ...baseConfig,
];
</file>

<file path="packages/db/migrations/0000_youthful_proudstar.sql">
CREATE TABLE `moments` (
	`id` integer PRIMARY KEY NOT NULL,
	`text` text NOT NULL
);
</file>

<file path="packages/db/migrations/0001_swift_puck.sql">
ALTER TABLE `moments` ADD `userId` text NOT NULL;
</file>

<file path="packages/db/migrations/0002_sharp_leech.sql">
PRAGMA foreign_keys=OFF;--> statement-breakpoint
CREATE TABLE `__new_moments` (
	`id` integer PRIMARY KEY AUTOINCREMENT NOT NULL,
	`userId` text NOT NULL,
	`text` text NOT NULL,
	`timestamp` integer NOT NULL
);
--> statement-breakpoint
INSERT INTO `__new_moments`("id", "userId", "text", "timestamp") SELECT "id", "userId", "text", "timestamp" FROM `moments`;--> statement-breakpoint
DROP TABLE `moments`;--> statement-breakpoint
ALTER TABLE `__new_moments` RENAME TO `moments`;--> statement-breakpoint
PRAGMA foreign_keys=ON;
</file>

<file path="packages/db/migrations/0003_swift_sunfire.sql">
CREATE TABLE `recaps` (
	`id` integer PRIMARY KEY AUTOINCREMENT NOT NULL,
	`userId` text NOT NULL,
	`text` text NOT NULL,
	`createdAt` integer NOT NULL,
	`type` text NOT NULL,
	`image` text
);
</file>

<file path="packages/db/migrations/0004_thin_thunderbolt.sql">
ALTER TABLE `recaps` RENAME COLUMN "image" TO "imageId";
</file>

<file path="packages/db/migrations/0005_chunky_rocket_raccoon.sql">
ALTER TABLE `moments` RENAME COLUMN "timestamp" TO "createdAt";
</file>

<file path="packages/db/migrations/0006_pretty_morbius.sql">
CREATE TABLE `userMeta` (
	`userId` text PRIMARY KEY NOT NULL,
	`email` text NOT NULL,
	`createdAt` integer NOT NULL,
	`timezone` text DEFAULT 'America/Los_Angeles' NOT NULL,
	`lastRecapAt` integer
);
</file>

<file path="packages/db/migrations/0007_chief_quentin_quire.sql">
ALTER TABLE `userMeta` ADD `artStyle` text DEFAULT 'classical painting' NOT NULL;
</file>

<file path="packages/db/migrations/meta/_journal.json">
{
  "version": "7",
  "dialect": "sqlite",
  "entries": [
    {
      "idx": 0,
      "version": "6",
      "when": 1733157764200,
      "tag": "0000_youthful_proudstar",
      "breakpoints": true
    },
    {
      "idx": 1,
      "version": "6",
      "when": 1733335458666,
      "tag": "0001_swift_puck",
      "breakpoints": true
    },
    {
      "idx": 2,
      "version": "6",
      "when": 1733414074537,
      "tag": "0002_sharp_leech",
      "breakpoints": true
    },
    {
      "idx": 3,
      "version": "6",
      "when": 1733777186002,
      "tag": "0003_swift_sunfire",
      "breakpoints": true
    },
    {
      "idx": 4,
      "version": "6",
      "when": 1733939956621,
      "tag": "0004_thin_thunderbolt",
      "breakpoints": true
    },
    {
      "idx": 5,
      "version": "6",
      "when": 1734014162450,
      "tag": "0005_chunky_rocket_raccoon",
      "breakpoints": true
    },
    {
      "idx": 6,
      "version": "6",
      "when": 1734107117778,
      "tag": "0006_pretty_morbius",
      "breakpoints": true
    },
    {
      "idx": 7,
      "version": "6",
      "when": 1734108900701,
      "tag": "0007_chief_quentin_quire",
      "breakpoints": true
    }
  ]
}
</file>

<file path="packages/db/migrations/meta/0000_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "524fd2f7-6a3e-47ca-b303-636388fd0c10",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0001_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "ec3baaeb-cfd0-4ce7-88b8-b4650f712ff7",
  "prevId": "524fd2f7-6a3e-47ca-b303-636388fd0c10",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": false
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0002_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "53bdbd5e-8f15-485f-bd16-ab338475abd5",
  "prevId": "ec3baaeb-cfd0-4ce7-88b8-b4650f712ff7",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "timestamp": {
          "name": "timestamp",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0003_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "26eb3615-18f7-4104-b125-bc45621a8b01",
  "prevId": "53bdbd5e-8f15-485f-bd16-ab338475abd5",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "timestamp": {
          "name": "timestamp",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "recaps": {
      "name": "recaps",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "image": {
          "name": "image",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0004_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "5f082d0c-d6b9-40dc-a097-24f67f55d3cd",
  "prevId": "26eb3615-18f7-4104-b125-bc45621a8b01",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "timestamp": {
          "name": "timestamp",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "recaps": {
      "name": "recaps",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "imageId": {
          "name": "imageId",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {
      "\"recaps\".\"image\"": "\"recaps\".\"imageId\""
    }
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0005_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "8b8075ea-3dea-4c85-8ec6-2e927358fa92",
  "prevId": "5f082d0c-d6b9-40dc-a097-24f67f55d3cd",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "recaps": {
      "name": "recaps",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "imageId": {
          "name": "imageId",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {
      "\"moments\".\"timestamp\"": "\"moments\".\"createdAt\""
    }
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0006_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "9e01e7f0-5752-4a96-812a-7f759208180f",
  "prevId": "8b8075ea-3dea-4c85-8ec6-2e927358fa92",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "recaps": {
      "name": "recaps",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "imageId": {
          "name": "imageId",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "userMeta": {
      "name": "userMeta",
      "columns": {
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "timezone": {
          "name": "timezone",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false,
          "default": "'America/Los_Angeles'"
        },
        "lastRecapAt": {
          "name": "lastRecapAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0007_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "fbcf550e-e1c5-45bc-b899-877b57fdd52d",
  "prevId": "9e01e7f0-5752-4a96-812a-7f759208180f",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "recaps": {
      "name": "recaps",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "imageId": {
          "name": "imageId",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "userMeta": {
      "name": "userMeta",
      "columns": {
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "timezone": {
          "name": "timezone",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false,
          "default": "'America/Los_Angeles'"
        },
        "lastRecapAt": {
          "name": "lastRecapAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        },
        "artStyle": {
          "name": "artStyle",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false,
          "default": "'classical painting'"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/package.json">
{
  "name": "@acme/db",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "default": "./src/index.ts"
    }
  },
  "license": "MIT",
  "scripts": {
    "build": "tsc",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "dev": "tsc",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "lint": "eslint",
    "push": "pnpm with-env drizzle-kit push",
    "studio": "pnpm with-env drizzle-kit studio",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false",
    "with-env": "dotenv -e ../../.env --",
    "generate": "pnpm with-env drizzle-kit generate",
    "migrate": "pnpm with-env drizzle-kit migrate"
  },
  "dependencies": {
    "@vercel/postgres": "^0.10.0",
    "drizzle-orm": "^0.35.1",
    "drizzle-zod": "^0.5.1",
    "zod": "catalog:"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/prettier-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "dotenv-cli": "^7.4.2",
    "drizzle-kit": "^0.26.2",
    "eslint": "catalog:",
    "prettier": "catalog:",
    "typescript": "catalog:"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="packages/db/src/client.ts">
// packages/db/src/client.ts
import * as schema from "./schema";
import { drizzle } from "drizzle-orm/d1";
import type { D1Database } from "@cloudflare/workers-types";
import type { DrizzleD1Database } from "drizzle-orm/d1";

// Explicitly type the Drizzle DB with the imported schema
export type DrizzleDB = DrizzleD1Database<typeof schema>;

export function getDB(env: { DB: D1Database }): DrizzleDB {
  return drizzle(env.DB, { schema }) as DrizzleDB;
}
</file>

<file path="packages/db/src/index.ts">
export {getDB} from './client';
export type { DrizzleDB } from './client';
export * from './schema';
</file>

<file path="packages/db/src/schema.ts">
import { sqliteTable, text, integer } from 'drizzle-orm/sqlite-core';

export const moments = sqliteTable('moments', {
  id: integer('id').primaryKey({ autoIncrement: true }),
  userId: text('userId').notNull(),
  createdAt: integer({ mode: 'timestamp' }).notNull(),
  text: text('text').notNull(),
  
});


type RecapType = 'daily' | 'weekly' | 'monthly';

export const recaps = sqliteTable('recaps', {
  id: integer('id').primaryKey({ autoIncrement: true }),
  userId: text('userId').notNull(),
  text: text('text').notNull(),
  createdAt: integer({ mode: 'timestamp' }).notNull(),
  type: text('type').$type<RecapType>().notNull(),
  imageId: text('imageId'),
});

type ArtStyle = 'classical painting' | 'ethereal animated fairy' | 'childrens book' | '3d animated style';

export const userMeta = sqliteTable('userMeta', {
  userId: text('userId').primaryKey(),
  email: text('email').notNull(),
  createdAt: integer({ mode: 'timestamp' }).notNull(),
  timezone: text('timezone').default('America/Los_Angeles').notNull(),
  lastRecapAt: integer({ mode: 'timestamp' }),
  artStyle: text('artStyle').$type<ArtStyle>().default('classical painting').notNull(),
});
</file>

<file path="packages/db/tsconfig.json">
{
  "extends": "@acme/tsconfig/internal-package.json",
  "include": ["src"],
  "exclude": ["node_modules"]
}
</file>

<file path="packages/db/wrangler.toml">
name = ""
compatibility_date = "2024-09-23"
compatibility_flags = ["nodejs_compat"]

[[d1_databases]]
binding = "DB"
database_name = ""
database_id = ""
migrations_dir = "migrations"
</file>

<file path="packages/trpc/eslint.config.js">
import baseConfig from "@acme/eslint-config/base";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: ["dist/**"],
  },
  ...baseConfig,
];
</file>

<file path="packages/trpc/package.json">
{
  "name": "@acme/trpc",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "default": "./src/index.ts"
    }
  },
  "license": "MIT",
  "scripts": {
    "build": "tsc",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "dev": "tsc",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "lint": "eslint",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@acme/db": "workspace:*",
    "@acme/validators": "workspace:*",
    "@clerk/nextjs": "^6.4.2",
    "@trpc/server": "11.0.0-rc.633",
    "superjson": "2.2.1",
    "zod": "catalog:"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/prettier-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "@cloudflare/workers-types":"4.20241205.0",
    "eslint": "catalog:",
    "prettier": "catalog:",
    "typescript": "catalog:"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="packages/trpc/src/index.ts">
export { appRouter, type AppRouter } from './root';
export { createContext } from './trpc';
</file>

<file path="packages/trpc/src/root.ts">
import {createTRPCRouter } from './trpc';
import { postRouter } from './router/post';
import { momentsRouter } from './router/moments';
import { recapsRouter } from './router/recaps';
import { userRouter } from './router/user';

export const appRouter = createTRPCRouter({
  post: postRouter,
  moments: momentsRouter,
  recaps: recapsRouter,
  user: userRouter,
});

export type AppRouter = typeof appRouter;
</file>

<file path="packages/trpc/src/router/moments.ts">
import { moments, userMeta } from "@acme/db";
import { eq, gte, desc, and } from 'drizzle-orm';

import {protectedProcedure} from "../trpc";
import { z } from "zod";

const getPacificTime = (date: Date = new Date()) => {
    return new Date(
        date.toLocaleString('en-US', {
            timeZone: 'America/Los_Angeles'
        })
    );
};

// Helper function to get start of day in PT
const getStartOfDayPT = () => {
    const nowPT = getPacificTime();
    const startOfDay = new Date(nowPT);
    startOfDay.setHours(0, 0, 0, 0);
    return startOfDay;
};

export const momentsRouter = {
  add: protectedProcedure
    .input(z.string())
    .mutation(async ({ input, ctx}) => {
      const { userId } = ctx.user;
      if (!userId) return {success: false};
      
      const nowPT = getPacificTime();

      // Insert moment first
      await ctx.db.insert(moments).values({ 
        text: input, 
        userId, 
        createdAt: nowPT
      });
      
      // Then update user meta
      await ctx.db.update(userMeta)
        .set({ lastRecapAt: nowPT })
        .where(eq(userMeta.userId, userId));
      
      return { success: true };
    }),
  getAll: protectedProcedure
    .query(
      async ({ ctx }) => {
        if (!ctx.user.userId) return [];
        
        const startOfToday = getStartOfDayPT();
        
        const userMoments = await ctx.db
          .select()
          .from(moments)
          .where(
            and(
              eq(moments.userId, ctx.user.userId),
              gte(moments.createdAt, startOfToday)
            )
          )
          .orderBy(desc(moments.createdAt));
          
        return userMoments;
      })
}
</file>

<file path="packages/trpc/src/router/post.ts">
import { moments } from "@acme/db";

import {protectedProcedure, publicProcedure} from "../trpc";
import { z } from "zod";

export const postRouter = {
  all: publicProcedure
    .input(z.string())
    .query(({ input}) => {
    return { id: 1, title: input };
  }),
  private: protectedProcedure
    .input(z.string())
    .query(({ input}) => {
      return { id: 1, title: input };
    }),
  db: protectedProcedure
    .query(async ({ ctx}) => {

      const allMoments = await ctx.db.select().from(moments).all();
      if (!allMoments.length) { return [{"id": 19999, "title": "No moments"}]; }

      return allMoments;
    }),
}
</file>

<file path="packages/trpc/src/router/recaps.ts">
import { z } from "zod";
import { protectedProcedure } from "../trpc";
import { recaps } from "@acme/db";
import { eq } from 'drizzle-orm';

export const recapsRouter = {
  getAll: protectedProcedure
    .query(async ({ ctx }) => {
      if (!ctx.user.userId) return [];
      const userRecaps = await ctx.db
        .select()
        .from(recaps)
        .where(eq(recaps.userId, ctx.user.userId));
      return userRecaps;
    }),
  getById: protectedProcedure
    .input(z.coerce.number().positive())
    .query(async ({ ctx, input }) => {
      if (!ctx.user.userId) return null;
      
      const recap = await ctx.db
        .select()
        .from(recaps)
        .where(eq(recaps.id, input))
        .limit(1);

      if (!recap[0]) return null;

      return recap[0];
    }),
};
</file>

<file path="packages/trpc/src/router/user.ts">
import { z } from "zod";
import { protectedProcedure } from "../trpc";
import { userMeta } from "@acme/db";
import { eq } from 'drizzle-orm';

const artStyles = ['classical painting', 'ethereal animated fairy', 'childrens book', '3d animated style'] as const;

export const userRouter = {
  updateArtStyle: protectedProcedure
    .input(z.enum(artStyles))
    .mutation(async ({ ctx, input }) => {
      if (!ctx.user.userId) throw new Error("Not authenticated");
      
      await ctx.db
        .update(userMeta)
        .set({ artStyle: input })
        .where(eq(userMeta.userId, ctx.user.userId));

      return { success: true };
    }),
    
  getPreferences: protectedProcedure
    .query(async ({ ctx }) => {
      if (!ctx.user.userId) throw new Error("Not authenticated");
      
      const preferences = await ctx.db
        .select()
        .from(userMeta)
        .where(eq(userMeta.userId, ctx.user.userId))
        .limit(1);

      // If no preferences exist, create default preferences
      if (preferences.length === 0) {
        const defaultPreferences = {
          userId: ctx.user.userId,
          email: ctx.user.userId,
          createdAt: new Date(),
          timezone: 'America/Los_Angeles',
          artStyle: 'classical painting' as const,
        };

        await ctx.db.insert(userMeta).values(defaultPreferences);
        return defaultPreferences;
      }

      return preferences[0];
    }),
};
</file>

<file path="packages/trpc/src/trpc.ts">
// packages/api/src/trpc.ts
import {initTRPC, TRPCError} from "@trpc/server";
import superjson from "superjson";
import {ZodError} from "zod";
import {createClerkClient} from '@clerk/backend'
import type {FetchCreateContextFnOptions} from '@trpc/server/adapters/fetch';
import type {CustomContext, CustomContextOptions} from "./types";

export async function createContext({
  req,
  resHeaders,
  clerkPublicKey,
  clerkSecretKey,
  db,
  imagesBucket
}: FetchCreateContextFnOptions & CustomContextOptions): Promise<CustomContext> {
  const clerk = createClerkClient({secretKey: clerkSecretKey, publishableKey: clerkPublicKey});

  const res = await clerk.authenticateRequest(req);

  const isSignedIn = res.isSignedIn

  if (!isSignedIn) {
    return {req, resHeaders, user: null, db, imagesBucket};
  }

  const user = res.toAuth();  // This can return null if not authenticated

  return {req, resHeaders, user, db, imagesBucket};
}

export type Context = Awaited<ReturnType<typeof createContext>>;

const t = initTRPC.context<typeof createContext>().create({
  transformer: superjson,
  errorFormatter: ({shape, error}) => ({
    ...shape,
    data: {
      ...shape.data,
      zodError: error.cause instanceof ZodError ? error.cause.flatten() : null,
    },
  }),
});

export const createCallerFactory = t.createCallerFactory;
export const createTRPCRouter = t.router;
export const publicProcedure = t.procedure;
export const protectedProcedure = t.procedure
  .use(({ctx, next}) => {
    if (ctx.user === null) {
      throw new TRPCError({ code: 'UNAUTHORIZED', message: 'Not authenticated or Session Expired' });
    }
    return next({
      ctx: {
        ...ctx,
        user: ctx.user,
      },
    });
  });
</file>

<file path="packages/trpc/src/types.ts">
import type {AuthObject} from '@clerk/backend';
import type {FetchCreateContextFnOptions} from '@trpc/server/adapters/fetch';
import type { DrizzleDB }from "@acme/db";
import type { R2Bucket } from '@cloudflare/workers-types';

export interface CustomContext {
  req: FetchCreateContextFnOptions['req'];
  resHeaders: FetchCreateContextFnOptions['resHeaders'];
  user: AuthObject | null;
  db: DrizzleDB;
  imagesBucket: R2Bucket;
}

export interface CustomContextOptions {
  clerkSecretKey: string;
  clerkPublicKey: string;
  db: DrizzleDB;
  imagesBucket: R2Bucket;
}
</file>

<file path="packages/trpc/tsconfig.json">
{
  "extends": "@acme/tsconfig/internal-package.json",
  "include": ["src"],
  "exclude": ["node_modules"]
}
</file>

<file path="pnpm-workspace.yaml">
packages:
  - apps/*
  - packages/*
  - tooling/*

catalog:
  "@tanstack/react-query": ^5.59.15
  "@trpc/client": ^11.0.0-rc.477
  "@trpc/react-query": ^11.0.0-rc.477
  "@trpc/server": ^11.0.0-rc.477
  eslint: ^9.12.0
  prettier: ^3.3.3
  tailwindcss: ^3.4.14
  typescript: ^5.6.3
  zod: ^3.23.8

catalogs:
  react18:
    react: 18.3.1
    react-dom: 18.3.1
    "@types/react": ^18.3.11
    "@types/react-dom": ^18.3.1
</file>

<file path="README.md">
# Cloudflare Turbo Stack

A full-stack mobile application template powered by Cloudflare's edge platform. This template provides a foundation for building AI-powered mobile apps with a web landing page, using modern tools and best practices.

## 🚀 Features

- 📱 **Expo Mobile App**: Cross-platform mobile application
- 🌐 **Astro Landing Page**: Fast, modern web presence
- 🔒 **Clerk Authentication**: Secure user management
- 🔄 **tRPC API**: Type-safe API communication
- 🤖 **Workers AI**: Edge AI processing
- 📦 **R2 Storage**: Image and asset storage
- 💾 **D1 Database**: Edge SQLite database with Drizzle ORM
- 🏗️ **Cloudflare Workers**: Serverless compute
- 🔄 **Workflows**: Durable AI task processing

## 📦 Project Structure

```
.
├── apps/
│   ├── apiservice/    # Cloudflare Worker API
│   └── astro/         # Landing page
├── packages/
│   ├── db/           # Database schema and utilities
│   └── trpc/         # tRPC router definitions
└── tooling/          # Shared development tools
```

## 🛠️ Prerequisites

- Node.js >= 20.16.0
- pnpm >= 9.6.0
- Cloudflare account
- Wrangler CLI (`npm install -g wrangler`)
- Clerk account

## 🚀 Getting Started

Note: In a production app, you'll want to properly set up secrets and proper dev/prod environments using wrangler, but this will get you up and running quickly.

1. **Clone the repository**

```bash
git clone <repository-url>
cd cloudflare-turbo
```

2. **Install dependencies**

```bash
pnpm install
```

3. **Configure Cloudflare**

Login to Cloudflare CLI:
```bash
wrangler login
```

Update the following `wrangler.toml` files with your Cloudflare settings:
- `apps/apiservice/wrangler.toml`
- `packages/db/wrangler.toml`

4. **Environment Setup**

Create `.env` files based on the provided examples and update with your credentials:
```bash
cp apps/expo/.env.example apps/expo/.env
```

5. **Start Development**

```bash
pnpm dev
```

## 🔧 Configuration

### Cloudflare Setup

1. Create a D1 Database:
```bash
wrangler d1 create <your-database-name>
```

2. Create an R2 Bucket:
```bash
wrangler r2 bucket create <your-bucket-name>
```

3. Update the respective `wrangler.toml` files with the created resource IDs

### Clerk Setup

1. Create a Clerk application at https://clerk.dev
2. Add the Clerk keys to your `.env` files

## 📝 Development Notes

- Use `pnpm dev` to start all services in development mode
- Database migrations can be run with `pnpm db:generate`
- The project uses a monorepo structure with Turborepo for efficient builds

## 🚀 Deployment

1. **Deploy API Service**
```bash
cd apps/apiservice
pnpm run deploy
```

2. **Deploy Landing Page**
```bash
cd apps/astro
pnpm run deploy
```

3. **Deploy Workflows**
```bash
cd apps/workflows
pnpm run deploy
```

## 📚 Tech Stack

- **Frontend**: React Native (Expo), Astro
- **Backend**: Cloudflare Workers, Workers AI
- **Database**: Cloudflare D1 (SQLite)
- **Storage**: Cloudflare R2
- **Authentication**: Clerk
- **API**: tRPC
- **Build Tool**: Turborepo
- **Package Manager**: pnpm

## 🤝 Contributing

Contributions are welcome! Please read our contributing guidelines before submitting PRs.

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.
</file>

<file path="tooling/eslint/base.js">
/// <reference types="./types.d.ts" />

import * as path from "node:path";
import { includeIgnoreFile } from "@eslint/compat";
import eslint from "@eslint/js";
import importPlugin from "eslint-plugin-import";
import turboPlugin from "eslint-plugin-turbo";
import tseslint from "typescript-eslint";

/**
 * All packages that leverage t3-env should use this rule
 */
export const restrictEnvAccess = tseslint.config(
  { ignores: ["**/env.ts"] },
  {
    files: ["**/*.js", "**/*.ts", "**/*.tsx"],
    rules: {
      "no-restricted-properties": [
        "error",
        {
          object: "process",
          property: "env",
          message:
            "Use `import { env } from '~/env'` instead to ensure validated types.",
        },
      ],
      "no-restricted-imports": [
        "error",
        {
          name: "process",
          importNames: ["env"],
          message:
            "Use `import { env } from '~/env'` instead to ensure validated types.",
        },
      ],
    },
  },
);

export default tseslint.config(
  // Ignore files not tracked by VCS and any config files
  includeIgnoreFile(path.join(import.meta.dirname, "../../.gitignore")),
  { ignores: ["**/*.config.*"] },
  {
    files: ["**/*.js", "**/*.ts", "**/*.tsx"],
    plugins: {
      import: importPlugin,
      turbo: turboPlugin,
    },
    extends: [
      eslint.configs.recommended,
      ...tseslint.configs.recommended,
      ...tseslint.configs.recommendedTypeChecked,
      ...tseslint.configs.stylisticTypeChecked,
    ],
    rules: {
      ...turboPlugin.configs.recommended.rules,
      "@typescript-eslint/no-unused-vars": [
        "error",
        { argsIgnorePattern: "^_", varsIgnorePattern: "^_" },
      ],
      "@typescript-eslint/consistent-type-imports": [
        "warn",
        { prefer: "type-imports", fixStyle: "separate-type-imports" },
      ],
      "@typescript-eslint/no-misused-promises": [
        2,
        { checksVoidReturn: { attributes: false } },
      ],
      "@typescript-eslint/no-unnecessary-condition": [
        "error",
        {
          allowConstantLoopConditions: true,
        },
      ],
      "@typescript-eslint/no-non-null-assertion": "error",
      "import/consistent-type-specifier-style": ["error", "prefer-top-level"],
    },
  },
  {
    linterOptions: { reportUnusedDisableDirectives: true },
    languageOptions: { parserOptions: { projectService: true } },
  },
);
</file>

<file path="tooling/eslint/nextjs.js">
import nextPlugin from "@next/eslint-plugin-next";

/** @type {Awaited<import('typescript-eslint').Config>} */
export default [
  {
    files: ["**/*.ts", "**/*.tsx"],
    plugins: {
      "@next/next": nextPlugin,
    },
    rules: {
      ...nextPlugin.configs.recommended.rules,
      ...nextPlugin.configs["core-web-vitals"].rules,
      // TypeError: context.getAncestors is not a function
      "@next/next/no-duplicate-head": "off",
    },
  },
];
</file>

<file path="tooling/eslint/package.json">
{
  "name": "@acme/eslint-config",
  "private": true,
  "version": "0.3.0",
  "type": "module",
  "exports": {
    "./base": "./base.js",
    "./nextjs": "./nextjs.js",
    "./react": "./react.js"
  },
  "scripts": {
    "clean": "git clean -xdf .cache .turbo node_modules",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@eslint/compat": "^1.2.0",
    "@next/eslint-plugin-next": "^14.2.15",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-jsx-a11y": "^6.10.0",
    "eslint-plugin-react": "^7.37.1",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-turbo": "^2.1.3",
    "typescript-eslint": "^8.9.0"
  },
  "devDependencies": {
    "@acme/prettier-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "@types/eslint__js": "8.42.3",
    "eslint": "catalog:",
    "prettier": "catalog:",
    "typescript": "catalog:"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="tooling/eslint/react.js">
import reactPlugin from "eslint-plugin-react";
import hooksPlugin from "eslint-plugin-react-hooks";

/** @type {Awaited<import('typescript-eslint').Config>} */
export default [
  {
    files: ["**/*.ts", "**/*.tsx"],
    plugins: {
      react: reactPlugin,
      "react-hooks": hooksPlugin,
    },
    rules: {
      ...reactPlugin.configs["jsx-runtime"].rules,
      ...hooksPlugin.configs.recommended.rules,
    },
    languageOptions: {
      globals: {
        React: "writable",
      },
    },
  },
];
</file>

<file path="tooling/eslint/tsconfig.json">
{
  "extends": "@acme/tsconfig/base.json",
  "include": ["."],
  "exclude": ["node_modules"]
}
</file>

<file path="tooling/eslint/types.d.ts">
/**
 * Since the ecosystem hasn't fully migrated to ESLint's new FlatConfig system yet,
 * we "need" to type some of the plugins manually :(
 */

declare module "eslint-plugin-import" {
  import type { Linter, Rule } from "eslint";

  export const configs: {
    recommended: { rules: Linter.RulesRecord };
  };
  export const rules: Record<string, Rule.RuleModule>;
}

declare module "eslint-plugin-react" {
  import type { Linter, Rule } from "eslint";

  export const configs: {
    recommended: { rules: Linter.RulesRecord };
    all: { rules: Linter.RulesRecord };
    "jsx-runtime": { rules: Linter.RulesRecord };
  };
  export const rules: Record<string, Rule.RuleModule>;
}

declare module "eslint-plugin-react-hooks" {
  import type { Linter, Rule } from "eslint";

  export const configs: {
    recommended: {
      rules: {
        "rules-of-hooks": Linter.RuleEntry;
        "exhaustive-deps": Linter.RuleEntry;
      };
    };
  };
  export const rules: Record<string, Rule.RuleModule>;
}

declare module "@next/eslint-plugin-next" {
  import type { Linter, Rule } from "eslint";

  export const configs: {
    recommended: { rules: Linter.RulesRecord };
    "core-web-vitals": { rules: Linter.RulesRecord };
  };
  export const rules: Record<string, Rule.RuleModule>;
}
</file>

<file path="tooling/github/package.json">
{
  "name": "@acme/github"
}
</file>

<file path="tooling/github/setup/action.yml">
name: "Setup and install"
description: "Common setup steps for Actions"

runs:
  using: composite
  steps:
    - uses: pnpm/action-setup@v4
    - uses: actions/setup-node@v4
      with:
        node-version-file: ".nvmrc"
        cache: "pnpm"

    - shell: bash
      run: pnpm add -g turbo

    - shell: bash
      run: pnpm install
</file>

<file path="tooling/prettier/index.js">
import { fileURLToPath } from "url";

/** @typedef {import("prettier").Config} PrettierConfig */
/** @typedef {import("prettier-plugin-tailwindcss").PluginOptions} TailwindConfig */
/** @typedef {import("@ianvs/prettier-plugin-sort-imports").PluginConfig} SortImportsConfig */

/** @type { PrettierConfig | SortImportsConfig | TailwindConfig } */
const config = {
  plugins: [
    "@ianvs/prettier-plugin-sort-imports",
    "prettier-plugin-tailwindcss",
  ],
  tailwindConfig: fileURLToPath(
    new URL("../../tooling/tailwind/web.ts", import.meta.url),
  ),
  tailwindFunctions: ["cn", "cva"],
  importOrder: [
    "<TYPES>",
    "^(react/(.*)$)|^(react$)|^(react-native(.*)$)",
    "^(next/(.*)$)|^(next$)",
    "^(expo(.*)$)|^(expo$)",
    "<THIRD_PARTY_MODULES>",
    "",
    "<TYPES>^@acme",
    "^@acme/(.*)$",
    "",
    "<TYPES>^[.|..|~]",
    "^~/",
    "^[../]",
    "^[./]",
  ],
  importOrderParserPlugins: ["typescript", "jsx", "decorators-legacy"],
  importOrderTypeScriptVersion: "4.4.0",
  overrides: [
    {
      files: "*.json.hbs",
      options: {
        parser: "json",
      },
    },
    {
      files: "*.js.hbs",
      options: {
        parser: "babel",
      },
    },
  ],
};

export default config;
</file>

<file path="tooling/prettier/package.json">
{
  "name": "@acme/prettier-config",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "exports": {
    ".": "./index.js"
  },
  "scripts": {
    "clean": "git clean -xdf .cache .turbo node_modules",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@ianvs/prettier-plugin-sort-imports": "^4.3.1",
    "prettier": "catalog:",
    "prettier-plugin-tailwindcss": "^0.6.8"
  },
  "devDependencies": {
    "@acme/tsconfig": "workspace:*",
    "typescript": "catalog:"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="tooling/prettier/tsconfig.json">
{
  "extends": "@acme/tsconfig/base.json",
  "include": ["."],
  "exclude": ["node_modules"]
}
</file>

<file path="tooling/tailwind/base.ts">
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: ["src/**/*.{ts,tsx}"],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderColor: {
        DEFAULT: "hsl(var(--border))",
      },
    },
  },
} satisfies Config;
</file>

<file path="tooling/tailwind/eslint.config.js">
// FIXME: This kinda stinks...
/// <reference types="../../tooling/eslint/types.d.ts" />

import baseConfig from "@acme/eslint-config/base";

export default [...baseConfig];
</file>

<file path="tooling/tailwind/native.ts">
import type { Config } from "tailwindcss";

import base from "./base";

export default {
  content: base.content,
  presets: [base],
  theme: {},
} satisfies Config;
</file>

<file path="tooling/tailwind/package.json">
{
  "name": "@acme/tailwind-config",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "exports": {
    "./native": "./native.ts",
    "./web": "./web.ts"
  },
  "license": "MIT",
  "scripts": {
    "clean": "git clean -xdf .cache .turbo node_modules",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "lint": "eslint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "postcss": "^8.4.47",
    "tailwindcss": "catalog:",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/prettier-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "eslint": "catalog:",
    "prettier": "catalog:",
    "typescript": "catalog:"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="tooling/tailwind/tsconfig.json">
{
  "extends": "@acme/tsconfig/base.json",
  "include": ["."],
  "exclude": ["node_modules"]
}
</file>

<file path="tooling/tailwind/web.ts">
import type { Config } from "tailwindcss";
import animate from "tailwindcss-animate";

import base from "./base";

export default {
  content: base.content,
  presets: [base],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [animate],
} satisfies Config;
</file>

<file path="tooling/typescript/base.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    /** Base Options */
    "esModuleInterop": true,
    "skipLibCheck": true,
    "target": "ES2022",
    "lib": ["ES2022"],
    "allowJs": true,
    "resolveJsonModule": true,
    "moduleDetection": "force",
    "isolatedModules": true,

    /** Keep TSC performant in monorepos */
    "incremental": true,
    "disableSourceOfProjectReferenceRedirect": true,
    "tsBuildInfoFile": "${configDir}/.cache/tsbuildinfo.json",

    /** Strictness */
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "checkJs": true,

    /** Transpile using Bundler (not tsc) */
    "module": "Preserve",
    "moduleResolution": "Bundler",
    "noEmit": true
  },
  "exclude": ["node_modules", "build", "dist", ".next", ".expo"]
}
</file>

<file path="tooling/typescript/internal-package.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "./base.json",
  "compilerOptions": {
    /** Emit types for internal packages to speed up editor performance. */
    "declaration": true,
    "declarationMap": true,
    "emitDeclarationOnly": true,
    "noEmit": false,
    "outDir": "${configDir}/dist"
  }
}
</file>

<file path="tooling/typescript/package.json">
{
  "name": "@acme/tsconfig",
  "private": true,
  "version": "0.1.0",
  "files": [
    "*.json"
  ]
}
</file>

<file path="turbo.json">
{
  "$schema": "https://turborepo.org/schema.json",
  "ui": "tui",
  "tasks": {
    "topo": {
      "dependsOn": ["^topo"]
    },
    "build": {
      "dependsOn": ["^build"],
      "outputs": [".cache/tsbuildinfo.json", "dist/**"]
    },
    "dev": {
      "dependsOn": ["^dev"],
      "cache": false,
      "persistent": false
    },
    "format": {
      "outputs": [".cache/.prettiercache"],
      "outputLogs": "new-only"
    },
    "lint": {
      "dependsOn": ["^topo", "^build"],
      "outputs": [".cache/.eslintcache"]
    },
    "typecheck": {
      "dependsOn": ["^topo", "^build"],
      "outputs": [".cache/tsbuildinfo.json"]
    },
    "clean": {
      "cache": false
    },
    "//#clean": {
      "cache": false
    },
    "push": {
      "cache": false,
      "interactive": true
    },
    "studio": {
      "cache": false,
      "persistent": true
    },
    "ui-add": {
      "cache": false,
      "interactive": true
    }
  },
  "globalEnv": [
    "CLOUDFLARE_ACCOUNT_ID",
    "CLOUDFLARE_DATABASE_ID",
    "CLOUDFLARE_D1_TOKEN",
    "CLERK_SECRET_KEY",
    "PORT",
    "INNGEST_EVENT_KEY"
  ],
  "globalPassThroughEnv": [
    "NODE_ENV",
    "CI",
    "VERCEL",
    "VERCEL_ENV",
    "VERCEL_URL",
    "npm_lifecycle_event"
  ]
}
</file>

<file path="turbo/generators/config.ts">
import { execSync } from "node:child_process";
import type { PlopTypes } from "@turbo/gen";

interface PackageJson {
  name: string;
  scripts: Record<string, string>;
  dependencies: Record<string, string>;
  devDependencies: Record<string, string>;
}

export default function generator(plop: PlopTypes.NodePlopAPI): void {
  plop.setGenerator("init", {
    description: "Generate a new package for the Acme Monorepo",
    prompts: [
      {
        type: "input",
        name: "name",
        message:
          "What is the name of the package? (You can skip the `@acme/` prefix)",
      },
      {
        type: "input",
        name: "deps",
        message:
          "Enter a space separated list of dependencies you would like to install",
      },
    ],
    actions: [
      (answers) => {
        if ("name" in answers && typeof answers.name === "string") {
          if (answers.name.startsWith("@acme/")) {
            answers.name = answers.name.replace("@acme/", "");
          }
        }
        return "Config sanitized";
      },
      {
        type: "add",
        path: "packages/{{ name }}/eslint.config.js",
        templateFile: "templates/eslint.config.js.hbs",
      },
      {
        type: "add",
        path: "packages/{{ name }}/package.json",
        templateFile: "templates/package.json.hbs",
      },
      {
        type: "add",
        path: "packages/{{ name }}/tsconfig.json",
        templateFile: "templates/tsconfig.json.hbs",
      },
      {
        type: "add",
        path: "packages/{{ name }}/src/index.ts",
        template: "export const name = '{{ name }}';",
      },
      {
        type: "modify",
        path: "packages/{{ name }}/package.json",
        async transform(content, answers) {
          if ("deps" in answers && typeof answers.deps === "string") {
            const pkg = JSON.parse(content) as PackageJson;
            for (const dep of answers.deps.split(" ").filter(Boolean)) {
              const version = await fetch(
                `https://registry.npmjs.org/-/package/${dep}/dist-tags`,
              )
                .then((res) => res.json())
                .then((json) => json.latest);
              if (!pkg.dependencies) pkg.dependencies = {};
              pkg.dependencies[dep] = `^${version}`;
            }
            return JSON.stringify(pkg, null, 2);
          }
          return content;
        },
      },
      async (answers) => {
        /**
         * Install deps and format everything
         */
        if ("name" in answers && typeof answers.name === "string") {
          // execSync("pnpm dlx sherif@latest --fix", {
          //   stdio: "inherit",
          // });
          execSync("pnpm i", { stdio: "inherit" });
          execSync(
            `pnpm prettier --write packages/${answers.name}/** --list-different`,
          );
          return "Package scaffolded";
        }
        return "Package not scaffolded";
      },
    ],
  });
}
</file>

<file path="turbo/generators/templates/eslint.config.js.hbs">
import baseConfig from "@acme/eslint-config/base";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: [],
  },
  ...baseConfig,
];
</file>

<file path="turbo/generators/templates/package.json.hbs">
{
  "name": "@acme/{{ name }}",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "exports": {
    ".": "./src/index.ts"
  },
  "license": "MIT",
  "scripts": {
    "build": "tsc",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "dev": "tsc",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "lint": "eslint",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/prettier-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "eslint": "catalog:",
    "prettier": "catalog:",
    "typescript": "catalog:"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="turbo/generators/templates/tsconfig.json.hbs">
{
  "extends": "@acme/tsconfig/internal-package.json",
  "compilerOptions": {},
  "include": ["*.ts", "src"],
  "exclude": ["node_modules"]
}
</file>

</files>
</file>

<file path="docs/repomix.md">
npx repomix
</file>

<file path="game-ui-component-guide.md">
I'll create a comprehensive documentation file for the Game UI Component Library, combining all the guides and examples into a single document.

I'll break down the documentation into smaller parts and create them sequentially.

Let's try with a smaller file focused on core components:

Let's try a different approach by focusing on just a few key components at a time:

Let's try an even smaller file:

I see we're still facing issues with file operations. Let me provide a comprehensive summary of the Game UI Component Library documentation directly in this response:

# Game UI Component Library - Documentation

## Introduction

The Game UI Component Library provides React Native components for creating themed game user interfaces with minimal effort. The library supports multiple visual styles and adapts to different screen sizes.

## Core Components

### Button Component
```tsx
import { Button } from './components/core';

// Basic usage
<Button title="Start Game" onPress={handleStart} />

// Variants
<Button title="Primary" variant="primary" onPress={handleAction} />
<Button title="Secondary" variant="secondary" onPress={handleAction} />
<Button title="Outline" variant="outline" onPress={handleAction} />
<Button title="Text" variant="text" onPress={handleAction} />

// Sizes
<Button title="Small" size="small" onPress={handleAction} />
<Button title="Medium" size="medium" onPress={handleAction} />
<Button title="Large" size="large" onPress={handleAction} />

// States
<Button title="Loading..." loading={true} onPress={handleAction} />
<Button title="Disabled" disabled={true} onPress={handleAction} />
```

### Text Component
```tsx
import { Text } from './components/core';

// Heading variants
<Text variant="h1">Main Title</Text>
<Text variant="h2">Section Title</Text>
<Text variant="h3">Subsection Title</Text>
<Text variant="h4">Small Title</Text>

// Body text
<Text variant="body1">Regular body text</Text>
<Text variant="body2">Smaller body text</Text>

// Other variants
<Text variant="caption">Caption text</Text>
<Text variant="button">BUTTON TEXT</Text>
<Text variant="overline">OVERLINE TEXT</Text>

// Text alignment
<Text align="left">Left aligned</Text>
<Text align="center">Center aligned</Text>
<Text align="right">Right aligned</Text>

// Custom color
<Text color="#FF5722">Custom colored text</Text>
```

### Card Component
```tsx
import { Card, Text } from './components/core';

// Basic card
<Card>
  <Text>Card content</Text>
</Card>

// Card with title
<Card title="Item Details">
  <Text>This card has a title</Text>
</Card>

// Card variants
<Card variant="default">
  <Text>Default card</Text>
</Card>

<Card variant="outlined">
  <Text>Outlined card</Text>
</Card>

<Card variant="elevated">
  <Text>Elevated card</Text>
</Card>

// Interactive card
<Card title="Clickable Card" onPress={() => alert('Card pressed')}>
  <Text>Click me</Text>
</Card>
```

### Input Component
```tsx
import { Input } from './components/core';
import { useState } from 'react';

function InputExample() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  
  return (
    <>
      {/* Basic input */}
      <Input
        label="Username"
        value={username}
        onChangeText={setUsername}
        placeholder="Enter username"
      />
      
      {/* Password input */}
      <Input
        label="Password"
        value={password}
        onChangeText={setPassword}
        secureTextEntry={true}
        placeholder="Enter password"
      />
      
      {/* Input with error */}
      <Input
        label="Email"
        value={email}
        onChangeText={setEmail}
        error="Invalid email format"
      />
    </>
  );
}
```

### LoadingIndicator Component
```tsx
import { LoadingIndicator } from './components/core';

// Basic spinner
<LoadingIndicator />

// Sizes
<LoadingIndicator size="small" />
<LoadingIndicator size="medium" />
<LoadingIndicator size="large" />

// With message
<LoadingIndicator message="Loading game assets..." />

// Conditional loading
<LoadingIndicator loading={isLoading} />
```

## Functional Components

### LoginScreen Component
```tsx
import { LoginScreen } from './components/functions';

function LoginDemo() {
  const handleLogin = (username, password) => {
    console.log(`Login attempt: ${username}, ${password}`);
  };
  
  return (
    <LoginScreen
      onLogin={handleLogin}
      onRegister={() => console.log('Register')}
      onForgotPassword={() => console.log('Forgot password')}
      loading={false}
      error={undefined}
      logoSource={require('./assets/images/logo.png')}
      backgroundSource={require('./assets/images/background.jpg')}
      themeStyle="sciFiStyle"
    />
  );
}
```

### MainGameInterface Component
```tsx
import { MainGameInterface } from './components/functions';

function GameScreen() {
  // Sample resources
  const resources = [
    { name: 'Gold', value: 1250, icon: require('./assets/images/gold.png') },
    { name: 'Gems', value: 56, icon: require('./assets/images/gems.png') },
  ];
  
  // Sample tabs
  const tabs = [
    { name: 'home', label: 'Home', icon: 'home-icon' },
    { name: 'shop', label: 'Shop', icon: 'shop-icon', badgeCount: 2 },
  ];
  
  return (
    <MainGameInterface
      playerName="GameHero"
      playerLevel={42}
      playerExp={{ current: 850, max: 1000 }}
      resources={resources}
      tabs={tabs}
      currentTab="home"
      onTabChange={(tab) => console.log(`Tab changed: ${tab}`)}
      themeStyle="chineseStyle"
    >
      {/* Content for the current tab */}
      <View>
        <Text>Home tab content</Text>
      </View>
    </MainGameInterface>
  );
}
```

## Theme System

The library includes a theme system with predefined game UI styles:

```tsx
import { ThemeProvider } from './components/themes/ThemeProvider';
import { Button, Text } from './components/core';

function App() {
  const [theme, setTheme] = useState('chineseStyle');
  
  return (
    <ThemeProvider initialThemeStyle={theme}>
      <View style={{ flex: 1 }}>
        <Text variant="h1">Game Title</Text>
        
        <Button 
          title="Chinese Style" 
          variant={theme === 'chineseStyle' ? 'primary' : 'outline'}
          onPress={() => setTheme('chineseStyle')} 
        />
        
        <Button 
          title="Sci-Fi Style" 
          variant={theme === 'sciFiStyle' ? 'primary' : 'outline'}
          onPress={() => setTheme('sciFiStyle')} 
        />
        
        <Button 
          title="Anime Style" 
          variant={theme === 'animeStyle' ? 'primary' : 'outline'}
          onPress={() => setTheme('animeStyle')} 
        />
      </View>
    </ThemeProvider>
  );
}
```

## Advanced Usage

### Custom Dialogs
```tsx
import { View, Modal } from 'react-native';
import { Button, Card, Text } from './components/core';

function GameDialog({ visible, title, message, onConfirm, onCancel }) {
  return (
    <Modal visible={visible} transparent={true} animationType="fade">
      <View style={{ 
        flex: 1, 
        backgroundColor: 'rgba(0,0,0,0.5)', 
        justifyContent: 'center', 
        padding: 20 
      }}>
        <Card title={title}>
          <Text>{message}</Text>
          
          <View style={{ flexDirection: 'row', justifyContent: 'flex-end', marginTop: 20 }}>
            <Button title="Cancel" variant="outline" onPress={onCancel} style={{ marginRight: 10 }} />
            <Button title="Confirm" variant="primary" onPress={onConfirm} />
          </View>
        </Card>
      </View>
    </Modal>
  );
}
```

### Responsive Design
```tsx
import { Dimensions } from 'react-native';

// Get screen dimensions
const { width, height } = Dimensions.get('window');
const isTablet = width > 768;
const isLargePhone = width > 414 && width <= 768;

// Apply responsive styles
<View style={{ 
  padding: isTablet ? 24 : 16,
  flexDirection: isTablet ? 'row' : 'column'
}}>
  <Card style={{ flex: isTablet ? 1 : undefined, marginRight: isTablet ? 16 : 0 }}>
    <Text>Card 1</Text>
  </Card>
  
  <Card style={{ flex: isTablet ? 2 : undefined, marginTop: isTablet ? 0 : 16 }}>
    <Text>Card 2</Text>
  </Card>
</View>
```

### Game Context Integration
```tsx
import { createContext, useContext, useReducer } from 'react';
import { MainGameInterface } from './components/functions';

// Create context for game state
const GameContext = createContext();

// Create provider
function GameProvider({ children }) {
  const [state, dispatch] = useReducer(gameReducer, initialState);
  
  return (
    <GameContext.Provider value={{ state, dispatch }}>
      {children}
    </GameContext.Provider>
  );
}

// Use context with UI components
function GameScreen() {
  const { state, dispatch } = useContext(GameContext);
  
  // Map game state to component props
  const resources = [
    { name: 'Gold', value: state.gold, icon: require('./assets/gold.png') },
    // Other resources...
  ];
  
  return (
    <MainGameInterface
      playerName={state.playerName}
      playerLevel={state.level}
      resources={resources}
      // Other props from game state...
    >
      {/* Game content */}
    </MainGameInterface>
  );
}
```

## Accessibility Features

The components include built-in accessibility support:

```tsx
// Accessible button
<Button
  title="Attack"
  onPress={handleAttack}
  accessibilityLabel="Attack the enemy"
  accessibilityHint="Deals damage based on your weapon"
/>

// Group related items
<View accessibilityRole="group" accessibilityLabel="Player Stats">
  <Text>Health: 100/100</Text>
  <Text>Mana: 50/50</Text>
</View>
```

## Component Customization

All components can be deeply customized while maintaining theme consistency:

```tsx
// Custom styled button
<Button
  title="Custom Button"
  style={{
    borderRadius: 30,
    paddingVertical: 15,
  }}
  textStyle={{
    fontSize: 18,
    fontWeight: 'bold',
  }}
/>

// Custom styled card
<Card
  title="Custom Card"
  style={{
    borderWidth: 2,
    borderColor: theme.colors.primary,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
  }}
  titleStyle={{
    fontSize: 20,
    fontWeight: 'bold',
  }}
>
  <Text>Custom styled content</Text>
</Card>
```

This documentation provides a comprehensive overview of the Game UI Component Library, demonstrating how to use the components to create themed, responsive game interfaces.
</file>

<file path="guides.md">
# Game UI Component Library - Micro-Component Implementation Strategy

## Introduction to Micro-Component Architecture

To overcome the file size limitations we've encountered, we'll now focus on a micro-component architecture approach. This strategy involves breaking down larger UI elements into small, focused components that can be easily maintained and composed together.

## Benefits of Micro-Component Architecture

1. **Smaller File Sizes**: Each component file remains small and manageable
2. **Incremental Development**: Add features gradually without rewriting entire components
3. **Better Reusability**: Small components are more likely to be reused across the application
4. **Easier Testing**: Test individual pieces of functionality in isolation
5. **Simpler Maintenance**: Changes to one aspect don't require modifying large files

## Implementation Strategy for Priority 1 Components

### 1. SettingsMenu Implementation

Rather than creating a single large SettingsMenu component, we'll break it down into smaller, specialized components:

#### Base Components
1. `SettingLabel.tsx` - Consistent labeling for settings (with optional description)
2. `SettingContainer.tsx` - Standardized container with consistent styling
3. `SettingDivider.tsx` - Visual separator between settings groups

#### Control Components
1. `ToggleSetting.tsx` - On/off switch with label
2. `SliderSetting.tsx` - Range selector with value display
3. `DropdownSetting.tsx` - Selection from list of options
4. `RadioSetting.tsx` - Mutually exclusive options

#### Group Components
1. `SettingsSection.tsx` - Group of related settings with a title
2. `SettingsTab.tsx` - Tab content for a category of settings
3. `TabNavigation.tsx` - Tab switcher for settings categories

#### Example Implementation Plan
1. Create the base components first
2. Build the control components using the base components
3. Implement the group components using the control components
4. Create specific sections (audio, graphics, etc.) using these building blocks

### 2. CharacterStats Implementation

Similarly, we'll break down the character stats system into smaller components:

#### Base Components
1. `ProgressBar.tsx` - Basic progress visualization
2. `StatLabel.tsx` - Styled stat name and value display
3. `ModifierTag.tsx` - Small visual element for stat modifiers

#### Stat Components
1. `SingleStat.tsx` - Individual stat with name and value
2. `StatWithModifiers.tsx` - Stat showing base value and modifiers
3. `StatProgress.tsx` - Stat with progress bar visualization

#### Group Components
1. `StatGroup.tsx` - Group of related stats with a title
2. `StatGrid.tsx` - Grid layout for multiple stats
3. `AttributeSection.tsx` - Complete section of character attributes

#### Example Implementation Plan
1. Create the base components first
2. Build the stat components using the base components
3. Implement the group components using the stat components
4. Create specialized views (attributes, combat stats, etc.)

### 3. InventorySystem Implementation

The inventory system can be broken down as follows:

#### Base Components
1. `ItemSlot.tsx` - Single inventory slot (empty or filled)
2. `ItemIcon.tsx` - Visualizing an item with rarity, level, etc.
3. `ItemTooltip.tsx` - Detailed item information on hover/tap

#### Item Components
1. `InventoryItem.tsx` - Complete item representation in inventory
2. `EquipmentSlot.tsx` - Specialized slot for equipped items
3. `ItemQuantity.tsx` - Display for stackable items

#### Layout Components
1. `ItemGrid.tsx` - Grid layout for inventory slots
2. `ItemList.tsx` - List layout for inventory items
3. `FilterBar.tsx` - Controls for filtering and sorting items

#### Example Implementation Plan
1. Create the base components first
2. Build the item components using the base components
3. Implement the layout components using the item components
4. Create specialized views (backpack, equipment, bank, etc.)

## Implementation Example: Settings Controls

Let's look at a concrete example of how this micro-component approach would work for settings controls:

### Step 1: Create SettingLabel
```tsx
// SettingLabel.tsx
import React from 'react';
import { View, StyleSheet } from 'react-native';
import { Text } from '../core';

interface SettingLabelProps {
  label: string;
  description?: string;
}

const SettingLabel: React.FC<SettingLabelProps> = ({ label, description }) => {
  return (
    <View style={styles.container}>
      <Text variant="body2" style={styles.label}>{label}</Text>
      {description && (
        <Text variant="caption" style={styles.description}>{description}</Text>
      )}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  label: {
    fontWeight: 'bold',
  },
  description: {
    opacity: 0.7,
    marginTop: 2,
  },
});

export default SettingLabel;
```

### Step 2: Create SettingContainer
```tsx
// SettingContainer.tsx
import React from 'react';
import { View, StyleSheet } from 'react-native';

interface SettingContainerProps {
  children: React.ReactNode;
  disabled?: boolean;
}

const SettingContainer: React.FC<SettingContainerProps> = ({ 
  children, 
  disabled = false 
}) => {
  return (
    <View style={[
      styles.container,
      disabled && styles.disabled
    ]}>
      {children}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flexDirection: 'row',
    alignItems: 'center',
    padding: 12,
    borderBottomWidth: StyleSheet.hairlineWidth,
    borderBottomColor: 'rgba(0, 0, 0, 0.1)',
  },
  disabled: {
    opacity: 0.5,
  },
});

export default SettingContainer;
```

### Step 3: Create ToggleSetting Using Micro-Components
```tsx
// ToggleSetting.tsx
import React from 'react';
import { Switch } from 'react-native';
import { useTheme } from '../../utils/theme';
import SettingContainer from './SettingContainer';
import SettingLabel from './SettingLabel';

interface ToggleSettingProps {
  label: string;
  description?: string;
  value: boolean;
  onChange: (value: boolean) => void;
  disabled?: boolean;
}

const ToggleSetting: React.FC<ToggleSettingProps> = ({
  label,
  description,
  value,
  onChange,
  disabled = false,
}) => {
  const { theme } = useTheme();
  
  return (
    <SettingContainer disabled={disabled}>
      <SettingLabel label={label} description={description} />
      
      <Switch
        value={value}
        onValueChange={onChange}
        disabled={disabled}
        trackColor={{ 
          false: '#D1D1D1', 
          true: `${theme.colors.primary}80` 
        }}
        thumbColor={value ? theme.colors.primary : '#F4F4F4'}
      />
    </SettingContainer>
  );
};

export default ToggleSetting;
```

## Next Steps: Creating Audio Settings Section

Now that we have our base components, we can create a specific settings section:

```tsx
// AudioSettings.tsx
import React from 'react';
import { View, StyleSheet } from 'react-native';
import { Text } from '../core';
import ToggleSetting from './ToggleSetting';
import SliderSetting from './SliderSetting';
import SettingDivider from './SettingDivider';

interface AudioSettingsProps {
  settings: {
    soundEnabled: boolean;
    musicEnabled: boolean;
    soundVolume: number;
    musicVolume: number;
    voiceVolume: number;
  };
  onChange: (key: string, value: any) => void;
}

const AudioSettings: React.FC<AudioSettingsProps> = ({ settings, onChange }) => {
  return (
    <View style={styles.container}>
      <Text variant="h3" style={styles.sectionTitle}>Audio Settings</Text>
      
      <ToggleSetting
        label="Sound Effects"
        description="Enable in-game sound effects"
        value={settings.soundEnabled}
        onChange={(value) => onChange('soundEnabled', value)}
      />
      
      <ToggleSetting
        label="Music"
        description="Enable background music"
        value={settings.musicEnabled}
        onChange={(value) => onChange('musicEnabled', value)}
      />
      
      <SettingDivider />
      
      <SliderSetting
        label="Sound Volume"
        value={settings.soundVolume}
        min={0}
        max={100}
        formatValue={(value) => `${value}%`}
        onChange={(value) => onChange('soundVolume', value)}
        disabled={!settings.soundEnabled}
      />
      
      <SliderSetting
        label="Music Volume"
        value={settings.musicVolume}
        min={0}
        max={100}
        formatValue={(value) => `${value}%`}
        onChange={(value) => onChange('musicVolume', value)}
        disabled={!settings.musicEnabled}
      />
      
      <SliderSetting
        label="Voice Volume"
        value={settings.voiceVolume}
        min={0}
        max={100}
        formatValue={(value) => `${value}%`}
        onChange={(value) => onChange('voiceVolume', value)}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    padding: 8,
  },
  sectionTitle: {
    marginBottom: 16,
    paddingHorizontal: 12,
  },
});

export default AudioSettings;
```

## Building the Complete Settings Page

Finally, we can compose all these components into a complete settings page:

```tsx
// SettingsPage.tsx
import React, { useState } from 'react';
import { View, StyleSheet, ScrollView } from 'react-native';
import { Card, Button } from '../core';
import TabNavigation from './TabNavigation';
import AudioSettings from './AudioSettings';
import GraphicsSettings from './GraphicsSettings';
import GameplaySettings from './GameplaySettings';
import AccessibilitySettings from './AccessibilitySettings';

const defaultSettings = {
  audio: {
    soundEnabled: true,
    musicEnabled: true,
    soundVolume: 80,
    musicVolume: 70,
    voiceVolume: 90,
  },
  graphics: {
    quality: 'medium',
    fps: 60,
    shadows: true,
    particles: true,
    // ...other graphics settings
  },
  // ...other setting categories
};

const SettingsPage: React.FC = () => {
  const [settings, setSettings] = useState(defaultSettings);
  const [activeTab, setActiveTab] = useState('audio');
  
  const handleSettingChange = (category, key, value) => {
    setSettings(prev => ({
      ...prev,
      [category]: {
        ...prev[category],
        [key]: value
      }
    }));
  };
  
  const resetSettings = () => {
    setSettings(defaultSettings);
  };
  
  const renderTabContent = () => {
    switch (activeTab) {
      case 'audio':
        return (
          <AudioSettings
            settings={settings.audio}
            onChange={(key, value) => handleSettingChange('audio', key, value)}
          />
        );
      case 'graphics':
        return (
          <GraphicsSettings
            settings={settings.graphics}
            onChange={(key, value) => handleSettingChange('graphics', key, value)}
          />
        );
      // Add other tabs as needed
    }
  };
  
  return (
    <Card title="Game Settings" style={styles.container}>
      <TabNavigation
        tabs={[
          { id: 'audio', label: 'Audio' },
          { id: 'graphics', label: 'Graphics' },
          { id: 'gameplay', label: 'Gameplay' },
          { id: 'accessibility', label: 'Accessibility' },
        ]}
        activeTab={activeTab}
        onTabChange={setActiveTab}
      />
      
      <ScrollView style={styles.content}>
        {renderTabContent()}
      </ScrollView>
      
      <View style={styles.footer}>
        <Button
          title="Reset to Default"
          variant="outline"
          onPress={resetSettings}
          style={styles.resetButton}
        />
        
        <Button
          title="Save Settings"
          variant="primary"
          onPress={() => console.log('Settings saved:', settings)}
          style={styles.saveButton}
        />
      </View>
    </Card>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  content: {
    flex: 1,
  },
  footer: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    padding: 16,
    borderTopWidth: 1,
    borderTopColor: 'rgba(0,0,0,0.1)',
  },
  resetButton: {
    marginRight: 12,
  },
  saveButton: {
    minWidth: 100,
  },
});

export default SettingsPage;
```

## Conclusion: Benefits of the Micro-Component Approach

This approach provides several key benefits:

1. **Size Management**: Each file remains small and focused, avoiding write timeout issues
2. **Progressive Enhancement**: We can improve components incrementally
3. **Composability**: Complex UIs are built from simple building blocks
4. **Maintainability**: Easier to fix and update individual components
5. **Team Collaboration**: Different team members can work on different components
6. **Testing**: Simpler to create unit tests for smaller components
7. **Documentation**: Easier to document smaller, focused components

By following this micro-component architecture, we can continue developing our Game UI Component Library despite the file size limitations, creating a comprehensive, flexible system for game user interfaces.

## Next Implementation Focus

For the next phase of development, we should focus on:

1. Implementing the ProgressBar component as a fundamental building block
2. Creating the basic stat visualization components for character attributes
3. Developing the inventory slot and item display components
4. Building simple animation utilities that can be composed into more complex effects

This approach will allow us to make steady progress while working around the technical limitations we've encountered.
</file>

<file path="new-docs/architecture-overview.md">
# 项目架构总览

## 架构设计理念

本项目采用现代化的分布式架构，基于Cloudflare的边缘计算平台构建，旨在提供高性能、可扩展且安全的全栈移动应用解决方案。架构设计遵循以下原则：

- **边缘优先**: 利用Cloudflare的全球网络，将计算和数据存储尽可能靠近用户
- **类型安全**: 通过TypeScript和tRPC实现端到端类型安全
- **模块化**: 使用Turborepo管理的monorepo结构，实现代码共享和独立部署
- **无服务器**: 采用Cloudflare Workers和D1数据库，无需管理服务器

## 核心技术栈

### 前端技术

- **Expo (React Native)**: 用于构建跨平台移动应用
- **Astro**: 用于构建高性能静态网站/落地页
- **Tailwind CSS**: 用于一致的UI设计系统
- **Clerk**: 用于用户认证和管理

### 后端技术

- **Cloudflare Workers**: 无服务器计算平台
- **Cloudflare D1**: 边缘SQLite数据库
- **Cloudflare R2**: 对象存储服务
- **Cloudflare Workers AI**: 边缘AI处理能力
- **Cloudflare Workflows**: 持久化任务处理

### 开发工具

- **Turborepo**: Monorepo构建系统
- **PNPM**: 包管理器
- **TypeScript**: 静态类型检查
- **Drizzle ORM**: 类型安全的ORM
- **tRPC**: 端到端类型安全的API

## 分层架构

项目采用清晰的分层架构，各层职责明确：

```
┌─────────────────────────────────────────────────────────────┐
│                      客户端应用层                           │
│  ┌───────────────┐            ┌───────────────────────┐    │
│  │  Expo移动应用  │            │  Astro静态网站/落地页  │    │
│  └───────┬───────┘            └───────────┬───────────┘    │
└──────────┼──────────────────────────────┬─┴────────────────┘
           │                              │
           │ tRPC客户端                   │ HTTP请求
           ▼                              ▼
┌──────────────────────────────────────────────────────────┐
│                       API服务层                          │
│  ┌────────────────────────────────────────────────────┐  │
│  │              Cloudflare Worker API                  │  │
│  │  ┌─────────────┐  ┌─────────────┐  ┌────────────┐  │  │
│  │  │  tRPC路由   │  │ 中间件/验证 │  │ 错误处理   │  │  │
│  │  └─────────────┘  └─────────────┘  └────────────┘  │  │
│  └────────────────────────────────────────────────────┘  │
└───────────────────────────┬──────────────────────────────┘
                            │
                            ▼
┌──────────────────────────────────────────────────────────┐
│                      服务/业务逻辑层                      │
│  ┌─────────────┐  ┌─────────────┐  ┌───────────────────┐ │
│  │ 用户服务    │  │ 内容服务    │  │ AI处理服务        │ │
│  └─────────────┘  └─────────────┘  └───────────────────┘ │
└───────────────────────────┬──────────────────────────────┘
                            │
                            ▼
┌──────────────────────────────────────────────────────────┐
│                        数据访问层                         │
│  ┌─────────────┐  ┌─────────────┐  ┌───────────────────┐ │
│  │ D1数据库    │  │ R2存储      │  │ 外部API集成       │ │
│  │ (Drizzle ORM)│  │ (对象存储)  │  │                   │ │
│  └─────────────┘  └─────────────┘  └───────────────────┘ │
└──────────────────────────────────────────────────────────┘
```

## 数据流

### 请求流程

1. **客户端请求**: 移动应用或网站通过tRPC客户端或HTTP请求发起API调用
2. **API路由**: Cloudflare Worker接收请求并路由到相应的tRPC处理程序
3. **中间件处理**: 验证请求、检查认证状态、应用速率限制等
4. **业务逻辑**: 执行相应的业务逻辑，调用服务层
5. **数据访问**: 通过Drizzle ORM访问D1数据库或通过R2 API访问存储
6. **响应返回**: 将处理结果返回给客户端

### 异步任务流程

对于需要长时间处理的任务（如AI处理）：

1. **任务提交**: 客户端提交任务请求
2. **任务排队**: API服务将任务提交到Cloudflare Workflows
3. **异步处理**: Workflows执行任务，可能调用Workers AI或其他服务
4. **状态更新**: 处理结果写入数据库
5. **客户端轮询**: 客户端通过API查询任务状态和结果

## 模块职责

### 前端模块

- **Expo移动应用**: 提供用户主要交互界面，包含认证、内容展示和功能操作
- **Astro网站**: 提供项目介绍、用户注册入口和营销内容

### 后端模块

- **API服务**: 处理所有客户端请求，实现业务逻辑和数据操作
- **数据库模块**: 定义数据结构、关系和访问方法
- **存储服务**: 管理用户上传的文件和应用资源
- **Workflows**: 处理需要长时间运行的任务和复杂处理流程

### 共享模块

- **tRPC定义**: 提供API类型定义，确保前后端类型一致性
- **通用工具**: 提供日期处理、格式化、验证等通用功能

## 安全架构

- **认证**: 使用Clerk进行用户认证和会话管理
- **授权**: 基于用户角色和权限的访问控制
- **数据验证**: 使用Zod进行请求数据验证
- **边缘安全**: 利用Cloudflare的DDoS保护和WAF功能

## 扩展性考虑

- **水平扩展**: Cloudflare Workers自动扩展以处理增加的负载
- **功能模块化**: 新功能可以作为独立的tRPC路由和服务添加
- **多区域部署**: 利用Cloudflare的全球网络实现低延迟访问

## 技术集成关系

- **tRPC + TypeScript**: 确保API类型安全和开发体验
- **Drizzle + D1**: 提供类型安全的数据库访问
- **Expo + tRPC客户端**: 实现移动应用与后端的无缝集成
- **Clerk + Workers**: 提供安全的认证和授权机制

通过这种架构设计，项目能够提供高性能、可靠且可扩展的用户体验，同时保持开发效率和代码质量。
</file>

<file path="new-docs/collaboration-faq.md">
# 协作常见问题与处理建议

## 目录

- [团队协作常见问题](#团队协作常见问题)
- [代码冲突处理](#代码冲突处理)
- [技术决策与共识](#技术决策与共识)
- [知识共享与文档维护](#知识共享与文档维护)
- [性能与优化问题](#性能与优化问题)
- [测试覆盖不足问题](#测试覆盖不足问题)
- [沟通与协调策略](#沟通与协调策略)

## 团队协作常见问题

### 需求理解不一致

**问题**: 团队成员对需求的理解存在差异，导致实现不符合预期。

**解决方案**:
- 需求讨论会议必须有明确的会议记录和决策点
- 使用用户故事和验收标准明确需求
- 实现前进行需求复盘，确保理解一致
- 建立需求变更流程，确保变更被所有相关人员知晓

### 开发进度不同步

**问题**: 相互依赖的功能开发进度不一致，阻碍整体进展。

**解决方案**:
- 使用任务看板(如GitHub Projects)可视化进度
- 每日简短同步会议(15分钟)更新进度和阻碍
- 关键路径任务优先分配资源
- 使用功能标志(Feature Flags)解耦依赖功能的发布

### 代码风格不一致

**问题**: 不同开发者的代码风格差异大，影响可读性和维护性。

**解决方案**:
- 使用ESLint和Prettier强制代码风格一致
- 建立并遵循代码风格指南
- 代码审查中关注风格问题
- 使用husky和lint-staged在提交前自动格式化代码

## 代码冲突处理

### 合并冲突

**问题**: 多人同时修改同一文件导致合并冲突。

**解决方案**:
- 小步提交，频繁合并主分支到功能分支
- 明确模块责任人，减少多人同时修改同一文件
- 使用任务看板标记正在修改的文件
- 冲突解决时，相关开发者一起处理，确保正确性

### Schema变更冲突

**问题**: 数据库Schema并行变更导致迁移冲突。

**解决方案**:
- Schema变更需要团队公告，避免并行修改
- 每个Sprint只安排一次主要Schema变更
- 使用Drizzle的迁移工具管理迁移顺序
- 建立Schema变更审查流程，确保兼容性

### API契约变更

**问题**: API变更影响依赖该API的其他功能。

**解决方案**:
- 使用tRPC确保类型安全和API契约一致性
- API变更需要通知所有潜在使用者
- 重大变更采用版本化策略，保持向后兼容
- 编写API变更影响分析文档

## 技术决策与共识

### 技术选型分歧

**问题**: 团队对技术选型存在不同意见，难以达成共识。

**解决方案**:
- 建立技术决策框架，包括评估标准
- 对重要技术选型进行概念验证(POC)
- 技术决策会议记录决策理由和考虑因素
- 定期回顾技术选型效果，及时调整

### 架构演进

**问题**: 随着项目发展，初始架构不再适用，需要演进。

**解决方案**:
- 定期架构审查会议，评估当前架构
- 增量式架构改进，避免大规模重构
- 使用架构决策记录(ADR)文档化架构决策
- 新功能开发前评估对架构的影响

### 技术债务管理

**问题**: 技术债务累积，影响开发效率和系统稳定性。

**解决方案**:
- 维护技术债务清单，评估影响和优先级
- 每个Sprint分配一定比例时间(如20%)处理技术债务
- 新功能开发时避免引入新的技术债务
- 重构计划与功能开发结合，增量改进

## 知识共享与文档维护

### 知识孤岛

**问题**: 关键知识只掌握在个别团队成员手中，形成知识孤岛。

**解决方案**:
- 定期技术分享会议，轮流讲解负责的模块
- 实施结对编程，促进知识传递
- 建立内部知识库，记录关键决策和设计
- 鼓励代码注释和自文档化代码

### 文档过时

**问题**: 文档未及时更新，与实际代码不符。

**解决方案**:
- 将文档更新纳入Definition of Done
- 代码审查中检查相关文档是否更新
- 使用自动化工具生成API文档
- 定期文档审查，清理过时内容

### 入职培训不足

**问题**: 新团队成员入职培训不足，融入团队慢。

**解决方案**:
- 建立结构化的入职培训计划
- 指定导师一对一指导新成员
- 准备项目架构和关键模块的培训文档
- 安排简单但有意义的入门任务

## 性能与优化问题

### 性能瓶颈识别

**问题**: 难以识别和定位系统性能瓶颈。

**解决方案**:
- 建立性能监控系统，收集关键指标
- 使用性能分析工具(如Chrome DevTools, Lighthouse)
- 进行负载测试，模拟真实使用场景
- 建立性能基准，监控性能变化趋势

### 移动应用性能

**问题**: 移动应用在低端设备上性能不佳。

**解决方案**:
- 使用性能预算限制资源使用
- 实施懒加载和代码分割
- 优化图片和资源大小
- 在多种设备上测试，特别是低端设备

### 边缘计算优化

**问题**: Cloudflare Workers性能优化和资源限制处理。

**解决方案**:
- 遵循Cloudflare Workers最佳实践
- 使用缓存减少计算需求
- 监控CPU时间和内存使用
- 大型计算任务拆分为多个小任务

## 测试覆盖不足问题

### 测试欠债

**问题**: 快速开发导致测试覆盖不足，积累测试欠债。

**解决方案**:
- 将测试覆盖率纳入CI/CD流程
- 新代码要求达到最低测试覆盖率
- 分配专门时间补充测试
- 优先测试核心功能和高风险区域

### 测试维护困难

**问题**: 测试代码维护成本高，经常因代码变更而失效。

**解决方案**:
- 使用测试抽象和辅助函数减少重复
- 避免测试实现细节，关注行为
- 使用契约测试确保接口一致性
- 定期重构测试代码，保持可维护性

### 端到端测试不稳定

**问题**: 端到端测试不稳定，经常出现随机失败。

**解决方案**:
- 使用可靠的等待策略，避免时间依赖
- 隔离测试环境，避免测试间相互影响
- 实施重试机制处理临时性失败
- 详细记录测试失败信息，便于调试

## 沟通与协调策略

### 远程协作挑战

**问题**: 远程或混合工作模式下的协作效率降低。

**解决方案**:
- 使用异步沟通工具(如Slack, Notion)
- 建立明确的沟通协议和响应期望
- 定期视频会议保持团队连接
- 使用协作工具(如Figma, Miro)进行远程协作

### 跨职能协作

**问题**: 开发、设计、产品等不同角色之间的协作不畅。

**解决方案**:
- 建立跨职能团队，共同负责功能交付
- 早期设计和开发协作，避免后期返工
- 使用统一的需求和任务管理工具
- 定期跨职能回顾会议，持续改进协作流程

### 决策与责任不明确

**问题**: 决策过程不透明，责任划分不明确。

**解决方案**:
- 使用RACI矩阵明确角色和责任
- 建立决策记录机制，记录决策过程和理由
- 授权团队成员在职责范围内自主决策
- 定期回顾决策效果，总结经验教训

---

## 常见问题与团队约定

### 项目特定约定

- **命名约定**: 所有与Cloudflare相关的服务使用`cf`前缀
- **分支策略**: 功能分支从`develop`创建，完成后合并回`develop`
- **会议安排**: 每周一上午进行Sprint计划，周五下午进行回顾
- **值班轮换**: 团队成员轮流负责生产环境监控和问题响应

### 技术栈特定问题

#### tRPC相关

- **问题**: tRPC路由过多导致类型生成慢
  **解决**: 按领域拆分路由文件，避免单个文件过大

- **问题**: tRPC客户端缓存管理
  **解决**: 使用React Query的缓存失效策略，明确定义缓存键

#### Cloudflare相关

- **问题**: D1数据库连接限制
  **解决**: 实施连接池和请求批处理，减少连接数

- **问题**: Workers执行时间限制
  **解决**: 长时间任务转移到Workflows处理，实施任务分片

#### Expo相关

- **问题**: 原生模块集成复杂
  **解决**: 使用Expo开发构建服务(EAS)，避免本地原生构建

- **问题**: 应用大小优化
  **解决**: 使用资源优化工具，实施代码分割，按需加载

### 团队工作流程约定

- 每日站会不超过15分钟，聚焦进度和阻碍
- 代码审查在24小时内完成，超时可请求其他审查者
- 严重生产问题使用专门的警报渠道，确保及时响应
- 技术分享会每两周举行一次，轮流主讲

通过积极沟通、明确流程和持续改进，团队可以有效应对协作中的各种挑战，保持高效和愉快的工作环境。
</file>

<file path="new-docs/feature-development-guide.md">
# 新需求实现与协作规范

## 目录

- [开发流程概述](#开发流程概述)
- [Schema变更规范](#schema变更规范)
- [前端页面开发规范](#前端页面开发规范)
- [API与服务层开发规范](#api与服务层开发规范)
- [多人协作冲突避免策略](#多人协作冲突避免策略)
- [命名与路径规范](#命名与路径规范)
- [测试与Mock策略](#测试与mock策略)

## 开发流程概述

新功能开发遵循以下标准流程：

1. **需求分析与任务拆分**
   - 在Issue中创建需求描述，包含功能点、UI设计参考和验收标准
   - 将需求拆分为数据模型变更、API实现、UI开发等子任务

2. **分支管理**
   - 从`main`分支创建功能分支，命名格式：`feature/[功能名称]`
   - Bug修复使用`fix/[问题简述]`格式

3. **开发顺序**
   - 数据库Schema变更 → API/Service实现 → 前端UI开发 → 测试
   - 每个步骤完成后在PR中更新进度

4. **代码审查与合并**
   - 提交PR前运行完整测试套件
   - 至少需要一名团队成员审查通过
   - 合并后删除功能分支

## Schema变更规范

### 数据库Schema变更流程

1. **Schema定义**
   - 所有表结构定义集中在`packages/db/src/schema.ts`文件中
   - 使用Drizzle ORM的类型安全定义方式

2. **迁移文件生成**
   - 修改schema后，运行迁移命令生成迁移文件：
     ```bash
     pnpm db:generate
     ```
   - 检查生成的迁移文件确保变更符合预期

3. **迁移执行**
   - 本地测试环境执行迁移：
     ```bash
     pnpm db:migrate
     ```
   - 提交PR时，包含schema变更和对应的迁移文件

### Schema变更注意事项

- **向后兼容**: 尽量采用添加新字段而非修改现有字段的方式
- **默认值处理**: 为新增的非空字段提供合理的默认值
- **索引考虑**: 根据查询模式为频繁查询的字段添加索引
- **关系定义**: 明确定义表间关系，使用外键约束

### Schema变更文档

每次Schema变更需在PR描述中包含：

- 变更的表和字段列表
- 变更原因和影响范围
- 是否需要数据迁移脚本
- 相关的API变更

## 前端页面开发规范

### Expo移动应用开发

1. **页面组织**
   - 页面文件放置在`apps/expo/app/`目录下
   - 使用目录路由结构，每个路由对应一个目录
   - 页面组件使用`page.tsx`命名

2. **组件开发**
   - 共享组件放在`apps/expo/components/`目录
   - 组件采用功能分类组织，如`ui/`, `forms/`, `layout/`等
   - 复杂组件拆分为多个小组件，便于维护和测试

3. **状态管理**
   - 使用React Context或Zustand管理全局状态
   - 页面级状态使用React hooks管理
   - 避免过度使用全局状态，优先考虑组件内状态和props传递

### Astro网站开发

1. **页面结构**
   - 页面文件放在`apps/astro/src/pages/`目录
   - 使用Astro组件(.astro)构建静态部分
   - 交互部分使用React组件(.tsx)实现

2. **样式管理**
   - 使用Tailwind CSS进行样式设计
   - 遵循移动优先的响应式设计原则
   - 复杂组件可使用CSS Module或styled-components

## API与服务层开发规范

### tRPC路由开发

1. **路由组织**
   - 路由定义放在`packages/trpc/src/router/`目录下
   - 按功能模块组织路由文件，如`user.ts`, `content.ts`等
   - 在`root.ts`中合并所有路由

2. **输入验证**
   - 使用Zod进行输入参数验证
   - 为每个过程定义明确的输入schema
   - 错误消息应友好且具有指导性

3. **错误处理**
   - 使用tRPC的错误处理机制，定义清晰的错误类型
   - 区分客户端错误和服务器错误
   - 避免在客户端暴露敏感错误信息

### 服务层实现

1. **服务组织**
   - 业务逻辑实现在`apps/apiservice/src/services/`目录下
   - 按领域模型组织服务，如`UserService`, `ContentService`等
   - 服务间依赖通过依赖注入管理

2. **数据访问**
   - 使用Drizzle ORM进行数据库操作
   - 复杂查询封装为可重用的函数
   - 事务操作确保数据一致性

3. **外部API集成**
   - API客户端封装在`apps/apiservice/src/clients/`目录下
   - 使用适当的重试和错误处理机制
   - 缓存策略减少外部API调用

## 多人协作冲突避免策略

### 任务认领与协调

1. **任务认领**
   - 在开始工作前，在Issue中认领任务
   - 更新Issue状态为"In Progress"
   - 标注预计完成时间

2. **进度同步**
   - 每日在团队沟通渠道更新进度
   - 遇到阻碍及时寻求帮助
   - 完成重要里程碑时通知团队

### 代码冲突预防

1. **频繁同步主分支**
   - 每天至少一次从main分支拉取最新代码
   - 解决冲突后再继续开发

2. **模块化开发**
   - 尽量减少对共享文件的修改
   - 新功能优先考虑添加新文件而非修改现有文件
   - 大型重构提前通知团队并协调时间

3. **Schema变更协调**
   - Schema变更计划提前在团队会议中讨论
   - 一次PR中只包含相关的Schema变更
   - 变更后及时通知团队更新本地数据库

### 文档同步

1. **API文档**
   - 新API添加后更新API文档
   - 使用tRPC的类型生成工具自动生成文档

2. **Schema文档**
   - 重要字段添加注释说明用途
   - 维护ER图反映最新的数据模型

3. **README更新**
   - 新功能或配置变更后更新README
   - 保持安装和开发指南的最新状态

## 命名与路径规范

### 命名约定

1. **文件命名**
   - React组件: PascalCase (如`UserProfile.tsx`)
   - 工具函数: camelCase (如`formatDate.ts`)
   - 常量: UPPER_SNAKE_CASE (如`API_ENDPOINTS.ts`)
   - 类型定义: PascalCase, 以T或I开头 (如`TUser`, `IUserService`)

2. **变量命名**
   - 变量和函数: camelCase
   - 组件Props: PascalCase (如`UserProfileProps`)
   - 布尔值变量: 使用is/has/should前缀 (如`isLoading`, `hasError`)

3. **API命名**
   - 查询: get开头 (如`getUser`, `getUserPosts`)
   - 修改: create/update/delete开头 (如`createPost`, `updateProfile`)
   - 列表: 使用复数形式 (如`getPosts`, `getComments`)

### 路径规范

1. **导入路径**
   - 使用别名简化导入路径 (如`@/components`, `@/utils`)
   - 避免使用相对路径超过两级 (如`../../components`)
   - 按类别组织导入语句，内置模块优先

2. **资源路径**
   - 静态资源放在`public/`或`assets/`目录
   - 图片按功能模块组织子目录
   - 使用CDN路径访问生产环境资源

## 测试与Mock策略

### 测试环境配置

1. **本地测试环境**
   - 使用wrangler开发服务器模拟Cloudflare环境
   - 本地D1数据库用于开发测试

2. **CI测试环境**
   - GitHub Actions运行自动化测试
   - 使用测试专用的D1数据库实例

### Mock策略

1. **API Mock**
   - 使用MSW模拟API响应
   - 在`mocks/`目录定义模拟处理程序
   - 提供默认数据集用于开发和测试

2. **环境变量降级**
   - 定义开发环境专用的配置
   - 提供降级服务模拟第三方API

通过遵循以上规范，团队可以高效协作，减少冲突，保持代码质量和一致性，加速新功能的开发和交付。
</file>

<file path="new-docs/project-structure.md">
# 项目目录结构

## 概述

本项目是一个基于Cloudflare边缘平台的全栈移动应用模板，采用Turborepo管理的monorepo结构，集成了多种现代化技术和最佳实践。

## 目录结构

```
.
├── apps/                  # 应用程序目录
│   ├── apiservice/        # Cloudflare Worker API服务
│   │   ├── src/           # API源代码
│   │   ├── wrangler.toml  # Cloudflare Worker配置
│   │   └── package.json   # 依赖配置
│   ├── astro/             # Astro静态网站(落地页)
│   │   ├── src/           # 网站源代码
│   │   ├── public/        # 静态资源
│   │   └── functions/     # Cloudflare Pages函数
│   ├── expo/              # Expo移动应用
│   │   ├── app/           # 应用页面和组件
│   │   └── assets/        # 移动应用资源
│   └── workflows/         # Cloudflare Workflows持久化任务处理
│       └── src/           # 工作流源代码
├── docs/                  # 项目文档
│   ├── CONTRIBUTING.md    # 贡献指南
│   └── DEVELOPMENT_GUIDELINES.md # 开发指南
├── packages/              # 共享包目录
│   ├── db/                # 数据库模块
│   │   ├── migrations/    # 数据库迁移文件
│   │   └── src/           # 数据库schema和工具
│   └── trpc/              # tRPC API定义
│       └── src/           # tRPC路由和类型
├── tooling/               # 开发工具和配置
│   ├── eslint/            # ESLint配置
│   ├── github/            # GitHub工作流配置
│   ├── prettier/          # Prettier代码格式化配置
│   ├── tailwind/          # Tailwind CSS配置
│   └── typescript/        # TypeScript配置
├── turbo/                 # Turborepo配置
│   └── generators/        # 代码生成器模板
├── .env.example           # 环境变量示例
├── package.json           # 项目依赖和脚本
└── pnpm-workspace.yaml    # PNPM工作区配置
```

## 主要目录和文件说明

### apps/

- **apiservice/**: Cloudflare Worker API服务，处理后端API请求
  - 提供tRPC端点，处理数据库操作和业务逻辑
  - 通过wrangler.toml配置与Cloudflare资源的连接

- **astro/**: 基于Astro框架的静态网站，作为项目的落地页
  - 使用Tailwind CSS进行样式设计
  - 包含Cloudflare Pages函数用于服务端逻辑

- **expo/**: 基于Expo的跨平台移动应用
  - 使用React Native构建UI组件
  - 通过tRPC客户端与后端API通信

- **workflows/**: Cloudflare Workflows持久化任务处理
  - 处理长时间运行的AI任务和异步操作

### packages/

- **db/**: 数据库模块
  - 使用Drizzle ORM定义数据库schema
  - 包含数据库迁移文件和客户端连接配置
  - 与Cloudflare D1(边缘SQLite数据库)集成

- **trpc/**: tRPC API定义
  - 定义类型安全的API路由和过程
  - 提供前后端共享的类型定义

### tooling/

包含各种开发工具和配置，确保项目代码质量和一致性：

- ESLint配置用于代码检查
- Prettier配置用于代码格式化
- Tailwind CSS配置用于样式设计
- TypeScript配置用于类型检查

## 关键文件

- **package.json**: 定义项目依赖和脚本命令
- **pnpm-workspace.yaml**: 配置PNPM工作区
- **turbo.json**: Turborepo配置，定义构建管道和缓存策略
- **wrangler.toml**: 各应用中的Cloudflare Worker配置文件

## 技术栈概览

- **前端**: React Native (Expo), Astro, Tailwind CSS
- **后端**: Cloudflare Workers, Workflows
- **数据库**: Cloudflare D1 (SQLite) + Drizzle ORM
- **存储**: Cloudflare R2
- **API**: tRPC
- **认证**: Clerk
- **AI处理**: Cloudflare Workers AI
- **构建工具**: Turborepo, PNPM

这种结构设计使项目具有良好的模块化和可扩展性，同时利用Cloudflare的边缘计算能力提供高性能的用户体验。
</file>

<file path="new-docs/release-process.md">
# 发布流程与插件管理

## 目录

- [发布流程概述](#发布流程概述)
- [版本管理策略](#版本管理策略)
- [发布前检查清单](#发布前检查清单)
- [构建与部署流程](#构建与部署流程)
- [环境管理](#环境管理)
- [Capacitor插件管理](#capacitor插件管理)
- [回滚策略](#回滚策略)
- [发布后监控](#发布后监控)

## 发布流程概述

本项目采用持续集成和持续部署(CI/CD)策略，通过自动化流程确保代码质量和部署效率。发布流程包括以下阶段：

1. **开发与测试**: 功能开发、代码审查和自动化测试
2. **预发布**: 在预发布环境验证功能和性能
3. **发布准备**: 版本标记、更新日志生成和发布说明
4. **生产部署**: 部署到生产环境
5. **发布后验证**: 确认部署成功并监控性能

## 版本管理策略

### 语义化版本

项目遵循[语义化版本](https://semver.org/)规范(SemVer)：

- **主版本号(X.0.0)**: 不兼容的API变更
- **次版本号(0.X.0)**: 向后兼容的功能新增
- **修订号(0.0.X)**: 向后兼容的问题修复

### 版本控制流程

1. **分支策略**
   - `main`: 主分支，包含最新稳定代码
   - `develop`: 开发分支，包含下一版本的功能
   - `release/vX.Y.Z`: 发布分支，用于准备特定版本
   - `hotfix/description`: 热修复分支，用于紧急修复

2. **版本标记**
   - 使用Git标签标记版本: `git tag -a vX.Y.Z -m "版本描述"`
   - 推送标签到远程仓库: `git push origin vX.Y.Z`

3. **更新日志**
   - 使用[Conventional Commits](https://www.conventionalcommits.org/)规范提交信息
   - 自动从提交信息生成更新日志

## 发布前检查清单

每次发布前必须完成以下检查：

### 代码质量检查

- [ ] 所有自动化测试通过
- [ ] 代码覆盖率达到目标要求
- [ ] 静态代码分析无严重问题
- [ ] 代码审查已完成并解决所有评论

### 功能验证

- [ ] 所有新功能按照验收标准测试通过
- [ ] 回归测试确保现有功能正常工作
- [ ] 边界情况和错误处理已测试
- [ ] 性能测试结果符合预期

### 文档更新

- [ ] API文档已更新
- [ ] 用户指南已更新
- [ ] 更新日志已生成
- [ ] 发布说明已准备

### 配置检查

- [ ] 环境变量已正确配置
- [ ] 第三方服务集成已验证
- [ ] 数据库迁移脚本已测试
- [ ] 缓存策略已验证

## 构建与部署流程

### 构建流程

1. **准备构建环境**
   ```bash
   pnpm install
   ```

2. **运行构建**
   ```bash
   pnpm build
   ```

3. **生成构建报告**
   - 构建大小分析
   - 依赖审计
   - 性能指标

### 部署流程

#### Cloudflare Workers部署

1. **部署API服务**
   ```bash
   cd apps/apiservice
   pnpm deploy
   ```

2. **部署数据库迁移**
   ```bash
   cd packages/db
   pnpm db:deploy
   ```

#### Expo应用发布

1. **构建Android应用**
   ```bash
   cd apps/expo
   pnpm build:android
   ```

2. **构建iOS应用**
   ```bash
   cd apps/expo
   pnpm build:ios
   ```

3. **提交应用商店**
   - 使用EAS提交到App Store和Google Play
   ```bash
   pnpm submit
   ```

#### Astro网站部署

```bash
   cd apps/astro
   pnpm deploy
```

### 自动化部署

使用GitHub Actions自动化部署流程：

```yaml
name: Deploy

on:
  push:
    tags:
      - 'v*'

jobs:
  deploy-api:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - name: Install dependencies
        run: pnpm install
      - name: Deploy API
        run: pnpm deploy:api
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  deploy-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - name: Install dependencies
        run: pnpm install
      - name: Deploy Web
        run: pnpm deploy:web
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

  build-mobile:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - name: Install dependencies
        run: pnpm install
      - name: Setup EAS
        run: pnpm global add eas-cli
      - name: Build mobile apps
        run: cd apps/expo && pnpm build
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
```

## 环境管理

### 环境类型

- **开发环境**: 用于日常开发和测试
- **预发布环境**: 用于发布前验证
- **生产环境**: 用户访问的环境

### 环境配置

使用环境变量和wrangler配置管理不同环境：

1. **环境变量文件**
   - `.env.development`: 开发环境配置
   - `.env.staging`: 预发布环境配置
   - `.env.production`: 生产环境配置

2. **Wrangler环境配置**
   ```toml
   # wrangler.toml
   [env.dev]
   name = "apiservice-dev"
   d1_databases = [{binding = "DB", database_name = "app-dev"}]
   r2_buckets = [{binding = "STORAGE", bucket_name = "app-storage-dev"}]

   [env.production]
   name = "apiservice"
   d1_databases = [{binding = "DB", database_name = "app"}]
   r2_buckets = [{binding = "STORAGE", bucket_name = "app-storage"}]
   ```

### 环境切换

```bash
# 开发环境
pnpm dev

# 预发布环境
pnpm dev:staging

# 生产环境部署
pnpm deploy:production
```

## Capacitor插件管理

### 已集成插件清单

| 插件名称 | 版本 | 用途 | 配置文件 |
|---------|------|------|----------|
| @capacitor/camera | ^5.0.0 | 相机访问和图片拍摄 | capacitor.config.ts |
| @capacitor/filesystem | ^5.0.0 | 文件系统访问和管理 | capacitor.config.ts |
| @capacitor/push-notifications | ^5.0.0 | 推送通知 | capacitor.config.ts |
| @capacitor/share | ^5.0.0 | 内容分享 | capacitor.config.ts |
| @capacitor/splash-screen | ^5.0.0 | 启动屏幕 | capacitor.config.ts |
| @capacitor/status-bar | ^5.0.0 | 状态栏管理 | capacitor.config.ts |

### 插件安装流程

1. **安装插件包**
   ```bash
   cd apps/expo
   pnpm add @capacitor/new-plugin
   ```

2. **更新Capacitor配置**
   ```typescript
   // capacitor.config.ts
   import { CapacitorConfig } from '@capacitor/cli';

   const config: CapacitorConfig = {
     appId: 'com.example.app',
     appName: 'My App',
     plugins: {
       // 添加插件配置
       NewPlugin: {
         option1: 'value1',
         option2: 'value2',
       },
     },
   };

   export default config;
   ```

3. **同步原生项目**
   ```bash
   npx cap sync
   ```

4. **创建TypeScript适配层**
   ```typescript
   // src/utils/plugins/newPlugin.ts
   import { Plugins } from '@capacitor/core';

   const { NewPlugin } = Plugins;

   export interface NewPluginOptions {
     option1: string;
     option2: string;
   }

   export async function useNewPlugin(options: NewPluginOptions) {
     try {
       return await NewPlugin.doSomething(options);
     } catch (error) {
       console.error('Error using NewPlugin:', error);
       throw error;
     }
   }
   ```

5. **添加平台特定代码**（如需）
   - iOS: 修改`ios/App/App/AppDelegate.swift`
   - Android: 修改`android/app/src/main/java/.../MainActivity.java`

### 插件测试

1. **单元测试**
   ```typescript
   // src/utils/plugins/__tests__/newPlugin.test.ts
   import { useNewPlugin } from '../newPlugin';
   import { Plugins } from '@capacitor/core';

   vi.mock('@capacitor/core', () => ({
     Plugins: {
       NewPlugin: {
         doSomething: vi.fn(),
       },
     },
   }));

   describe('useNewPlugin', () => {
     it('calls plugin with correct options', async () => {
       const options = { option1: 'test', option2: 'value' };
       await useNewPlugin(options);
       expect(Plugins.NewPlugin.doSomething).toHaveBeenCalledWith(options);
     });
   });
   ```

2. **设备测试**
   - 在真实设备上测试插件功能
   - 测试不同操作系统版本的兼容性
   - 测试权限请求和处理

### 插件文档

为每个插件创建使用文档，包含：

- 安装说明
- 配置选项
- API参考
- 使用示例
- 常见问题解答

## 回滚策略

### 何时回滚

- 发现严重bug影响核心功能
- 性能显著下降
- 安全漏洞
- 数据完整性问题

### 回滚流程

1. **API服务回滚**
   ```bash
   wrangler rollback apiservice
   ```

2. **数据库回滚**
   ```bash
   pnpm db:rollback
   ```

3. **移动应用回滚**
   - 在应用商店发布之前：停止发布流程
   - 已发布：提交紧急更新或使用应用内版本控制

4. **网站回滚**
   ```bash
   wrangler pages deployment rollback
   ```

### 回滚后操作

- 通知团队和利益相关者
- 分析问题原因
- 制定修复计划
- 更新测试用例防止类似问题

## 发布后监控

### 监控指标

- **性能指标**: 响应时间、加载时间、API延迟
- **错误率**: API错误、客户端异常、崩溃报告
- **使用指标**: 活跃用户、功能使用率、会话时长
- **资源使用**: CPU、内存、带宽、存储

### 监控工具

- Cloudflare Analytics: 监控Workers和Pages性能
- Sentry: 错误跟踪和性能监控
- Firebase Analytics: 移动应用使用分析
- Custom Logging: 自定义日志和指标收集

### 警报设置

配置关键指标的警报阈值：

- 错误率超过1%
- API响应时间超过500ms
- 崩溃率超过0.5%
- 资源使用接近限制

### 事件响应

1. **警报触发**
   - 通知负责团队（Slack、电子邮件、短信）
   - 自动创建事件跟踪工单

2. **问题诊断**
   - 检查日志和监控数据
   - 复现问题
   - 确定根本原因

3. **解决方案**
   - 实施修复或临时解决方案
   - 验证解决方案
   - 更新文档和知识库

通过遵循以上发布流程和插件管理规范，团队可以确保稳定、可靠的应用发布，同时保持高效的插件集成和管理。
</file>

<file path="new-docs/testing-and-release-guide.md">
# 测试流程与用例规范

## 目录

- [测试策略概述](#测试策略概述)
- [测试类型与范围](#测试类型与范围)
- [测试文件组织](#测试文件组织)
- [单元测试规范](#单元测试规范)
- [集成测试规范](#集成测试规范)
- [端到端测试规范](#端到端测试规范)
- [Mock策略](#mock策略)
- [测试覆盖率要求](#测试覆盖率要求)
- [CI/CD集成](#cicd集成)
- [测试缺失检测](#测试缺失检测)

## 测试策略概述

本项目采用多层次测试策略，确保代码质量和功能稳定性：

- **单元测试**: 验证独立组件和函数的正确性
- **集成测试**: 验证多个组件或服务之间的交互
- **端到端测试**: 验证完整用户流程和场景
- **性能测试**: 验证系统在负载下的表现

每个新功能和修复都应包含相应的测试用例，确保代码变更不会引入回归问题。

## 测试类型与范围

### 必须测试的核心模块

1. **数据库操作**
   - Schema定义和迁移
   - CRUD操作和查询
   - 事务和并发处理

2. **API端点**
   - 输入验证
   - 业务逻辑
   - 错误处理
   - 权限控制

3. **UI组件**
   - 渲染正确性
   - 交互行为
   - 边界条件处理
   - 可访问性

4. **认证与授权**
   - 登录流程
   - 权限检查
   - 会话管理

5. **外部集成**
   - 第三方API调用
   - 文件上传和处理
   - 支付处理（如有）

## 测试文件组织

### 文件位置

测试文件应与被测代码放在相同的目录结构中，但位于`__tests__`子目录或使用`.test.ts`/`.spec.ts`后缀：

```
├── src/
│   ├── components/
│   │   ├── Button.tsx
│   │   └── __tests__/
│   │       └── Button.test.tsx
│   ├── utils/
│   │   ├── format.ts
│   │   └── format.test.ts
```

### 命名约定

- **单元测试**: `[组件/函数名].test.ts`
- **集成测试**: `[功能/流程].spec.ts`
- **端到端测试**: `[场景].e2e.ts`

## 单元测试规范

### 测试框架

- 使用Vitest作为测试运行器和断言库
- React组件测试使用React Testing Library

### 测试结构

每个测试文件应包含：

1. **导入被测代码和测试工具**
2. **Mock依赖**（如需）
3. **测试套件**（describe块）
4. **测试用例**（test/it块）

示例：

```typescript
import { describe, it, expect, vi } from 'vitest';
import { formatDate } from '../format';

describe('formatDate', () => {
  it('formats date correctly with default format', () => {
    const date = new Date('2023-01-01');
    expect(formatDate(date)).toBe('2023-01-01');
  });

  it('formats date with custom format', () => {
    const date = new Date('2023-01-01');
    expect(formatDate(date, 'MM/DD/YYYY')).toBe('01/01/2023');
  });

  it('handles invalid date', () => {
    expect(() => formatDate('invalid' as any)).toThrow();
  });
});
```

### 测试命名

测试名称应清晰描述被测行为和预期结果，格式为：

- `"should [预期行为] when [条件]"`
- `"[函数/组件名] [动作] [预期结果]"`

### 组件测试

组件测试应关注：

1. **渲染**: 组件是否正确渲染
2. **交互**: 用户交互是否触发正确行为
3. **状态**: 状态变化是否正确反映在UI上

示例：

```typescript
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from '../Button';

describe('Button', () => {
  it('renders with correct text', () => {
    render(<Button>Click me</Button>);
    expect(screen.getByText('Click me')).toBeInTheDocument();
  });

  it('calls onClick when clicked', () => {
    const handleClick = vi.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    fireEvent.click(screen.getByText('Click me'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  it('is disabled when disabled prop is true', () => {
    render(<Button disabled>Click me</Button>);
    expect(screen.getByText('Click me')).toBeDisabled();
  });
});
```

## 集成测试规范

### 测试范围

集成测试应关注组件或服务之间的交互：

1. **API调用**: 前端组件与API的交互
2. **数据流**: 数据在不同层之间的传递
3. **状态管理**: 全局状态与组件的交互

### 测试环境

- 使用测试数据库实例
- 模拟外部服务和API
- 使用测试专用的环境变量

### API测试示例

```typescript
import { describe, it, expect, beforeAll, afterAll } from 'vitest';
import { createServer } from '../server';
import { client } from '../client';

describe('User API', () => {
  let server;

  beforeAll(async () => {
    server = await createServer();
    await server.start();
  });

  afterAll(async () => {
    await server.stop();
  });

  it('creates a user successfully', async () => {
    const userData = { name: 'Test User', email: 'test@example.com' };
    const response = await client.users.create.mutate(userData);
    
    expect(response.id).toBeDefined();
    expect(response.name).toBe(userData.name);
    expect(response.email).toBe(userData.email);
  });

  it('returns error for invalid email', async () => {
    const userData = { name: 'Test User', email: 'invalid-email' };
    
    await expect(client.users.create.mutate(userData))
      .rejects.toThrow(/invalid email/i);
  });
});
```

## 端到端测试规范

### 测试工具

- 使用Playwright进行端到端测试
- 测试真实环境或接近真实的测试环境

### 测试场景

端到端测试应覆盖关键用户流程：

1. **用户注册和登录**
2. **核心功能操作**
3. **数据创建和修改**
4. **错误处理和恢复**

### 测试示例

```typescript
import { test, expect } from '@playwright/test';

test.describe('Authentication flow', () => {
  test('user can sign up and log in', async ({ page }) => {
    // 注册流程
    await page.goto('/signup');
    await page.fill('[name=name]', 'Test User');
    await page.fill('[name=email]', `test-${Date.now()}@example.com`);
    await page.fill('[name=password]', 'Password123!');
    await page.click('button[type=submit]');
    
    // 验证注册成功并重定向到仪表板
    await expect(page).toHaveURL(/dashboard/);
    
    // 登出
    await page.click('[data-testid=logout-button]');
    
    // 登录流程
    await page.goto('/login');
    await page.fill('[name=email]', `test-${Date.now()}@example.com`);
    await page.fill('[name=password]', 'Password123!');
    await page.click('button[type=submit]');
    
    // 验证登录成功
    await expect(page).toHaveURL(/dashboard/);
    await expect(page.locator('[data-testid=user-name]')).toContainText('Test User');
  });
});
```

## Mock策略

### 何时使用Mock

- **外部依赖**: 第三方API、数据库、文件系统等
- **复杂计算**: 耗时的计算或处理
- **随机行为**: 日期、随机数等
- **网络请求**: HTTP请求和响应

### Mock实现

1. **函数Mock**
   - 使用Vitest的`vi.mock()`和`vi.fn()`
   - 模拟函数返回值和行为

2. **模块Mock**
   - 模拟整个模块的行为
   - 使用`__mocks__`目录或内联模拟

3. **服务Mock**
   - 使用MSW模拟API响应
   - 创建测试专用的服务实现

### Mock示例

```typescript
import { describe, it, expect, vi } from 'vitest';
import { fetchUserData } from '../api';
import { displayUserProfile } from '../profile';

// 模拟API模块
vi.mock('../api', () => ({
  fetchUserData: vi.fn(),
}));

describe('displayUserProfile', () => {
  it('displays user profile correctly', async () => {
    // 设置模拟返回值
    const mockUser = { id: '1', name: 'Test User', email: 'test@example.com' };
    fetchUserData.mockResolvedValue(mockUser);
    
    const profile = await displayUserProfile('1');
    
    expect(fetchUserData).toHaveBeenCalledWith('1');
    expect(profile).toContain(mockUser.name);
    expect(profile).toContain(mockUser.email);
  });

  it('handles API error', async () => {
    // 模拟API错误
    fetchUserData.mockRejectedValue(new Error('API error'));
    
    await expect(displayUserProfile('1')).rejects.toThrow('API error');
  });
});
```

## 测试覆盖率要求

### 覆盖率目标

- **核心业务逻辑**: 至少90%的代码覆盖率
- **UI组件**: 至少80%的代码覆盖率
- **工具函数**: 100%的代码覆盖率
- **整体项目**: 至少75%的代码覆盖率

### 覆盖率报告

- 使用Vitest的覆盖率报告功能
- CI流程中生成覆盖率报告
- 覆盖率不达标的PR不允许合并

### 覆盖率排除

以下类型的代码可以排除在覆盖率要求之外：

- 类型定义文件
- 配置文件
- 自动生成的代码
- 第三方库的类型声明

## CI/CD集成

### GitHub Actions配置

在`.github/workflows/test.yml`中配置测试流程：

```yaml
name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - uses: pnpm/action-setup@v2
        with:
          version: 9
      - name: Install dependencies
        run: pnpm install
      - name: Run linter
        run: pnpm lint
      - name: Run type check
        run: pnpm typecheck
      - name: Run unit and integration tests
        run: pnpm test
      - name: Run E2E tests
        run: pnpm test:e2e
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
```

### 预提交检查

使用husky和lint-staged配置预提交检查：

- 代码格式化
- 代码风格检查
- 类型检查
- 单元测试

## 测试缺失检测

### 自动检测工具

使用自定义脚本检测缺失的测试：

1. **组件测试检测**
   - 扫描组件目录，检查每个组件是否有对应的测试文件

2. **API测试检测**
   - 分析tRPC路由定义，确保每个过程都有测试覆盖

3. **覆盖率分析**
   - 分析覆盖率报告，识别覆盖率低的模块和函数

### 测试缺失报告

在CI流程中生成测试缺失报告，包含：

- 缺失测试的组件和函数列表
- 低覆盖率的模块列表
- 测试改进建议

### 测试债务管理

- 维护测试债务列表，记录需要补充测试的区域
- 定期分配时间专门用于补充测试
- 新功能开发前确保相关区域的测试覆盖

通过遵循以上测试规范，项目可以保持高质量的代码库，减少bug和回归问题，提高开发效率和用户体验。
</file>

<file path="packages/db/eslint.config.js">
import baseConfig from "@acme/eslint-config/base";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: ["dist/**"],
  },
  ...baseConfig,
];
</file>

<file path="packages/db/migrations/0000_youthful_proudstar.sql">
CREATE TABLE `moments` (
	`id` integer PRIMARY KEY NOT NULL,
	`text` text NOT NULL
);
</file>

<file path="packages/db/migrations/0001_swift_puck.sql">
ALTER TABLE `moments` ADD `userId` text NOT NULL;
</file>

<file path="packages/db/migrations/0002_sharp_leech.sql">
PRAGMA foreign_keys=OFF;--> statement-breakpoint
CREATE TABLE `__new_moments` (
	`id` integer PRIMARY KEY AUTOINCREMENT NOT NULL,
	`userId` text NOT NULL,
	`text` text NOT NULL,
	`timestamp` integer NOT NULL
);
--> statement-breakpoint
INSERT INTO `__new_moments`("id", "userId", "text", "timestamp") SELECT "id", "userId", "text", "timestamp" FROM `moments`;--> statement-breakpoint
DROP TABLE `moments`;--> statement-breakpoint
ALTER TABLE `__new_moments` RENAME TO `moments`;--> statement-breakpoint
PRAGMA foreign_keys=ON;
</file>

<file path="packages/db/migrations/0003_swift_sunfire.sql">
CREATE TABLE `recaps` (
	`id` integer PRIMARY KEY AUTOINCREMENT NOT NULL,
	`userId` text NOT NULL,
	`text` text NOT NULL,
	`createdAt` integer NOT NULL,
	`type` text NOT NULL,
	`image` text
);
</file>

<file path="packages/db/migrations/0004_thin_thunderbolt.sql">
ALTER TABLE `recaps` RENAME COLUMN "image" TO "imageId";
</file>

<file path="packages/db/migrations/0005_chunky_rocket_raccoon.sql">
ALTER TABLE `moments` RENAME COLUMN "timestamp" TO "createdAt";
</file>

<file path="packages/db/migrations/0006_pretty_morbius.sql">
CREATE TABLE `userMeta` (
	`userId` text PRIMARY KEY NOT NULL,
	`email` text NOT NULL,
	`createdAt` integer NOT NULL,
	`timezone` text DEFAULT 'America/Los_Angeles' NOT NULL,
	`lastRecapAt` integer
);
</file>

<file path="packages/db/migrations/0007_chief_quentin_quire.sql">
ALTER TABLE `userMeta` ADD `artStyle` text DEFAULT 'classical painting' NOT NULL;
</file>

<file path="packages/db/migrations/meta/_journal.json">
{
  "version": "7",
  "dialect": "sqlite",
  "entries": [
    {
      "idx": 0,
      "version": "6",
      "when": 1733157764200,
      "tag": "0000_youthful_proudstar",
      "breakpoints": true
    },
    {
      "idx": 1,
      "version": "6",
      "when": 1733335458666,
      "tag": "0001_swift_puck",
      "breakpoints": true
    },
    {
      "idx": 2,
      "version": "6",
      "when": 1733414074537,
      "tag": "0002_sharp_leech",
      "breakpoints": true
    },
    {
      "idx": 3,
      "version": "6",
      "when": 1733777186002,
      "tag": "0003_swift_sunfire",
      "breakpoints": true
    },
    {
      "idx": 4,
      "version": "6",
      "when": 1733939956621,
      "tag": "0004_thin_thunderbolt",
      "breakpoints": true
    },
    {
      "idx": 5,
      "version": "6",
      "when": 1734014162450,
      "tag": "0005_chunky_rocket_raccoon",
      "breakpoints": true
    },
    {
      "idx": 6,
      "version": "6",
      "when": 1734107117778,
      "tag": "0006_pretty_morbius",
      "breakpoints": true
    },
    {
      "idx": 7,
      "version": "6",
      "when": 1734108900701,
      "tag": "0007_chief_quentin_quire",
      "breakpoints": true
    }
  ]
}
</file>

<file path="packages/db/migrations/meta/0000_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "524fd2f7-6a3e-47ca-b303-636388fd0c10",
  "prevId": "00000000-0000-0000-0000-000000000000",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0001_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "ec3baaeb-cfd0-4ce7-88b8-b4650f712ff7",
  "prevId": "524fd2f7-6a3e-47ca-b303-636388fd0c10",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": false
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0002_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "53bdbd5e-8f15-485f-bd16-ab338475abd5",
  "prevId": "ec3baaeb-cfd0-4ce7-88b8-b4650f712ff7",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "timestamp": {
          "name": "timestamp",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0003_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "26eb3615-18f7-4104-b125-bc45621a8b01",
  "prevId": "53bdbd5e-8f15-485f-bd16-ab338475abd5",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "timestamp": {
          "name": "timestamp",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "recaps": {
      "name": "recaps",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "image": {
          "name": "image",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0004_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "5f082d0c-d6b9-40dc-a097-24f67f55d3cd",
  "prevId": "26eb3615-18f7-4104-b125-bc45621a8b01",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "timestamp": {
          "name": "timestamp",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "recaps": {
      "name": "recaps",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "imageId": {
          "name": "imageId",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {
      "\"recaps\".\"image\"": "\"recaps\".\"imageId\""
    }
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0005_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "8b8075ea-3dea-4c85-8ec6-2e927358fa92",
  "prevId": "5f082d0c-d6b9-40dc-a097-24f67f55d3cd",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "recaps": {
      "name": "recaps",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "imageId": {
          "name": "imageId",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {
      "\"moments\".\"timestamp\"": "\"moments\".\"createdAt\""
    }
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0006_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "9e01e7f0-5752-4a96-812a-7f759208180f",
  "prevId": "8b8075ea-3dea-4c85-8ec6-2e927358fa92",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "recaps": {
      "name": "recaps",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "imageId": {
          "name": "imageId",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "userMeta": {
      "name": "userMeta",
      "columns": {
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "timezone": {
          "name": "timezone",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false,
          "default": "'America/Los_Angeles'"
        },
        "lastRecapAt": {
          "name": "lastRecapAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/migrations/meta/0007_snapshot.json">
{
  "version": "6",
  "dialect": "sqlite",
  "id": "fbcf550e-e1c5-45bc-b899-877b57fdd52d",
  "prevId": "9e01e7f0-5752-4a96-812a-7f759208180f",
  "tables": {
    "moments": {
      "name": "moments",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "recaps": {
      "name": "recaps",
      "columns": {
        "id": {
          "name": "id",
          "type": "integer",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": true
        },
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "text": {
          "name": "text",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "type": {
          "name": "type",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "imageId": {
          "name": "imageId",
          "type": "text",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    },
    "userMeta": {
      "name": "userMeta",
      "columns": {
        "userId": {
          "name": "userId",
          "type": "text",
          "primaryKey": true,
          "notNull": true,
          "autoincrement": false
        },
        "email": {
          "name": "email",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "createdAt": {
          "name": "createdAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false
        },
        "timezone": {
          "name": "timezone",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false,
          "default": "'America/Los_Angeles'"
        },
        "lastRecapAt": {
          "name": "lastRecapAt",
          "type": "integer",
          "primaryKey": false,
          "notNull": false,
          "autoincrement": false
        },
        "artStyle": {
          "name": "artStyle",
          "type": "text",
          "primaryKey": false,
          "notNull": true,
          "autoincrement": false,
          "default": "'classical painting'"
        }
      },
      "indexes": {},
      "foreignKeys": {},
      "compositePrimaryKeys": {},
      "uniqueConstraints": {},
      "checkConstraints": {}
    }
  },
  "views": {},
  "enums": {},
  "_meta": {
    "schemas": {},
    "tables": {},
    "columns": {}
  },
  "internal": {
    "indexes": {}
  }
}
</file>

<file path="packages/db/src/client.ts">
// packages/db/src/client.ts
import * as schema from "./schema";
import { drizzle } from "drizzle-orm/d1";
import type { D1Database } from "@cloudflare/workers-types";
import type { DrizzleD1Database } from "drizzle-orm/d1";

// Explicitly type the Drizzle DB with the imported schema
export type DrizzleDB = DrizzleD1Database<typeof schema>;

export function getDB(env: { DB: D1Database }): DrizzleDB {
  return drizzle(env.DB, { schema }) as DrizzleDB;
}
</file>

<file path="packages/db/src/index.ts">
export {getDB} from './client';
export type { DrizzleDB } from './client';
export * from './schema';
</file>

<file path="packages/db/src/schema.ts">
import { sqliteTable, text, integer } from 'drizzle-orm/sqlite-core';

export const moments = sqliteTable('moments', {
  id: integer('id').primaryKey({ autoIncrement: true }),
  userId: text('userId').notNull(),
  createdAt: integer({ mode: 'timestamp' }).notNull(),
  text: text('text').notNull(),
  
});


type RecapType = 'daily' | 'weekly' | 'monthly';

export const recaps = sqliteTable('recaps', {
  id: integer('id').primaryKey({ autoIncrement: true }),
  userId: text('userId').notNull(),
  text: text('text').notNull(),
  createdAt: integer({ mode: 'timestamp' }).notNull(),
  type: text('type').$type<RecapType>().notNull(),
  imageId: text('imageId'),
});

type ArtStyle = 'classical painting' | 'ethereal animated fairy' | 'childrens book' | '3d animated style';

export const userMeta = sqliteTable('userMeta', {
  userId: text('userId').primaryKey(),
  email: text('email').notNull(),
  createdAt: integer({ mode: 'timestamp' }).notNull(),
  timezone: text('timezone').default('America/Los_Angeles').notNull(),
  lastRecapAt: integer({ mode: 'timestamp' }),
  artStyle: text('artStyle').$type<ArtStyle>().default('classical painting').notNull(),
});
</file>

<file path="packages/db/tsconfig.json">
{
  "extends": "@acme/tsconfig/internal-package.json",
  "include": ["src"],
  "exclude": ["node_modules"]
}
</file>

<file path="packages/trpc/eslint.config.js">
import baseConfig from "@acme/eslint-config/base";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: ["dist/**"],
  },
  ...baseConfig,
];
</file>

<file path="packages/trpc/src/index.ts">
export { appRouter, type AppRouter } from './root';
export { createContext } from './trpc';
</file>

<file path="packages/trpc/src/root.ts">
import {createTRPCRouter } from './trpc';
import { postRouter } from './router/post';
import { momentsRouter } from './router/moments';
import { recapsRouter } from './router/recaps';
import { userRouter } from './router/user';

export const appRouter = createTRPCRouter({
  post: postRouter,
  moments: momentsRouter,
  recaps: recapsRouter,
  user: userRouter,
});

export type AppRouter = typeof appRouter;
</file>

<file path="packages/trpc/src/router/moments.ts">
import { moments, userMeta } from "@acme/db";
import { eq, gte, desc, and } from 'drizzle-orm';

import {protectedProcedure} from "../trpc";
import { z } from "zod";

const getPacificTime = (date: Date = new Date()) => {
    return new Date(
        date.toLocaleString('en-US', {
            timeZone: 'America/Los_Angeles'
        })
    );
};

// Helper function to get start of day in PT
const getStartOfDayPT = () => {
    const nowPT = getPacificTime();
    const startOfDay = new Date(nowPT);
    startOfDay.setHours(0, 0, 0, 0);
    return startOfDay;
};

export const momentsRouter = {
  add: protectedProcedure
    .input(z.string())
    .mutation(async ({ input, ctx}) => {
      const { userId } = ctx.user;
      if (!userId) return {success: false};
      
      const nowPT = getPacificTime();

      // Insert moment first
      await ctx.db.insert(moments).values({ 
        text: input, 
        userId, 
        createdAt: nowPT
      });
      
      // Then update user meta
      await ctx.db.update(userMeta)
        .set({ lastRecapAt: nowPT })
        .where(eq(userMeta.userId, userId));
      
      return { success: true };
    }),
  getAll: protectedProcedure
    .query(
      async ({ ctx }) => {
        if (!ctx.user.userId) return [];
        
        const startOfToday = getStartOfDayPT();
        
        const userMoments = await ctx.db
          .select()
          .from(moments)
          .where(
            and(
              eq(moments.userId, ctx.user.userId),
              gte(moments.createdAt, startOfToday)
            )
          )
          .orderBy(desc(moments.createdAt));
          
        return userMoments;
      })
}
</file>

<file path="packages/trpc/src/router/post.ts">
import { moments } from "@acme/db";

import {protectedProcedure, publicProcedure} from "../trpc";
import { z } from "zod";

export const postRouter = {
  all: publicProcedure
    .input(z.string())
    .query(({ input}) => {
    return { id: 1, title: input };
  }),
  private: protectedProcedure
    .input(z.string())
    .query(({ input}) => {
      return { id: 1, title: input };
    }),
  db: protectedProcedure
    .query(async ({ ctx}) => {

      const allMoments = await ctx.db.select().from(moments).all();
      if (!allMoments.length) { return [{"id": 19999, "title": "No moments"}]; }

      return allMoments;
    }),
}
</file>

<file path="packages/trpc/src/router/recaps.ts">
import { z } from "zod";
import { protectedProcedure } from "../trpc";
import { recaps } from "@acme/db";
import { eq } from 'drizzle-orm';

export const recapsRouter = {
  getAll: protectedProcedure
    .query(async ({ ctx }) => {
      if (!ctx.user.userId) return [];
      const userRecaps = await ctx.db
        .select()
        .from(recaps)
        .where(eq(recaps.userId, ctx.user.userId));
      return userRecaps;
    }),
  getById: protectedProcedure
    .input(z.coerce.number().positive())
    .query(async ({ ctx, input }) => {
      if (!ctx.user.userId) return null;
      
      const recap = await ctx.db
        .select()
        .from(recaps)
        .where(eq(recaps.id, input))
        .limit(1);

      if (!recap[0]) return null;

      return recap[0];
    }),
};
</file>

<file path="packages/trpc/src/router/user.ts">
import { z } from "zod";
import { protectedProcedure } from "../trpc";
import { userMeta } from "@acme/db";
import { eq } from 'drizzle-orm';

const artStyles = ['classical painting', 'ethereal animated fairy', 'childrens book', '3d animated style'] as const;

export const userRouter = {
  updateArtStyle: protectedProcedure
    .input(z.enum(artStyles))
    .mutation(async ({ ctx, input }) => {
      if (!ctx.user.userId) throw new Error("Not authenticated");
      
      await ctx.db
        .update(userMeta)
        .set({ artStyle: input })
        .where(eq(userMeta.userId, ctx.user.userId));

      return { success: true };
    }),
    
  getPreferences: protectedProcedure
    .query(async ({ ctx }) => {
      if (!ctx.user.userId) throw new Error("Not authenticated");
      
      const preferences = await ctx.db
        .select()
        .from(userMeta)
        .where(eq(userMeta.userId, ctx.user.userId))
        .limit(1);

      // If no preferences exist, create default preferences
      if (preferences.length === 0) {
        const defaultPreferences = {
          userId: ctx.user.userId,
          email: ctx.user.userId,
          createdAt: new Date(),
          timezone: 'America/Los_Angeles',
          artStyle: 'classical painting' as const,
        };

        await ctx.db.insert(userMeta).values(defaultPreferences);
        return defaultPreferences;
      }

      return preferences[0];
    }),
};
</file>

<file path="packages/trpc/src/trpc.ts">
// packages/api/src/trpc.ts
import {initTRPC, TRPCError} from "@trpc/server";
import superjson from "superjson";
import {ZodError} from "zod";
import {createClerkClient} from '@clerk/backend'
import type {FetchCreateContextFnOptions} from '@trpc/server/adapters/fetch';
import type {CustomContext, CustomContextOptions} from "./types";

export async function createContext({
  req,
  resHeaders,
  clerkPublicKey,
  clerkSecretKey,
  db,
  imagesBucket
}: FetchCreateContextFnOptions & CustomContextOptions): Promise<CustomContext> {
  const clerk = createClerkClient({secretKey: clerkSecretKey, publishableKey: clerkPublicKey});

  const res = await clerk.authenticateRequest(req);

  const isSignedIn = res.isSignedIn

  if (!isSignedIn) {
    return {req, resHeaders, user: null, db, imagesBucket};
  }

  const user = res.toAuth();  // This can return null if not authenticated

  return {req, resHeaders, user, db, imagesBucket};
}

export type Context = Awaited<ReturnType<typeof createContext>>;

const t = initTRPC.context<typeof createContext>().create({
  transformer: superjson,
  errorFormatter: ({shape, error}) => ({
    ...shape,
    data: {
      ...shape.data,
      zodError: error.cause instanceof ZodError ? error.cause.flatten() : null,
    },
  }),
});

export const createCallerFactory = t.createCallerFactory;
export const createTRPCRouter = t.router;
export const publicProcedure = t.procedure;
export const protectedProcedure = t.procedure
  .use(({ctx, next}) => {
    if (ctx.user === null) {
      throw new TRPCError({ code: 'UNAUTHORIZED', message: 'Not authenticated or Session Expired' });
    }
    return next({
      ctx: {
        ...ctx,
        user: ctx.user,
      },
    });
  });
</file>

<file path="packages/trpc/src/types.ts">
import type {AuthObject} from '@clerk/backend';
import type {FetchCreateContextFnOptions} from '@trpc/server/adapters/fetch';
import type { DrizzleDB }from "@acme/db";
import type { R2Bucket } from '@cloudflare/workers-types';

export interface CustomContext {
  req: FetchCreateContextFnOptions['req'];
  resHeaders: FetchCreateContextFnOptions['resHeaders'];
  user: AuthObject | null;
  db: DrizzleDB;
  imagesBucket: R2Bucket;
}

export interface CustomContextOptions {
  clerkSecretKey: string;
  clerkPublicKey: string;
  db: DrizzleDB;
  imagesBucket: R2Bucket;
}
</file>

<file path="packages/trpc/tsconfig.json">
{
  "extends": "@acme/tsconfig/internal-package.json",
  "include": ["src"],
  "exclude": ["node_modules"]
}
</file>

<file path="plan-doc.md">
# 游戏UI组件库开发计划

## 项目概述

基于 Cloudflare Native Web Starter Kit 中的 Expo 应用，我们将创建一个游戏 UI 组件库，该组件库将包含各种游戏界面样式、类型、主题和功能组件，可供后续项目复用。

## 组件结构设计

我们将按照以下结构组织组件：

1. **核心组件 (Core Components)**
   - 按钮 (Button)
   - 图标 (Icon)
   - 文本 (Text)
   - 输入框 (Input)
   - 卡片 (Card)
   - 模态框 (Modal)
   - 加载指示器 (Loading Indicator)
   - 进度条 (Progress Bar)

2. **风格组件 (Style Components)** - 基于不同的艺术风格
   - 国风 (Chinese Style)
   - 欧美 (Western Style)
   - 二次元 (Anime Style)
   - 日韩 (Japanese & Korean Style)
   - Q版卡通 (Q-Style Cartoon)
   - 科幻 (Sci-Fi)
   - 军事 (Military)

3. **功能组件 (Function Components)** - 按游戏UI功能分类
   - 登录界面 (Login Screen)
   - 主界面 (Main Interface)
   - 战斗界面 (Combat Interface)
   - 菜单 (Menu)
   - 背包 (Inventory)
   - 商城 (Shop)
   - 设置 (Settings)

4. **主题样式 (Theme Styles)** - 可应用于上述组件的主题样式
   - 武侠 (Martial Arts)
   - 魔幻 (Fantasy)
   - 科幻未来 (Sci-Fi Future)
   - 现代 (Modern)
   - 赛博朋克 (Cyberpunk)
   - 卡通 (Cartoon)
   - 写实 (Realistic)

5. **布局组件 (Layout Components)**
   - 横屏布局 (Landscape Layout)
   - 竖屏布局 (Portrait Layout)

## 技术实现方案

1. **组件开发技术**
   - 使用 React Native / Expo 构建基础组件
   - 基于 Tamagui 或 NativeBase 等 UI 库扩展
   - 使用 Reanimated 2 实现动画效果
   - 使用 React Context API 实现主题切换

2. **样式风格实现**
   - 创建统一的样式主题系统
   - 使用 StyleSheet 和主题变量管理样式
   - 支持深色模式与浅色模式
   - 根据不同风格提供预设主题

3. **资源管理**
   - 使用 SVG 图标以确保不同尺寸设备的显示质量
   - 为不同风格组件准备相应的图片资源
   - 使用 React Native Asset 管理字体和图片资源

4. **组件文档与示例**
   - 为每个组件编写使用文档
   - 提供示例页面展示不同组件的使用方式
   - 构建导航系统以便浏览不同组件

## 开发阶段规划

### 阶段一：基础组件开发
1. 建立组件库文件结构
2. 开发核心组件
3. 实现基础主题系统

### 阶段二：风格与主题实现
1. 为核心组件实现不同风格样式
2. 创建主题切换系统
3. 准备不同风格的图片和图标资源

### 阶段三：功能组件开发
1. 基于核心组件开发功能性组件
2. 实现常见游戏UI界面
3. 添加动画和交互效果

### 阶段四：示例页面构建
1. 构建组件浏览器
2. 创建不同游戏风格的示例页面
3. 实现一个完整的游戏UI流程示例

## 文件结构规划

```
/my-cloudflare-app/apps/expo/
├── components/
│   ├── core/          # 核心组件
│   ├── styles/        # 风格组件
│   ├── functions/     # 功能组件
│   ├── themes/        # 主题定义
│   └── layouts/       # 布局组件
├── assets/
│   ├── images/        # 图片资源
│   ├── icons/         # 图标资源
│   └── fonts/         # 字体资源
├── app/
│   ├── (gameui)/      # 游戏UI示例页面路由
│   └── (tabs)/        # 原有的标签页路由
└── utils/
    ├── themes.ts      # 主题工具函数
    └── styles.ts      # 样式工具函数
```

## 示例页面规划

1. **组件浏览器**: 展示所有可用组件
2. **风格展示**: 不同艺术风格的示例
3. **游戏界面示例**:
   - 国风RPG登录界面
   - 科幻射击游戏主界面
   - 卡通风格背包系统
   - 赛博朋克风格商城

## 后续扩展计划

1. 增加更多特定游戏类型的专用组件
2. 开发游戏UI动画库
3. 实现更多交互效果
4. 添加游戏UI性能优化工具

## 时间规划

1. 阶段一: 2天
2. 阶段二: 3天
3. 阶段三: 3天
4. 阶段四: 2天

总计: 10天完成基础版本
</file>

<file path="pnpm-workspace.yaml">
packages:
  - apps/*
  - packages/*
  - tooling/*

catalog:
  "@tanstack/react-query": ^5.59.15
  "@trpc/client": ^11.0.0-rc.477
  "@trpc/react-query": ^11.0.0-rc.477
  "@trpc/server": ^11.0.0-rc.477
  eslint: ^9.12.0
  prettier: ^3.3.3
  tailwindcss: ^3.4.14
  typescript: ^5.6.3
  zod: ^3.23.8

catalogs:
  react18:
    react: 18.3.1
    react-dom: 18.3.1
    "@types/react": ^18.3.11
    "@types/react-dom": ^18.3.1
</file>

<file path="status.md">
# Game UI Component Library - Status Report

## Completed Components

### Core Components
- ✅ Button - Multi-state, customizable buttons with various styles
- ✅ Text - Typography component with support for different text styles
- ✅ Card - Container component for organizing information
- ✅ Input - Form input fields with validation
- ✅ Modal - Overlay containers for dialogs and popups

### Theme System
- ✅ ThemeProvider - Context-based theme management
- ✅ Multiple Visual Styles - Chinese, Western, Anime, Sci-Fi, Cartoon, Military
- ✅ Theme Explorer - Interface for previewing themes
- ✅ Responsive Design - Adapts to different screen sizes

### Base Game UI
- ✅ LoginScreen - Authentication interface with animations
- ✅ MainGameInterface - Game HUD with tabs, resources, and notifications

### Advanced Game Systems
- ✅ Leaderboard - Player rankings with filtering and detailed stats
- ✅ AchievementList - Tracks player accomplishments with progress indicators
- ✅ StoreSystem - Virtual item marketplace with currencies
- ✅ QuestLog - Mission tracking system with objectives
- ✅ DialogSystem - Interactive conversation system with branching paths

### Support Features
- ✅ Platform Utilities - Cross-platform optimizations
- ✅ Accessibility Guide - Comprehensive accessibility documentation
- ✅ Component Demos - Individual component showcases

## In Progress / Attempted
- ⚠️ SettingsMenu - Configuration options for games (file writing failed)
- ⚠️ Animation Utilities - Reusable animation effects (file writing failed)
- ⚠️ Character Attributes - Stats display system (file writing failed)
- ⚠️ SkillBar - Progress indicator for character skills (file writing failed)
- ⚠️ Unified Demo - Demo showing all systems working together (file writing failed)

## Planned Components (Next Steps)

### Priority 1 - Essential Components
1. 📋 SettingsMenu - Complete interface for game settings
   - Audio, graphics, gameplay, accessibility, and social settings
   - Save/load configuration
   - Reset to defaults

2. 📋 CharacterStats - Character attribute and progression display
   - Base attributes with modifiers
   - Skill levels and progression
   - Visual representation of stats

3. 📋 InventorySystem - Item management
   - Grid and list views
   - Item sorting and filtering
   - Equipment slots

### Priority 2 - Game Enhancement Components
1. 📋 CombatUI - Battle interface elements
   - Health/mana bars
   - Ability cooldowns
   - Combat stats

2. 📋 MiniMap - Navigation and exploration
   - Interactive map
   - Location markers
   - Fog of war

3. 📋 CraftingSystem - Item creation
   - Recipe lists
   - Material requirements
   - Crafting process visualization

### Priority 3 - Advanced Features
1. 📋 Animation System - Enhanced visual effects
   - Reusable animation hooks
   - Game-specific effects
   - Performance optimizations

2. 📋 NotificationSystem - In-game alerts
   - Toast notifications
   - Achievement popups
   - Mission updates

3. 📋 TradingSystem - Player economy
   - Trading interface
   - Offer/counter-offer system
   - Market pricing

## Technical Issues
- ❌ File Size Limitations - Large component files fail to save
- ❌ Write Timeout Errors - Write operations timing out on larger files

## Recommendations for Next Steps
1. Break down large components into smaller, focused subcomponents
2. Focus on completing the highest priority components first
3. Create an integrated demo that shows how components work together
4. Add documentation for component usage and customization
5. Implement missing accessibility features for all components

## Key Achievements
- Created a comprehensive, themed component library for game UIs
- Implemented complex game systems (quests, achievements, store)
- Ensured accessibility across components
- Provided multiple visual styles through theming

---

This status document will be regularly updated as development progresses and new components are added to the Game UI Component Library.
</file>

<file path="tooling/eslint/base.js">
/// <reference types="./types.d.ts" />

import * as path from "node:path";
import { includeIgnoreFile } from "@eslint/compat";
import eslint from "@eslint/js";
import importPlugin from "eslint-plugin-import";
import turboPlugin from "eslint-plugin-turbo";
import tseslint from "typescript-eslint";

/**
 * All packages that leverage t3-env should use this rule
 */
export const restrictEnvAccess = tseslint.config(
  { ignores: ["**/env.ts"] },
  {
    files: ["**/*.js", "**/*.ts", "**/*.tsx"],
    rules: {
      "no-restricted-properties": [
        "error",
        {
          object: "process",
          property: "env",
          message:
            "Use `import { env } from '~/env'` instead to ensure validated types.",
        },
      ],
      "no-restricted-imports": [
        "error",
        {
          name: "process",
          importNames: ["env"],
          message:
            "Use `import { env } from '~/env'` instead to ensure validated types.",
        },
      ],
    },
  },
);

export default tseslint.config(
  // Ignore files not tracked by VCS and any config files
  includeIgnoreFile(path.join(import.meta.dirname, "../../.gitignore")),
  { ignores: ["**/*.config.*"] },
  {
    files: ["**/*.js", "**/*.ts", "**/*.tsx"],
    plugins: {
      import: importPlugin,
      turbo: turboPlugin,
    },
    extends: [
      eslint.configs.recommended,
      ...tseslint.configs.recommended,
      ...tseslint.configs.recommendedTypeChecked,
      ...tseslint.configs.stylisticTypeChecked,
    ],
    rules: {
      ...turboPlugin.configs.recommended.rules,
      "@typescript-eslint/no-unused-vars": [
        "error",
        { argsIgnorePattern: "^_", varsIgnorePattern: "^_" },
      ],
      "@typescript-eslint/consistent-type-imports": [
        "warn",
        { prefer: "type-imports", fixStyle: "separate-type-imports" },
      ],
      "@typescript-eslint/no-misused-promises": [
        2,
        { checksVoidReturn: { attributes: false } },
      ],
      "@typescript-eslint/no-unnecessary-condition": [
        "error",
        {
          allowConstantLoopConditions: true,
        },
      ],
      "@typescript-eslint/no-non-null-assertion": "error",
      "import/consistent-type-specifier-style": ["error", "prefer-top-level"],
    },
  },
  {
    linterOptions: { reportUnusedDisableDirectives: true },
    languageOptions: { parserOptions: { projectService: true } },
  },
);
</file>

<file path="tooling/eslint/nextjs.js">
import nextPlugin from "@next/eslint-plugin-next";

/** @type {Awaited<import('typescript-eslint').Config>} */
export default [
  {
    files: ["**/*.ts", "**/*.tsx"],
    plugins: {
      "@next/next": nextPlugin,
    },
    rules: {
      ...nextPlugin.configs.recommended.rules,
      ...nextPlugin.configs["core-web-vitals"].rules,
      // TypeError: context.getAncestors is not a function
      "@next/next/no-duplicate-head": "off",
    },
  },
];
</file>

<file path="tooling/eslint/package.json">
{
  "name": "@acme/eslint-config",
  "private": true,
  "version": "0.3.0",
  "type": "module",
  "exports": {
    "./base": "./base.js",
    "./nextjs": "./nextjs.js",
    "./react": "./react.js"
  },
  "scripts": {
    "clean": "git clean -xdf .cache .turbo node_modules",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@eslint/compat": "^1.2.0",
    "@next/eslint-plugin-next": "^14.2.15",
    "eslint-plugin-import": "^2.31.0",
    "eslint-plugin-jsx-a11y": "^6.10.0",
    "eslint-plugin-react": "^7.37.1",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-turbo": "^2.1.3",
    "typescript-eslint": "^8.9.0"
  },
  "devDependencies": {
    "@acme/prettier-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "@types/eslint__js": "8.42.3",
    "eslint": "catalog:",
    "prettier": "catalog:",
    "typescript": "catalog:"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="tooling/eslint/react.js">
import reactPlugin from "eslint-plugin-react";
import hooksPlugin from "eslint-plugin-react-hooks";

/** @type {Awaited<import('typescript-eslint').Config>} */
export default [
  {
    files: ["**/*.ts", "**/*.tsx"],
    plugins: {
      react: reactPlugin,
      "react-hooks": hooksPlugin,
    },
    rules: {
      ...reactPlugin.configs["jsx-runtime"].rules,
      ...hooksPlugin.configs.recommended.rules,
    },
    languageOptions: {
      globals: {
        React: "writable",
      },
    },
  },
];
</file>

<file path="tooling/eslint/tsconfig.json">
{
  "extends": "@acme/tsconfig/base.json",
  "include": ["."],
  "exclude": ["node_modules"]
}
</file>

<file path="tooling/eslint/types.d.ts">
/**
 * Since the ecosystem hasn't fully migrated to ESLint's new FlatConfig system yet,
 * we "need" to type some of the plugins manually :(
 */

declare module "eslint-plugin-import" {
  import type { Linter, Rule } from "eslint";

  export const configs: {
    recommended: { rules: Linter.RulesRecord };
  };
  export const rules: Record<string, Rule.RuleModule>;
}

declare module "eslint-plugin-react" {
  import type { Linter, Rule } from "eslint";

  export const configs: {
    recommended: { rules: Linter.RulesRecord };
    all: { rules: Linter.RulesRecord };
    "jsx-runtime": { rules: Linter.RulesRecord };
  };
  export const rules: Record<string, Rule.RuleModule>;
}

declare module "eslint-plugin-react-hooks" {
  import type { Linter, Rule } from "eslint";

  export const configs: {
    recommended: {
      rules: {
        "rules-of-hooks": Linter.RuleEntry;
        "exhaustive-deps": Linter.RuleEntry;
      };
    };
  };
  export const rules: Record<string, Rule.RuleModule>;
}

declare module "@next/eslint-plugin-next" {
  import type { Linter, Rule } from "eslint";

  export const configs: {
    recommended: { rules: Linter.RulesRecord };
    "core-web-vitals": { rules: Linter.RulesRecord };
  };
  export const rules: Record<string, Rule.RuleModule>;
}
</file>

<file path="tooling/github/package.json">
{
  "name": "@acme/github"
}
</file>

<file path="tooling/github/setup/action.yml">
name: "Setup and install"
description: "Common setup steps for Actions"

runs:
  using: composite
  steps:
    - uses: pnpm/action-setup@v4
    - uses: actions/setup-node@v4
      with:
        node-version-file: ".nvmrc"
        cache: "pnpm"

    - shell: bash
      run: pnpm add -g turbo

    - shell: bash
      run: pnpm install
</file>

<file path="tooling/prettier/index.js">
import { fileURLToPath } from "url";

/** @typedef {import("prettier").Config} PrettierConfig */
/** @typedef {import("prettier-plugin-tailwindcss").PluginOptions} TailwindConfig */
/** @typedef {import("@ianvs/prettier-plugin-sort-imports").PluginConfig} SortImportsConfig */

/** @type { PrettierConfig | SortImportsConfig | TailwindConfig } */
const config = {
  plugins: [
    "@ianvs/prettier-plugin-sort-imports",
    "prettier-plugin-tailwindcss",
  ],
  tailwindConfig: fileURLToPath(
    new URL("../../tooling/tailwind/web.ts", import.meta.url),
  ),
  tailwindFunctions: ["cn", "cva"],
  importOrder: [
    "<TYPES>",
    "^(react/(.*)$)|^(react$)|^(react-native(.*)$)",
    "^(next/(.*)$)|^(next$)",
    "^(expo(.*)$)|^(expo$)",
    "<THIRD_PARTY_MODULES>",
    "",
    "<TYPES>^@acme",
    "^@acme/(.*)$",
    "",
    "<TYPES>^[.|..|~]",
    "^~/",
    "^[../]",
    "^[./]",
  ],
  importOrderParserPlugins: ["typescript", "jsx", "decorators-legacy"],
  importOrderTypeScriptVersion: "4.4.0",
  overrides: [
    {
      files: "*.json.hbs",
      options: {
        parser: "json",
      },
    },
    {
      files: "*.js.hbs",
      options: {
        parser: "babel",
      },
    },
  ],
};

export default config;
</file>

<file path="tooling/prettier/package.json">
{
  "name": "@acme/prettier-config",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "exports": {
    ".": "./index.js"
  },
  "scripts": {
    "clean": "git clean -xdf .cache .turbo node_modules",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "@ianvs/prettier-plugin-sort-imports": "^4.3.1",
    "prettier": "catalog:",
    "prettier-plugin-tailwindcss": "^0.6.8"
  },
  "devDependencies": {
    "@acme/tsconfig": "workspace:*",
    "typescript": "catalog:"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="tooling/prettier/tsconfig.json">
{
  "extends": "@acme/tsconfig/base.json",
  "include": ["."],
  "exclude": ["node_modules"]
}
</file>

<file path="tooling/tailwind/base.ts">
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: ["src/**/*.{ts,tsx}"],
  theme: {
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderColor: {
        DEFAULT: "hsl(var(--border))",
      },
    },
  },
} satisfies Config;
</file>

<file path="tooling/tailwind/eslint.config.js">
// FIXME: This kinda stinks...
/// <reference types="../../tooling/eslint/types.d.ts" />

import baseConfig from "@acme/eslint-config/base";

export default [...baseConfig];
</file>

<file path="tooling/tailwind/native.ts">
import type { Config } from "tailwindcss";

import base from "./base";

export default {
  content: base.content,
  presets: [base],
  theme: {},
} satisfies Config;
</file>

<file path="tooling/tailwind/package.json">
{
  "name": "@acme/tailwind-config",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "exports": {
    "./native": "./native.ts",
    "./web": "./web.ts"
  },
  "license": "MIT",
  "scripts": {
    "clean": "git clean -xdf .cache .turbo node_modules",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "lint": "eslint",
    "typecheck": "tsc --noEmit"
  },
  "dependencies": {
    "postcss": "^8.4.47",
    "tailwindcss": "catalog:",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/prettier-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "eslint": "catalog:",
    "prettier": "catalog:",
    "typescript": "catalog:"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="tooling/tailwind/tsconfig.json">
{
  "extends": "@acme/tsconfig/base.json",
  "include": ["."],
  "exclude": ["node_modules"]
}
</file>

<file path="tooling/tailwind/web.ts">
import type { Config } from "tailwindcss";
import animate from "tailwindcss-animate";

import base from "./base";

export default {
  content: base.content,
  presets: [base],
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [animate],
} satisfies Config;
</file>

<file path="tooling/typescript/base.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "compilerOptions": {
    /** Base Options */
    "esModuleInterop": true,
    "skipLibCheck": true,
    "target": "ES2022",
    "lib": ["ES2022"],
    "allowJs": true,
    "resolveJsonModule": true,
    "moduleDetection": "force",
    "isolatedModules": true,

    /** Keep TSC performant in monorepos */
    "incremental": true,
    "disableSourceOfProjectReferenceRedirect": true,
    "tsBuildInfoFile": "${configDir}/.cache/tsbuildinfo.json",

    /** Strictness */
    "strict": true,
    "noUncheckedIndexedAccess": true,
    "checkJs": true,

    /** Transpile using Bundler (not tsc) */
    "module": "Preserve",
    "moduleResolution": "Bundler",
    "noEmit": true
  },
  "exclude": ["node_modules", "build", "dist", ".next", ".expo"]
}
</file>

<file path="tooling/typescript/internal-package.json">
{
  "$schema": "https://json.schemastore.org/tsconfig",
  "extends": "./base.json",
  "compilerOptions": {
    /** Emit types for internal packages to speed up editor performance. */
    "declaration": true,
    "declarationMap": true,
    "emitDeclarationOnly": true,
    "noEmit": false,
    "outDir": "${configDir}/dist"
  }
}
</file>

<file path="tooling/typescript/package.json">
{
  "name": "@acme/tsconfig",
  "private": true,
  "version": "0.1.0",
  "files": [
    "*.json"
  ]
}
</file>

<file path="turbo.json">
{
  "$schema": "https://turborepo.org/schema.json",
  "ui": "tui",
  "tasks": {
    "topo": {
      "dependsOn": ["^topo"]
    },
    "build": {
      "dependsOn": ["^build"],
      "outputs": [".cache/tsbuildinfo.json", "dist/**"]
    },
    "dev": {
      "dependsOn": ["^dev"],
      "cache": false,
      "persistent": false
    },
    "format": {
      "outputs": [".cache/.prettiercache"],
      "outputLogs": "new-only"
    },
    "lint": {
      "dependsOn": ["^topo", "^build"],
      "outputs": [".cache/.eslintcache"]
    },
    "typecheck": {
      "dependsOn": ["^topo", "^build"],
      "outputs": [".cache/tsbuildinfo.json"]
    },
    "clean": {
      "cache": false
    },
    "//#clean": {
      "cache": false
    },
    "push": {
      "cache": false,
      "interactive": true
    },
    "studio": {
      "cache": false,
      "persistent": true
    },
    "ui-add": {
      "cache": false,
      "interactive": true
    }
  },
  "globalEnv": [
    "CLOUDFLARE_ACCOUNT_ID",
    "CLOUDFLARE_DATABASE_ID",
    "CLOUDFLARE_D1_TOKEN"
  ],
  "globalPassThroughEnv": [
    "NODE_ENV",
    "CI",
    "npm_lifecycle_event"
  ]
}
</file>

<file path="turbo/generators/config.ts">
import { execSync } from "node:child_process";
import type { PlopTypes } from "@turbo/gen";

interface PackageJson {
  name: string;
  scripts: Record<string, string>;
  dependencies: Record<string, string>;
  devDependencies: Record<string, string>;
}

export default function generator(plop: PlopTypes.NodePlopAPI): void {
  plop.setGenerator("init", {
    description: "Generate a new package for the Acme Monorepo",
    prompts: [
      {
        type: "input",
        name: "name",
        message:
          "What is the name of the package? (You can skip the `@acme/` prefix)",
      },
      {
        type: "input",
        name: "deps",
        message:
          "Enter a space separated list of dependencies you would like to install",
      },
    ],
    actions: [
      (answers) => {
        if ("name" in answers && typeof answers.name === "string") {
          if (answers.name.startsWith("@acme/")) {
            answers.name = answers.name.replace("@acme/", "");
          }
        }
        return "Config sanitized";
      },
      {
        type: "add",
        path: "packages/{{ name }}/eslint.config.js",
        templateFile: "templates/eslint.config.js.hbs",
      },
      {
        type: "add",
        path: "packages/{{ name }}/package.json",
        templateFile: "templates/package.json.hbs",
      },
      {
        type: "add",
        path: "packages/{{ name }}/tsconfig.json",
        templateFile: "templates/tsconfig.json.hbs",
      },
      {
        type: "add",
        path: "packages/{{ name }}/src/index.ts",
        template: "export const name = '{{ name }}';",
      },
      {
        type: "modify",
        path: "packages/{{ name }}/package.json",
        async transform(content, answers) {
          if ("deps" in answers && typeof answers.deps === "string") {
            const pkg = JSON.parse(content) as PackageJson;
            for (const dep of answers.deps.split(" ").filter(Boolean)) {
              const version = await fetch(
                `https://registry.npmjs.org/-/package/${dep}/dist-tags`,
              )
                .then((res) => res.json())
                .then((json) => json.latest);
              if (!pkg.dependencies) pkg.dependencies = {};
              pkg.dependencies[dep] = `^${version}`;
            }
            return JSON.stringify(pkg, null, 2);
          }
          return content;
        },
      },
      async (answers) => {
        /**
         * Install deps and format everything
         */
        if ("name" in answers && typeof answers.name === "string") {
          // execSync("pnpm dlx sherif@latest --fix", {
          //   stdio: "inherit",
          // });
          execSync("pnpm i", { stdio: "inherit" });
          execSync(
            `pnpm prettier --write packages/${answers.name}/** --list-different`,
          );
          return "Package scaffolded";
        }
        return "Package not scaffolded";
      },
    ],
  });
}
</file>

<file path="turbo/generators/templates/eslint.config.js.hbs">
import baseConfig from "@acme/eslint-config/base";

/** @type {import('typescript-eslint').Config} */
export default [
  {
    ignores: [],
  },
  ...baseConfig,
];
</file>

<file path="turbo/generators/templates/package.json.hbs">
{
  "name": "@acme/{{ name }}",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "exports": {
    ".": "./src/index.ts"
  },
  "license": "MIT",
  "scripts": {
    "build": "tsc",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "dev": "tsc",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "lint": "eslint",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/prettier-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "eslint": "catalog:",
    "prettier": "catalog:",
    "typescript": "catalog:"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="turbo/generators/templates/tsconfig.json.hbs">
{
  "extends": "@acme/tsconfig/internal-package.json",
  "compilerOptions": {},
  "include": ["*.ts", "src"],
  "exclude": ["node_modules"]
}
</file>

<file path="apps/astro/src/components/react/hero.tsx">
import { GithubIcon } from 'lucide-react'
import { Button } from '@/components/ui/button'

const technologies = [
  [
    { name: 'Expo', description: 'Cross-platform mobile apps', logo: '/logos/expo.svg', isCloudflare: false },
    { name: 'Astro', description: 'High-performance web framework', logo: '/logos/astro.svg', isCloudflare: false },
    { name: 'Clerk', description: 'Authentication & user management', logo: '/logos/clerk.svg', isCloudflare: false },
    { name: 'tRPC', description: 'End-to-end typesafe APIs', logo: '/logos/trpc.svg', isCloudflare: false },
  ],
  [
    { name: 'Turborepo', description: 'Monorepo build system', logo: '/logos/turborepo.svg', isCloudflare: false },
    { name: 'Cloudflare Workers', description: 'Edge computing platform', logo: '/logos/workers.svg', isCloudflare: true },
    { name: 'Cloudflare D1', description: 'Serverless SQL database', logo: '/logos/d1.svg', isCloudflare: true },
    { name: 'Cloudflare R2', description: 'Object storage service', logo: '/logos/r2.svg', isCloudflare: true },
  ],
]

export function Hero() {
  return (
    <div className="relative overflow-hidden bg-gradient-to-br from-slate-900 via-blue-950 to-slate-900 pt-40 pb-24">
      {/* Gradient overlay */}
      <div className="absolute inset-0 bg-[radial-gradient(circle_at_top_right,_var(--tw-gradient-stops))] from-blue-500/10 via-cyan-500/5 to-transparent" />
      
      {/* Floating shapes */}
      <div className="absolute inset-0 overflow-hidden">
        <div className="absolute -top-1/4 -right-1/4 h-[500px] w-[500px] rounded-full bg-blue-500/10 blur-3xl animate-pulse" />
        <div className="absolute -bottom-1/4 -left-1/4 h-[500px] w-[500px] rounded-full bg-cyan-500/10 blur-3xl animate-pulse" style={{ animationDelay: '1s' }} />
      </div>

      <div className="relative mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
        <div className="text-center animate-fade-in">
          <span className="font-mono text-xl text-orange-400 uppercase tracking-widest">
            Cloudflare Native Web Starter Kit
          </span>
          <h1 className="mt-4 text-4xl font-extrabold tracking-tight text-white sm:text-6xl lg:text-7xl">
            Build AI-powered apps
            <span className="block text-orange-400">with Cloudflare Workers</span>
          </h1>

          <p className="mt-6 max-w-2xl mx-auto text-lg text-gray-300">
            A complete starter template for building AI-powered mobile and web applications using Cloudflare workers, 
            featuring cross-platform support, edge computing, and modern development practices.
          </p>

          <div className="mt-10 flex justify-center gap-4">
            <a href="https://github.com/brenden-js/cloudflare-native-web-starter-kit">
              <Button size="lg" variant="secondary" className="bg-white/10 hover:bg-white/20 text-white border-white/10">
                <GithubIcon className="mr-2 h-5 w-5" />
                Clone Repository
              </Button>
            </a>
          </div>

          <div className="mt-24 relative">
            <div className="absolute inset-0 flex items-center" aria-hidden="true">
              <div className="w-full border-t border-white/10"></div>
            </div>
            <div className="relative flex justify-center">
              <span className="bg-slate-900 px-4 text-base font-semibold text-gray-400">
                Built to scale and develop with ease
              </span>
            </div>
          </div>

          <div className="mt-12">
            <div className="flex flex-col gap-12">
              {technologies.map((group, groupIndex) => (
                <div
                  key={groupIndex}
                  className="flex justify-center items-center"
                >
                  <div className="grid grid-cols-2 sm:grid-cols-4 gap-12 md:gap-16 w-full max-w-4xl">
                    {group.map((tech) => (
                      <div
                        key={tech.name}
                        className="group flex flex-col items-center justify-center transition-transform duration-300 hover:scale-110"
                      >
                        <div className="relative overflow-hidden rounded-2xl bg-white/[0.07] shadow-[0_8px_32px_0_rgba(31,38,135,0.37)] backdrop-blur-[6px] border border-white/[0.18] transition-all duration-300 hover:bg-white/[0.1] hover:shadow-orange-500/25">
                          {/* Gradient overlay */}
                          <div className="absolute -inset-px bg-gradient-to-r from-blue-500/10 to-cyan-500/10 opacity-0 transition duration-300 group-hover:opacity-100" />
                          
                          {/* Logo container */}
                          <div className="relative flex h-24 w-56 items-center justify-center p-6">
                            <div className="relative flex items-center justify-center h-full w-full">
                              <img
                                src={tech.logo}
                                alt={tech.name}
                                className={`h-auto w-auto max-h-full max-w-full object-contain transition-all duration-300 ${
                                  tech.name === 'Expo' || tech.name === 'Clerk' ? 'scale-[1.75]' : ''
                                } ${
                                  tech.isCloudflare 
                                    ? 'brightness-125 contrast-125 [filter:sepia(100%)_saturate(2000%)_hue-rotate(360deg)_brightness(100%)_contrast(0.8)]' 
                                    : 'brightness-150 contrast-150 group-hover:brightness-125 group-hover:contrast-125'
                                }`}
                              />
                            </div>
                          </div>
                        </div>
                        <div className="mt-3 flex flex-col items-center text-center min-h-[3.5rem]">
                          <div className="text-sm font-medium text-gray-300 transition-colors duration-300 group-hover:text-white">
                            {tech.name}
                          </div>
                          <div className="mt-1 text-xs text-gray-400 transition-colors duration-300 group-hover:text-gray-300">
                            {tech.description}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}
</file>

<file path="apps/astro/src/layouts/Layout.astro">
---
import '../styles/globals.css';
import { Header } from '../components/react/header';
import { Footer } from '../components/react/footer';

// Example prop for page titles (you can add more props as needed)
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width" />
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
  <title>{title}</title>
</head>
<body class="min-h-screen bg-slate-900">
  <Header client:load />
  <main>
    <slot /> {/* This is where the page content will be injected */}
  </main>
  <Footer />
</body>
</html>

<style>
  body {
    display: flex;
    flex-direction: column;
  }
  main {
    flex: 1;
  }
</style>
</file>

<file path="apps/astro/src/pages/index.astro">
---
import Layout from '../layouts/Layout.astro';
import {Hero} from '../components/react/hero'
import {PrimaryFeatures} from '../components/react/primary-features'
import {SecondaryFeatures} from '../components/react/secondary-features'
import '@/styles/globals.css'
---

<Layout title="Cloudflare Native Web Starter Kit">
  <main>
    <Hero client:load />
    <PrimaryFeatures client:load />
    <SecondaryFeatures client:load />
  </main>
</Layout>
</file>

<file path="apps/astro/wrangler.toml">
name = "web"
compatibility_date = "2024-03-20"
compatibility_flags = ["nodejs_compat"]

[site]
bucket = "./dist"
pages_build_output_dir = "dist"

[build]
command = "pnpm run build"
</file>

<file path="apps/expo/app/_layout.tsx">
import React, { useEffect } from "react";
import { Stack } from "expo-router";
import { ClerkProvider, useAuth } from "@clerk/clerk-expo";
import { TRPCProvider } from "../utils/TRPCProvider";
import { useFonts } from "expo-font";
import { Text, View } from "react-native";

const publishableKey = process.env.EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY;

if (!publishableKey) {
  throw new Error("Missing publishableKey");
}

export default function RootLayout() {
  const [loaded, error] = useFonts({
    SpaceMono: require("../assets/fonts/SpaceMono-Regular.ttf"),
    "SpaceMono-Regular": require("../assets/fonts/SpaceMono-Regular.ttf"),
  });

  if (!loaded) {
    return (
      <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
        <Text>Loading fonts...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
        <Text>Error loading fonts: {error.message}</Text>
      </View>
    );
  }

  return (
    <ClerkProvider publishableKey={publishableKey}>
      <TRPCProvider>
        <RootLayoutNav />
      </TRPCProvider>
    </ClerkProvider>
  );
}

function RootLayoutNav() {
  const { isLoaded, isSignedIn } = useAuth();

  if (!isLoaded) {
    return (
      <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>
        <Text>Loading auth...</Text>
      </View>
    );
  }

  return (
    <Stack screenOptions={{ headerShown: false }}>
      <Stack.Screen name="(auth)" options={{ headerShown: false }} />
      <Stack.Screen name="(tabs)" options={{ headerShown: false }} />
      <Stack.Screen name="(gameui)" options={{ headerShown: false }} />
      <Stack.Screen name="index" options={{ headerShown: false }} />
    </Stack>
  );
}
</file>

<file path="apps/expo/app/(tabs)/_layout.tsx">
import React from "react";
import { Pressable } from "react-native";
import FontAwesome from "@expo/vector-icons/FontAwesome";
import { Link, Tabs } from "expo-router";
import { useColorScheme } from "react-native";

import Colors from "../../utils/api";

/**
 * You can explore the built-in icon families and icons on the web at https://icons.expo.fyi/
 */
function TabBarIcon(props: {
  name: React.ComponentProps<typeof FontAwesome>["name"];
  color: string;
}) {
  return <FontAwesome size={28} style={{ marginBottom: -3 }} {...props} />;
}

export default function TabLayout() {
  const colorScheme = useColorScheme();

  return (
    <Tabs
      screenOptions={{
        tabBarActiveTintColor: Colors.light.tint,
      }}
    >
      <Tabs.Screen
        name="account"
        options={{
          title: "Account",
          tabBarIcon: ({ color }) => <TabBarIcon name="user" color={color} />,
          // This tab should redirect to sign-in when the user is not authenticated
          tabBarLabel: ({ focused, children, color }) => {
            // @ts-ignore - we're manually defining props based on source code examination
            return (
              <Link href="/account" asChild>
                <Pressable>
                  {/* @ts-ignore - we're manually defining props based on source code examination */}
                  {({ pressed }) => (
                    <FontAwesome
                      name="user"
                      size={25}
                      color={focused ? Colors.light.tint : Colors.dark.tint}
                      style={{ marginBottom: -3, opacity: pressed ? 0.5 : 1 }}
                    />
                  )}
                </Pressable>
              </Link>
            );
          },
        }}
      />
      <Tabs.Screen
        name="add"
        options={{
          title: "Add",
          tabBarIcon: ({ color }) => <TabBarIcon name="plus" color={color} />,
        }}
      />
      <Tabs.Screen
        name="lore"
        options={{
          title: "Lore",
          tabBarIcon: ({ color }) => <TabBarIcon name="book" color={color} />,
        }}
      />
      <Tabs.Screen
        name="gameui"
        options={{
          title: "Game UI",
          tabBarIcon: ({ color }) => <TabBarIcon name="gamepad" color={color} />,
          href: "/(gameui)",
        }}
      />
    </Tabs>
  );
}
</file>

<file path="apps/expo/app/index.tsx">
import { useUser } from "@clerk/clerk-expo";
import { Redirect } from "expo-router";
import { Text } from "react-native";

export default function Index() {
  return <Redirect href="/(gameui)" />;
}
</file>

<file path="LICENSE">
MIT License

Copyright (c) 2025 Brenden Padilla

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
</file>

<file path="package.json">
{
  "name": "cloudflare-native-web-starter-kit",
  "private": true,
  "engines": {
    "node": ">=20.16.0",
    "pnpm": "^9.6.0"
  },
  "packageManager": "pnpm@9.6.0",
  "scripts": {
    "build": "turbo run build",
    "clean": "git clean -xdf node_modules",
    "clean:workspaces": "turbo run clean",
    "db:generate": "turbo -F @acme/db generate",
    "db:studio": "turbo -F @acme/db studio",
    "dev": "turbo watch dev --continue",
    "format": "turbo run format --continue -- --cache --cache-location .cache/.prettiercache",
    "format:fix": "turbo run format --continue -- --write --cache --cache-location .cache/.prettiercache",
    "lint": "turbo run lint --continue -- --cache --cache-location .cache/.eslintcache",
    "lint:fix": "turbo run lint --continue -- --fix --cache --cache-location .cache/.eslintcache",
    "lint:ws": "pnpm dlx sherif@latest",
    "postinstall": "pnpm lint:ws",
    "typecheck": "turbo run typecheck",
    "ui-add": "turbo run ui-add"
  },
  "devDependencies": {
    "@acme/prettier-config": "workspace:*",
    "@turbo/gen": "^2.1.3",
    "prettier": "^3.2.5",
    "turbo": "^2.3.3",
    "typescript": "^5.3.3"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="packages/db/drizzle.config.ts">
import { defineConfig } from 'drizzle-kit';

export default defineConfig({
  schema: './src/schema.ts',
  out: './migrations',
  dialect: 'sqlite',
  driver: 'd1-http',
  dbCredentials: {
    accountId: process.env.CLOUDFLARE_ACCOUNT_ID!,
    databaseId: process.env.CLOUDFLARE_DATABASE_ID!,
    token: process.env.CLOUDFLARE_D1_TOKEN!,
  },
});
</file>

<file path="packages/db/package.json">
{
  "name": "@acme/db",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "default": "./src/index.ts"
    }
  },
  "license": "MIT",
  "scripts": {
    "build": "tsc",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "dev": "tsc",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "lint": "eslint",
    "push": "pnpm with-env drizzle-kit push",
    "studio": "pnpm with-env drizzle-kit studio",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false",
    "with-env": "dotenv -e ../../.env --",
    "generate": "pnpm with-env drizzle-kit generate",
    "migrate": "pnpm with-env drizzle-kit migrate"
  },
  "dependencies": {
    "@vercel/postgres": "^0.10.0",
    "drizzle-orm": "^0.35.1",
    "drizzle-zod": "^0.5.1",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/prettier-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "dotenv-cli": "^7.4.2",
    "drizzle-kit": "^0.35.1",
    "eslint": "^8.56.0",
    "prettier": "^3.2.5",
    "typescript": "^5.3.3"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="packages/trpc/package.json">
{
  "name": "@acme/trpc",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "default": "./src/index.ts"
    }
  },
  "license": "MIT",
  "scripts": {
    "build": "tsc",
    "clean": "git clean -xdf .cache .turbo dist node_modules",
    "dev": "tsc",
    "format": "prettier --check . --ignore-path ../../.gitignore",
    "lint": "eslint",
    "typecheck": "tsc --noEmit --emitDeclarationOnly false"
  },
  "dependencies": {
    "@acme/db": "workspace:*",
    "@clerk/nextjs": "^6.4.2",
    "@trpc/server": "^11.0.0",
    "superjson": "^2.2.1",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@acme/eslint-config": "workspace:*",
    "@acme/prettier-config": "workspace:*",
    "@acme/tsconfig": "workspace:*",
    "@cloudflare/workers-types": "^4.20241205.0",
    "eslint": "^8.56.0",
    "prettier": "^3.2.5",
    "typescript": "^5.3.3"
  },
  "prettier": "@acme/prettier-config"
}
</file>

<file path="README.md">
# Cloudflare Native and Web Starter Kit

A starter template that demonstrates how to build AI-powered mobile and web applications using Cloudflare workers and wrangler CLI. This example app creates AI-generated stories about a user's day and generates accompanying images - all powered by Cloudflare workers. You can use this as a foundation to build any type of AI-powered application you want.

## 🚀 Features

- 📱 **Expo Mobile App**: Cross-platform mobile application
- 🌐 **Astro Landing Page**: Fast, modern web presence
- 🔒 **Clerk Authentication**: Secure user management
- 🔄 **tRPC API**: Type-safe API communication
- 🤖 **Workers AI**: Edge AI processing
- 📦 **R2 Storage**: Image and asset storage
- 💾 **D1 Database**: Edge SQLite database with Drizzle ORM
- 🏗️ **Cloudflare Workers**: Serverless compute
- 🔄 **Workflows**: Durable AI task processing

## 📦 Project Structure

```
.
├── apps/
│   ├── apiservice/    # Cloudflare Worker API
│   ├── expo/         # Mobile application
│   ├── astro/        # Landing page
│   └── workflows/    # Cloudflare Workers AI processing
├── packages/
│   ├── db/           # Database schema and utilities
│   └── trpc/         # tRPC router definitions
└── tooling/          # Shared development tools
```

## 🛠️ Prerequisites

- Node.js >= 20.16.0
- pnpm >= 9.6.0
- Cloudflare account
- Wrangler CLI (`npm install -g wrangler`)
- Clerk account

## 🚀 Getting Started

1. **Clone the repository**

```bash
git clone <repository-url>
cd cloudflare-turbo
```

2. **Install dependencies**

```bash
pnpm install
```

3. **Configure Cloudflare Resources**

First, login to Cloudflare CLI:
```bash
wrangler login
```

Create a D1 Database:
```bash
wrangler d1 create your-database-name
```

Create an R2 Bucket:
```bash
wrangler r2 bucket create your-bucket-name
```

4. **Configure wrangler.toml Files**

You'll need to update the wrangler.toml files in both `apps/apiservice` and `apps/workflows` with your specific configuration:

Example `wrangler.toml` structure:
```toml
name = "your-app-name"
main = "src/index.ts"

[[d1_databases]]
binding = "DB"
database_name = "your-database-name"
database_id = "your-database-id"

[[r2_buckets]]
binding = "BUCKET"
bucket_name = "your-bucket-name"
```

5. **Set up Cloudflare API Token**

Create a Cloudflare API token with D1 read and write permissions:

1. Go to the [Cloudflare Dashboard](https://dash.cloudflare.com/profile/api-tokens)
2. Click "Create Token"
3. Use the "Create Custom Token" option
4. Grant the following permissions:
   - Account > D1 > Edit
5. Copy the generated token

Create a `.env` file in the root of the project with the following variables:
```bash
CLOUDFLARE_ACCOUNT_ID="your-account-id"
CLOUDFLARE_DATABASE_ID="your-d1-database-id"
CLOUDFLARE_D1_TOKEN="your-api-token"
```

You can find your Account ID in the Cloudflare Dashboard URL or overview page.
The Database ID was provided when you created your D1 database.

6. **Initial Deployment**

Before running the app locally, you need to deploy the API service and workflows:

```bash
# Deploy API service
cd apps/apiservice
pnpm run deploy

# Deploy workflows
cd ../workflows
pnpm run deploy
```

7. **Environment Setup**

Create `.env` files based on the provided examples and update with your credentials:
```bash
cp apps/expo/.env.example apps/expo/.env
```

8. **Start Development**

```bash
pnpm dev
```
</file>

</files>
